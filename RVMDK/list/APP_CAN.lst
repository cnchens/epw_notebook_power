C251 COMPILER V5.60.0,  APP_CAN                                                            26/11/24  21:24:45  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE APP_CAN
OBJECT MODULE PLACED IN .\list\APP_CAN.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\App\src\APP_CAN.c XSMALL INTR2 BROWSE INCDIR(..\Driver\inc;..\User;
                    -..\App\inc) DEBUG PRINT(.\list\APP_CAN.lst) TABS(2) OBJECT(.\list\APP_CAN.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCAI.com ---------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   10          /* --- QQ:  800003751 -------------------------------------------------*/
   11          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   12          /*---------------------------------------------------------------------*/
   13          
   14          #include  "APP_CAN.h"
   15          #include  "STC32G_CAN.h"
   16          #include  "STC32G_GPIO.h"
   17          #include  "STC32G_UART.h"
   18          #include  "STC32G_NVIC.h"
   19          #include  "STC32G_Switch.h"
   20          
   21          /*************   功能说明   ***************
   22          
   23          CAN1、CAN2总线同时使用收发测试用例.
   24          
   25          DCAN是一个支持CAN2.0B协议的功能单元。
   26          
   27          收到一帧数据后, 通过串口1（P3.0,P3.1）发送出去，串口参数：115200,N,8,1.
   28          
   29          需要在"STC32G_UART.h"里设置： #define PRINTF_SELECT  UART1
   30          
   31          MCU每秒钟从CAN1、CAN2发送一帧固定数据.
   32          
   33          默认CAN总线波特率500KHz, 用户可自行修改.
   34          
   35          下载时, 选择时钟 24MHz (用户可在"config.h"修改频率).
   36          
   37          ******************************************/
   38          
   39          //========================================================================
   40          //                               本地常量声明 
   41          //========================================================================
   42          
   43          
   44          //========================================================================
   45          //                               本地变量声明
   46          //========================================================================
   47          
   48          
   49          //========================================================================
   50          //                               本地函数声明
   51          //========================================================================
   52          
   53          
   54          //========================================================================
   55          //                            外部函数和变量声明
   56          //========================================================================
   57          
   58          extern u16 msecond;
C251 COMPILER V5.60.0,  APP_CAN                                                            26/11/24  21:24:45  PAGE 2   

   59          
   60          //========================================================================
   61          // 函数: CAN_init
   62          // 描述: 用户初始化程序.
   63          // 参数: None.
   64          // 返回: None.
   65          // 版本: V1.0, 2022-03-27
   66          //========================================================================
   67          void CAN_init(void)
   68          {
   69   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
   70   1        CAN_InitTypeDef CAN_InitStructure;          //结构定义
   71   1      
   72   1        CAN_InitStructure.CAN_Enable = ENABLE;    //CAN功能使能   ENABLE或DISABLE
   73   1        CAN_InitStructure.CAN_IMR    = CAN_ALLIM; //CAN中断寄存器   CAN_DOIM,CAN_BEIM,CAN_TIM,CAN_RIM,CAN_EPIM,CA
             -N_EWIM,CAN_ALIM,CAN_ALLIM,DISABLE
   74   1        CAN_InitStructure.CAN_SJW    = 0;         //重新同步跳跃宽度  0~3
   75   1        CAN_InitStructure.CAN_SAM    = 0;         //总线电平采样次数  0:采样1次; 1:采样3次
   76   1      
   77   1        //CAN总线波特率=Fclk/((1+(TSG1+1)+(TSG2+1))*(BRP+1)*2)
   78   1        CAN_InitStructure.CAN_TSG1   = 2;         //同步采样段1       0~15
   79   1        CAN_InitStructure.CAN_TSG2   = 1;         //同步采样段2       1~7 (TSG2 不能设置为0)
   80   1        CAN_InitStructure.CAN_BRP    = 3;         //波特率分频系数    0~63
   81   1        //24000000/((1+3+2)*4*2)=500KHz
   82   1      
   83   1        CAN_InitStructure.CAN_ListenOnly = DISABLE; //Listen Only模式   ENABLE,DISABLE
   84   1        CAN_InitStructure.CAN_Filter  = DUAL_FILTER;//滤波选择  DUAL_FILTER(双滤波),SINGLE_FILTER(单滤波)
   85   1        CAN_InitStructure.CAN_ACR0    = 0x00;     //总线验收代码寄存器 0~0xFF
   86   1        CAN_InitStructure.CAN_ACR1    = 0x00;
   87   1        CAN_InitStructure.CAN_ACR2    = 0x00;
   88   1        CAN_InitStructure.CAN_ACR3    = 0x00;
   89   1        CAN_InitStructure.CAN_AMR0    = 0xff;     //总线验收屏蔽寄存器 0~0xFF
   90   1        CAN_InitStructure.CAN_AMR1    = 0xff;
   91   1        CAN_InitStructure.CAN_AMR2    = 0xff;
   92   1        CAN_InitStructure.CAN_AMR3    = 0xff;
   93   1        CAN_Inilize(CAN1,&CAN_InitStructure);     //CAN1 初始化
   94   1        CAN_Inilize(CAN2,&CAN_InitStructure);     //CAN2 初始化
   95   1        
   96   1        NVIC_CAN_Init(CAN1,ENABLE,Priority_1);    //中断使能, CAN1/CAN2; ENABLE/DISABLE; 优先级(低到高) Priority_0
             -,Priority_1,Priority_2,Priority_3
   97   1        NVIC_CAN_Init(CAN2,ENABLE,Priority_1);    //中断使能, CAN1/CAN2; ENABLE/DISABLE; 优先级(低到高) Priority_0
             -,Priority_1,Priority_2,Priority_3
   98   1        
   99   1        P5_MODE_IO_PU(GPIO_Pin_LOW);    //P5.0~P5.3 设置为准双向口
  100   1      
  101   1        CAN1_SW(CAN1_P50_P51);        //CAN1_P00_P01,CAN1_P50_P51,CAN1_P42_P45,CAN1_P70_P71
  102   1        CAN2_SW(CAN2_P52_P53);        //CAN2_P02_P03,CAN2_P52_P53,CAN2_P46_P47,CAN2_P72_P73
  103   1      
  104   1        //====初始化数据=====
  105   1        CAN1_Tx.FF = STANDARD_FRAME;    //标准帧
  106   1        CAN1_Tx.RTR = 0;                //0：数据帧，1：远程帧
  107   1        CAN1_Tx.DLC = 0x08;             //数据长度
  108   1        CAN1_Tx.ID = 0x0567;            //CAN ID
  109   1        CAN1_Tx.DataBuffer[0] = 0x11;   //数据内容
  110   1        CAN1_Tx.DataBuffer[1] = 0x12;
  111   1        CAN1_Tx.DataBuffer[2] = 0x13;
  112   1        CAN1_Tx.DataBuffer[3] = 0x14;
  113   1        CAN1_Tx.DataBuffer[4] = 0x15;
  114   1        CAN1_Tx.DataBuffer[5] = 0x16;
  115   1        CAN1_Tx.DataBuffer[6] = 0x17;
  116   1        CAN1_Tx.DataBuffer[7] = 0x18;
  117   1        
  118   1        CAN2_Tx.FF = EXTENDED_FRAME;    //扩展帧
  119   1        CAN2_Tx.RTR = 0;                //0：数据帧，1：远程帧
  120   1        CAN2_Tx.DLC = 0x08;             //数据长度
  121   1        CAN2_Tx.ID = 0x03456789;        //CAN ID
C251 COMPILER V5.60.0,  APP_CAN                                                            26/11/24  21:24:45  PAGE 3   

  122   1        CAN2_Tx.DataBuffer[0] = 0x21;   //数据内容
  123   1        CAN2_Tx.DataBuffer[1] = 0x22;
  124   1        CAN2_Tx.DataBuffer[2] = 0x23;
  125   1        CAN2_Tx.DataBuffer[3] = 0x24;
  126   1        CAN2_Tx.DataBuffer[4] = 0x25;
  127   1        CAN2_Tx.DataBuffer[5] = 0x26;
  128   1        CAN2_Tx.DataBuffer[6] = 0x27;
  129   1        CAN2_Tx.DataBuffer[7] = 0x28;
  130   1      
  131   1          //打印串口初始化
  132   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,
             -UART_9bit_BRTx
  133   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //选择波特率发生器, BRT_Timer2 (注意: 串口2固定使用BRT
             -_Timer2, 所以不用选择)
  134   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率,     110 ~ 115200
  135   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  136   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口 USART1,USART2,USART3,USART4
  137   1        NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
  138   1      
  139   1        P3_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1);   //P3.0,P3.1 设置为准双向口
  140   1        UART1_SW(UART1_SW_P30_P31);   //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  141   1      }
  142          
  143          //========================================================================
  144          // 函数: Sample_CAN
  145          // 描述: 用户应用程序.
  146          // 参数: None.
  147          // 返回: None.
  148          // 版本: V1.0, 2022-03-27
  149          //========================================================================
  150          void Sample_CAN(void)
  151          {
  152   1        u8 sr;
  153   1        u8 n,i,j;
  154   1      
  155   1          //------------------处理CAN1模块-----------------------
  156   1        if(++msecond >= 1000)   //1秒到
  157   1        {
  158   2          msecond = 0;
  159   2      
  160   2          CANSEL = CAN1;    //选择CAN1模块
  161   2          sr = CanReadReg(SR);
  162   2      
  163   2          if(sr & 0x01)   //判断是否有 BS:BUS-OFF状态
  164   2          {
  165   3            CANAR = MR;
  166   3            CANDR &= ~0x04;  //清除 Reset Mode, 从BUS-OFF状态退出
  167   3          }
  168   2          else
  169   2          {
  170   3                  CanSendMsg(&CAN1_Tx);   //发送一帧数据
  171   3          }
  172   2      
  173   2          //------------------处理CAN2模块-----------------------
  174   2          CANSEL = CAN2;    //选择CAN2模块
  175   2          sr = CanReadReg(SR);
  176   2      
  177   2          if(sr & 0x01)   //判断是否有 BS:BUS-OFF状态
  178   2          {
  179   3            CANAR = MR;
  180   3            CANDR &= ~0x04;  //清除 Reset Mode, 从BUS-OFF状态退出
  181   3          }
  182   2          else
  183   2          {
  184   3                  CanSendMsg(&CAN2_Tx);   //发送一帧数据
C251 COMPILER V5.60.0,  APP_CAN                                                            26/11/24  21:24:45  PAGE 4   

  185   3          }
  186   2        }
  187   1      
  188   1        if(B_Can1Read)
  189   1        {
  190   2          B_Can1Read = 0;
  191   2          
  192   2          CANSEL = CAN1;    //选择CAN1模块
  193   2              n = CanReadMsg(CAN1_Rx);    //读取接收内容
  194   2              if(n>0)
  195   2              {
  196   3                  for(i=0;i<n;i++)
  197   3                  {
  198   4      //                CanSendMsg(&CAN1_Rx[i]);  //CAN总线原样返回
  199   4                          printf("CAN1 ID=0x%08lX DLC=%d FF=%d RTR=%d ",CAN1_Rx[i].ID,CAN1_Rx[i].DLC,CAN1_Rx[i]
             -.FF,CAN1_Rx[i].RTR);
  200   4                      for(j=0;j<CAN1_Rx[i].DLC;j++)
  201   4                      {
  202   5                          printf("0x%02X ",CAN1_Rx[i].DataBuffer[j]);    //从串口输出收到的数据
  203   5                      }
  204   4                      printf("\r\n");
  205   4                  }
  206   3              }
  207   2        }
  208   1      
  209   1        if(B_Can2Read)
  210   1        {
  211   2          B_Can2Read = 0;
  212   2          
  213   2          CANSEL = CAN2;    //选择CAN2模块
  214   2              n = CanReadMsg(CAN2_Rx);    //读取接收内容
  215   2              if(n>0)
  216   2              {
  217   3                  for(i=0;i<n;i++)
  218   3                  {
  219   4      //                CanSendMsg(CAN2_Rx);  //CAN总线原样返回
  220   4                          printf("CAN2 ID=0x%08lX DLC=%d FF=%d RTR=%d ",CAN2_Rx[i].ID,CAN2_Rx[i].DLC,CAN2_Rx[i]
             -.FF,CAN2_Rx[i].RTR);
  221   4                      for(j=0;j<CAN2_Rx[i].DLC;j++)
  222   4                      {
  223   5                          printf("0x%02X ",CAN2_Rx[i].DataBuffer[j]);    //从串口输出收到的数据
  224   5                      }
  225   4                      printf("\r\n");
  226   4                  }
  227   3              }
  228   2        }
  229   1      }
  230          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       812     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         26
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
C251 COMPILER V5.60.0,  APP_CAN                                                            26/11/24  21:24:45  PAGE 5   

  hconst size          =        85     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
