C251 COMPILER V5.60.0,  APP_HSPWM                                                          26/11/24  21:24:47  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE APP_HSPWM
OBJECT MODULE PLACED IN .\list\APP_HSPWM.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\App\src\APP_HSPWM.c XSMALL INTR2 BROWSE INCDIR(..\Driver\inc;..\Use
                    -r;..\App\inc) DEBUG PRINT(.\list\APP_HSPWM.lst) TABS(2) OBJECT(.\list\APP_HSPWM.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include  "APP_HSPWM.h"
   14          #include  "STC32G_Clock.h"
   15          #include  "STC32G_GPIO.h"
   16          #include  "STC32G_PWM.h"
   17          #include  "STC32G_NVIC.h"
   18          
   19          /*************  功能说明  **************
   20          
   21          高速高级PWM定时器 PWM1P/PWM1N,PWM2P/PWM2N,PWM3P/PWM3N,PWM4P/PWM4N 每个通道都可独立实现PWM输出，或者两两互
             -补对称输出.
   22          
   23          8个通道PWM设置对应P6的8个端口.
   24          
   25          通过P6口上连接的8个LED灯，利用PWM实现呼吸灯效果.
   26          
   27          高级PWM定时器 PWM5,PWM6,PWM7,PWM8 每个通道都可独立实现PWM输出.
   28          
   29          4个通道PWM根据需要设置对应输出口，可通过示波器观察输出的信号.
   30          
   31          PWM周期和占空比可以根据需要自行设置，最高可达65535.
   32          
   33          下载时, 选择时钟 24MHz (可以在配置文件"config.h"中修改).
   34          
   35          ******************************************/
   36          
   37          //========================================================================
   38          //                               本地常量声明 
   39          //========================================================================
   40          
   41          
   42          //========================================================================
   43          //                               本地变量声明
   44          //========================================================================
   45          
   46          
   47          //========================================================================
   48          //                               本地函数声明
   49          //========================================================================
   50          
   51          
   52          //========================================================================
   53          //                            外部函数和变量声明
   54          //========================================================================
   55          
   56          extern PWMx_Duty PWMA_Duty;
   57          extern bit PWM1_Flag;
C251 COMPILER V5.60.0,  APP_HSPWM                                                          26/11/24  21:24:47  PAGE 2   

   58          extern bit PWM2_Flag;
   59          extern bit PWM3_Flag;
   60          extern bit PWM4_Flag;
   61          
   62          extern PWMx_Duty PWMB_Duty;
   63          extern bit PWM5_Flag;
   64          extern bit PWM6_Flag;
   65          extern bit PWM7_Flag;
   66          extern bit PWM8_Flag;
   67          
   68          //========================================================================
   69          // 函数: HSPWM_init
   70          // 描述: 用户初始化程序.
   71          // 参数: None.
   72          // 返回: None.
   73          // 版本: V1.0, 2021-05-27
   74          //========================================================================
   75          void HSPWM_init(void)
   76          {
   77   1        HSPWMx_InitDefine   PWMx_InitStructure;
   78   1      
   79   1        PWMA_Duty.PWM1_Duty = 128;
   80   1        PWMA_Duty.PWM2_Duty = 256;
   81   1        PWMA_Duty.PWM3_Duty = 512;
   82   1        PWMA_Duty.PWM4_Duty = 1024;
   83   1      
   84   1        PWMB_Duty.PWM5_Duty = 128;
   85   1        PWMB_Duty.PWM6_Duty = 256;
   86   1        PWMB_Duty.PWM7_Duty = 512;
   87   1        PWMB_Duty.PWM8_Duty = 1024;
   88   1      
   89   1        HSPllClkConfig(MCLKSEL_HIRC,PLL_96M,0);    //系统时钟选择,PLL时钟选择,时钟分频系数
   90   1      
   91   1        PWMx_InitStructure.PWM_EnoSelect= ENO1P|ENO1N|ENO2P|ENO2N|ENO3P|ENO3N|ENO4P|ENO4N;  //输出通道选择, ENO1P
             -,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
   92   1        PWMx_InitStructure.PWM_Period   = 2047;             //周期时间,   0~65535
   93   1        PWMx_InitStructure.PWM_DeadTime = 0;                //死区发生器设置, 0~255
   94   1        PWMx_InitStructure.PWM_MainOutEnable= ENABLE;       //主输出使能, ENABLE,DISABLE
   95   1        PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;       //使能计数器, ENABLE,DISABLE
   96   1        HSPWM_Configuration(PWMA, &PWMx_InitStructure, &PWMA_Duty);       //初始化PWM通用寄存器,  PWMA,PWMB
   97   1        PWMx_InitStructure.PWM_EnoSelect= ENO5P|ENO6P|ENO7P|ENO8P;  //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P
             -,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
   98   1        HSPWM_Configuration(PWMB, &PWMx_InitStructure, &PWMB_Duty);       //初始化PWM通用寄存器,  PWMA,PWMB
   99   1      
  100   1        PWM1_USE_P60P61();
  101   1        PWM2_USE_P62P63();
  102   1        PWM3_USE_P64P65();
  103   1        PWM4_USE_P66P67();
  104   1      
  105   1        PWM5_USE_P74();
  106   1        PWM6_USE_P75();
  107   1        PWM7_USE_P76();
  108   1        PWM8_USE_P77();
  109   1        
  110   1        P4_MODE_IO_PU(GPIO_Pin_0);      //P4.0 设置为准双向口
  111   1        NVIC_PWM_Init(PWMA,DISABLE,Priority_0);
  112   1        NVIC_PWM_Init(PWMB,DISABLE,Priority_0);
  113   1        P40 = 0;    //打开实验箱LED电源
  114   1      }
  115          
  116          //========================================================================
  117          // 函数: Sample_HSSPI
  118          // 描述: 用户应用程序.
  119          // 参数: None.
  120          // 返回: None.
  121          // 版本: V1.0, 2021-05-27
C251 COMPILER V5.60.0,  APP_HSPWM                                                          26/11/24  21:24:47  PAGE 3   

  122          //========================================================================
  123          void Sample_HSPWM(void)
  124          {
  125   1        if(!PWM1_Flag)
  126   1        {
  127   2          PWMA_Duty.PWM1_Duty++;
  128   2          if(PWMA_Duty.PWM1_Duty >= 2047) PWM1_Flag = 1;
  129   2        }
  130   1        else
  131   1        {
  132   2          PWMA_Duty.PWM1_Duty--;
  133   2          if(PWMA_Duty.PWM1_Duty <= 0) PWM1_Flag = 0;
  134   2        }
  135   1      
  136   1        if(!PWM2_Flag)
  137   1        {
  138   2          PWMA_Duty.PWM2_Duty++;
  139   2          if(PWMA_Duty.PWM2_Duty >= 2047) PWM2_Flag = 1;
  140   2        }
  141   1        else
  142   1        {
  143   2          PWMA_Duty.PWM2_Duty--;
  144   2          if(PWMA_Duty.PWM2_Duty <= 0) PWM2_Flag = 0;
  145   2        }
  146   1      
  147   1        if(!PWM3_Flag)
  148   1        {
  149   2          PWMA_Duty.PWM3_Duty++;
  150   2          if(PWMA_Duty.PWM3_Duty >= 2047) PWM3_Flag = 1;
  151   2        }
  152   1        else
  153   1        {
  154   2          PWMA_Duty.PWM3_Duty--;
  155   2          if(PWMA_Duty.PWM3_Duty <= 0) PWM3_Flag = 0;
  156   2        }
  157   1      
  158   1        if(!PWM4_Flag)
  159   1        {
  160   2          PWMA_Duty.PWM4_Duty++;
  161   2          if(PWMA_Duty.PWM4_Duty >= 2047) PWM4_Flag = 1;
  162   2        }
  163   1        else
  164   1        {
  165   2          PWMA_Duty.PWM4_Duty--;
  166   2          if(PWMA_Duty.PWM4_Duty <= 0) PWM4_Flag = 0;
  167   2        }
  168   1        
  169   1        if(!PWM5_Flag)
  170   1        {
  171   2          PWMB_Duty.PWM5_Duty++;
  172   2          if(PWMB_Duty.PWM5_Duty >= 2047) PWM5_Flag = 1;
  173   2        }
  174   1        else
  175   1        {
  176   2          PWMB_Duty.PWM5_Duty--;
  177   2          if(PWMB_Duty.PWM5_Duty <= 0) PWM5_Flag = 0;
  178   2        }
  179   1      
  180   1        if(!PWM6_Flag)
  181   1        {
  182   2          PWMB_Duty.PWM6_Duty++;
  183   2          if(PWMB_Duty.PWM6_Duty >= 2047) PWM6_Flag = 1;
  184   2        }
  185   1        else
  186   1        {
  187   2          PWMB_Duty.PWM6_Duty--;
C251 COMPILER V5.60.0,  APP_HSPWM                                                          26/11/24  21:24:47  PAGE 4   

  188   2          if(PWMB_Duty.PWM6_Duty <= 0) PWM6_Flag = 0;
  189   2        }
  190   1      
  191   1        if(!PWM7_Flag)
  192   1        {
  193   2          PWMB_Duty.PWM7_Duty++;
  194   2          if(PWMB_Duty.PWM7_Duty >= 2047) PWM7_Flag = 1;
  195   2        }
  196   1        else
  197   1        {
  198   2          PWMB_Duty.PWM7_Duty--;
  199   2          if(PWMB_Duty.PWM7_Duty <= 0) PWM7_Flag = 0;
  200   2        }
  201   1      
  202   1        if(!PWM8_Flag)
  203   1        {
  204   2          PWMB_Duty.PWM8_Duty++;
  205   2          if(PWMB_Duty.PWM8_Duty >= 2047) PWM8_Flag = 1;
  206   2        }
  207   1        else
  208   1        {
  209   2          PWMB_Duty.PWM8_Duty--;
  210   2          if(PWMB_Duty.PWM8_Duty <= 0) PWM8_Flag = 0;
  211   2        }
  212   1        
  213   1        UpdateHSPwm(PWMA, &PWMA_Duty);
  214   1        UpdateHSPwm(PWMB, &PWMB_Duty);
  215   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       588     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------          6
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
