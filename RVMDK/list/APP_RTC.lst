C251 COMPILER V5.60.0,  APP_RTC                                                            26/11/24  21:24:41  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE APP_RTC
OBJECT MODULE PLACED IN .\list\APP_RTC.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\App\src\APP_RTC.c XSMALL INTR2 BROWSE INCDIR(..\Driver\inc;..\User;
                    -..\App\inc) DEBUG PRINT(.\list\APP_RTC.lst) TABS(2) OBJECT(.\list\APP_RTC.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include  "APP.h"
   14          #include  "STC32G_RTC.h"
   15          #include  "STC32G_GPIO.h"
   16          #include  "STC32G_UART.h"
   17          #include  "STC32G_NVIC.h"
   18          #include  "STC32G_Switch.h"
   19          
   20          /*************  功能说明  **************
   21          
   22          读写芯片内部集成的RTC模块.
   23          
   24          用STC的MCU的IO方式驱动8位数码管。
   25          
   26          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下, 用户修改MCU主时钟频率时,自动定时于1ms.
   27          
   28          8位数码管显示时间(小时-分钟-秒).
   29          
   30          行列扫描按键键码为25~32.
   31          
   32          按键只支持单键按下, 不支持多键同时按下, 那样将会有不可预知的结果.
   33          
   34          键按下超过1秒后,将以10键/秒的速度提供重键输出. 用户只需要检测KeyCode是否非0来判断键是否按下.
   35          
   36          调整时间键:
   37          键码25: 小时+.
   38          键码26: 小时-.
   39          键码27: 分钟+.
   40          键码28: 分钟-.
   41          
   42          下载时, 选择时钟 24MHz (可以在配置文件"config.h"中修改).
   43          
   44          ******************************************/
   45          
   46          //========================================================================
   47          //                               本地常量声明 
   48          //========================================================================
   49          
   50          #define SleepModeSet  0        //0:不进休眠模式，使用数码管显示时不能进休眠; 1:使能休眠模式
   51          
   52          //========================================================================
   53          //                               本地变量声明
   54          //========================================================================
   55          
   56          
   57          //========================================================================
   58          //                               本地函数声明
C251 COMPILER V5.60.0,  APP_RTC                                                            26/11/24  21:24:41  PAGE 2   

   59          //========================================================================
   60          
   61          void IO_KeyScan(void);   //50ms call
   62          void DisplayRTC(void);
   63          void WriteRTC(void);
   64          
   65          //========================================================================
   66          //                            外部函数和变量声明
   67          //========================================================================
   68          
   69          extern bit B_1S;
   70          extern bit B_Alarm;
   71          
   72          //========================================================================
   73          // 函数: RTC_init
   74          // 描述: 用户初始化程序.
   75          // 参数: None.
   76          // 返回: None.
   77          // 版本: V1.0, 2020-09-25
   78          //========================================================================
   79          void RTC_init(void)
   80          {
   81   1        u8  i;
   82   1        RTC_InitTypeDef   RTC_InitStructure;
   83   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
   84   1      
   85   1        RTC_InitStructure.RTC_Clock  = RTC_IRC32KCR;  //RTC 时钟, RTC_IRC32KCR, RTC_X32KCR
   86   1        RTC_InitStructure.RTC_Enable = ENABLE;      //I2C功能使能,   ENABLE, DISABLE
   87   1        RTC_InitStructure.RTC_Year   = 21;          //RTC 年, 00~99, 对应2000~2099年
   88   1        RTC_InitStructure.RTC_Month  = 12;          //RTC 月, 01~12
   89   1        RTC_InitStructure.RTC_Day    = 31;          //RTC 日, 01~31
   90   1        RTC_InitStructure.RTC_Hour   = 23;          //RTC 时, 00~23
   91   1        RTC_InitStructure.RTC_Min    = 59;          //RTC 分, 00~59
   92   1        RTC_InitStructure.RTC_Sec    = 55;          //RTC 秒, 00~59
   93   1        RTC_InitStructure.RTC_Ssec   = 00;          //RTC 1/128秒, 00~127
   94   1      
   95   1        RTC_InitStructure.RTC_ALAHour= 00;          //RTC 闹钟时, 00~23
   96   1        RTC_InitStructure.RTC_ALAMin = 00;          //RTC 闹钟分, 00~59
   97   1        RTC_InitStructure.RTC_ALASec = 00;          //RTC 闹钟秒, 00~59
   98   1        RTC_InitStructure.RTC_ALASsec= 00;          //RTC 闹钟1/128秒, 00~127
   99   1        RTC_Inilize(&RTC_InitStructure);
  100   1        NVIC_RTC_Init(RTC_ALARM_INT|RTC_SEC_INT,Priority_0);    //中断使能, RTC_ALARM_INT/RTC_DAY_INT/RTC_HOUR_INT
             -/RTC_MIN_INT/RTC_SEC_INT/RTC_SEC2_INT/RTC_SEC8_INT/RTC_SEC32_INT/DISABLE; 优先级(低到高) Priority_0,Priority_1,Priority_
             -2,Priority_3
  101   1      
  102   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,
             -UART_9bit_BRTx
  103   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //选择波特率发生器, BRT_Timer2 (注意: 串口2固定使用BRT
             -_Timer2, 所以不用选择)
  104   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率,     110 ~ 115200
  105   1        COMx_InitStructure.UART_RxEnable  = DISABLE;      //接收禁止,   ENABLE 或 DISABLE
  106   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口2 UART1,UART2,UART3,UART4
  107   1        NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
  108   1        
  109   1        P0_MODE_IO_PU(GPIO_Pin_All);    //P0 设置为准双向口
  110   1        P6_MODE_IO_PU(GPIO_Pin_All);    //P6 设置为准双向口
  111   1        P7_MODE_IO_PU(GPIO_Pin_All);    //P7 设置为准双向口
  112   1        display_index = 0;
  113   1        
  114   1        for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
  115   1          
  116   1        KeyHoldCnt = 0; //键按下计时
  117   1        KeyCode = 0;    //给用户使用的键码
  118   1      
  119   1        IO_KeyState = 0;
C251 COMPILER V5.60.0,  APP_RTC                                                            26/11/24  21:24:41  PAGE 3   

  120   1        IO_KeyState1 = 0;
  121   1        IO_KeyHoldCnt = 0;
  122   1        cnt50ms = 0;
  123   1      
  124   1        printf("STC32G RTC Test!\r\n");
  125   1      }
  126          
  127          //========================================================================
  128          // 函数: Sample_RTC
  129          // 描述: 用户应用程序.
  130          // 参数: None.
  131          // 返回: None.
  132          // 版本: V1.0, 2020-09-25
  133          //========================================================================
  134          void Sample_RTC(void)
  135          {
  136   1        if(B_1S)
  137   1        {
  138   2          B_1S = 0;
  139   2          DisplayRTC();
  140   2          printf("Year=20%d,Month=%d,Day=%d,Hour=%d,Minute=%d,Second=%d\r\n",YEAR,MONTH,DAY,HOUR,MIN,SEC);
  141   2        }
  142   1      
  143   1        if(B_Alarm)
  144   1        {
  145   2          B_Alarm = 0;
  146   2          printf("RTC Alarm!\r\n");
  147   2        }
  148   1      
  149   1      #if(SleepModeSet == 1)
                   _nop_();
                   _nop_();
                   PD = 1;  //STC32G 芯片使用内部32K时钟，休眠无法唤醒
                   _nop_();
                   _nop_();
                   _nop_();
                   _nop_();
                   _nop_();
                   _nop_();
               #else
  160   1        DisplayScan();
  161   1        
  162   1        if(++cnt50ms >= 50)     //50ms扫描一次行列键盘
  163   1        {
  164   2          cnt50ms = 0;
  165   2          IO_KeyScan();
  166   2        }
  167   1        
  168   1        if(KeyCode != 0)        //有键按下
  169   1        {
  170   2          if(KeyCode == 25)   //hour +1
  171   2          {
  172   3            if(++hour >= 24)    hour = 0;
  173   3            WriteRTC();
  174   3            DisplayRTC();
  175   3          }
  176   2          if(KeyCode == 26)   //hour -1
  177   2          {
  178   3            if(--hour >= 24)    hour = 23;
  179   3            WriteRTC();
  180   3            DisplayRTC();
  181   3          }
  182   2          if(KeyCode == 27)   //minute +1
  183   2          {
  184   3            second = 0;
  185   3            if(++minute >= 60)  minute = 0;
C251 COMPILER V5.60.0,  APP_RTC                                                            26/11/24  21:24:41  PAGE 4   

  186   3            WriteRTC();
  187   3            DisplayRTC();
  188   3          }
  189   2          if(KeyCode == 28)   //minute -1
  190   2          {
  191   3            second = 0;
  192   3            if(--minute >= 60)  minute = 59;
  193   3            WriteRTC();
  194   3            DisplayRTC();
  195   3          }
  196   2      
  197   2          KeyCode = 0;
  198   2        }
  199   1      #endif
  200   1      }
  201          
  202          //========================================================================
  203          // 函数: DisplayRTC
  204          // 描述: 显示时钟函数.
  205          // 参数: None.
  206          // 返回: None.
  207          // 版本: V1.0, 2020-09-25
  208          //========================================================================
  209          void DisplayRTC(void)
  210          {
  211   1          hour = HOUR;
  212   1          minute = MIN;
  213   1      
  214   1          if(HOUR >= 10)  LED8[0] = HOUR / 10;
  215   1          else            LED8[0] = DIS_BLACK;
  216   1          LED8[1] = HOUR % 10;
  217   1          LED8[2] = DIS_;
  218   1          LED8[3] = MIN / 10;
  219   1          LED8[4] = MIN % 10;
  220   1          LED8[5] = DIS_;
  221   1          LED8[6] = SEC / 10;
  222   1          LED8[7] = SEC % 10;
  223   1      }
  224          
  225          
  226          //========================================================================
  227          // 函数: WriteRTC
  228          // 描述: 写RTC函数.
  229          // 参数: None.
  230          // 返回: None.
  231          // 版本: V1.0, 2020-09-25
  232          //========================================================================
  233          void WriteRTC(void)
  234          {
  235   1          INIYEAR = YEAR;   //继承当前年月日
  236   1          INIMONTH = MONTH;
  237   1          INIDAY = DAY;
  238   1      
  239   1          INIHOUR = hour;   //修改时分秒
  240   1          INIMIN = minute;
  241   1          INISEC = 0;
  242   1          INISSEC = 0;
  243   1          RTCCFG |= 0x01;   //触发RTC寄存器初始化
  244   1      }
  245          
  246          
  247          /*****************************************************
  248              行列键扫描程序
  249              使用XY查找4x4键的方法，只能单键，速度快
  250          
  251             Y     P04      P05      P06      P07
C251 COMPILER V5.60.0,  APP_RTC                                                            26/11/24  21:24:41  PAGE 5   

  252                    |        |        |        |
  253          X         |        |        |        |
  254          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
  255                    |        |        |        |
  256          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
  257                    |        |        |        |
  258          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
  259                    |        |        |        |
  260          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
  261                    |        |        |        |
  262          ******************************************************/
  263          
  264          
  265          //========================================================================
  266          // 函数: IO_KeyDelay
  267          // 描述: 按键扫描延迟程序.
  268          // 参数: None.
  269          // 返回: None.
  270          // 版本: V1.0, 2020-09-25
  271          //========================================================================
  272          void IO_KeyDelay(void)
  273          {
  274   1          u8 i;
  275   1          i = 60;
  276   1          while(--i)  ;
  277   1      }
  278          
  279          //========================================================================
  280          // 函数: IO_KeyScan
  281          // 描述: 按键扫描程序.
  282          // 参数: None.
  283          // 返回: None.
  284          // 版本: V1.0, 2020-09-25
  285          //========================================================================
  286          void IO_KeyScan(void)    //50ms call
  287          {
  288   1          u8  j;
  289   1      
  290   1          j = IO_KeyState1;   //保存上一次状态
  291   1      
  292   1          P0 = 0xf0;  //X低，读Y
  293   1          IO_KeyDelay();
  294   1          IO_KeyState1 = P0 & 0xf0;
  295   1      
  296   1          P0 = 0x0f;  //Y低，读X
  297   1          IO_KeyDelay();
  298   1          IO_KeyState1 |= (P0 & 0x0f);
  299   1          IO_KeyState1 ^= 0xff;   //取反
  300   1          
  301   1          if(j == IO_KeyState1)   //连续两次读相等
  302   1          {
  303   2              j = IO_KeyState;
  304   2              IO_KeyState = IO_KeyState1;
  305   2              if(IO_KeyState != 0)    //有键按下
  306   2              {
  307   3                  F0 = 0;
  308   3                  if(j == 0)  F0 = 1; //第一次按下
  309   3                  else if(j == IO_KeyState)
  310   3                  {
  311   4                      if(++IO_KeyHoldCnt >= 20)   //1秒后重键
  312   4                      {
  313   5                          IO_KeyHoldCnt = 18;
  314   5                          F0 = 1;
  315   5                      }
  316   4                  }
  317   3                  if(F0)
C251 COMPILER V5.60.0,  APP_RTC                                                            26/11/24  21:24:41  PAGE 6   

  318   3                  {
  319   4                      j = T_KeyTable[IO_KeyState >> 4];
  320   4                      if((j != 0) && (T_KeyTable[IO_KeyState& 0x0f] != 0)) 
  321   4                          KeyCode = (j - 1) * 4 + T_KeyTable[IO_KeyState & 0x0f] + 16;    //计算键码，17~32
  322   4                  }
  323   3              }
  324   2              else    IO_KeyHoldCnt = 0;
  325   2          }
  326   1          P0 = 0xff;
  327   1      }
  328          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       950     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         22
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        88     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
