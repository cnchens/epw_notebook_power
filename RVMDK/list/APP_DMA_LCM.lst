C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE APP_DMA_LCM
OBJECT MODULE PLACED IN .\list\APP_DMA_LCM.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\App\src\APP_DMA_LCM.c XSMALL INTR2 BROWSE INCDIR(..\Driver\inc;..\U
                    -ser;..\App\inc) DEBUG PRINT(.\list\APP_DMA_LCM.lst) TABS(2) OBJECT(.\list\APP_DMA_LCM.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* Èç¹ûÒªÔÚ³ÌÐòÖÐÊ¹ÓÃ´Ë´úÂë,ÇëÔÚ³ÌÐòÖÐ×¢Ã÷Ê¹ÓÃÁËSTCµÄ×ÊÁÏ¼°³ÌÐò            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include  "APP_DMA_LCM.h"
   14          #include  "STC32G_GPIO.h"
   15          #include  "STC32G_DMA.h"
   16          #include  "STC32G_NVIC.h"
   17          #include  "STC32G_LCM.h"
   18          #include  "STC32G_Delay.h"
   19          #include  "font.h"
   20          
   21          /*************  ¹¦ÄÜËµÃ÷  **************
   22          
   23          LCM½Ó¿Ú+DMAÇý¶¯Òº¾§ÆÁ³ÌÐò
   24          
   25          8bit I8080Ä£Ê½, P6¿Ú½ÓÊý¾Ý¿Ú
   26          
   27          sbit LCD_RS = P4^5;      //Êý¾Ý/ÃüÁîÇÐ»»
   28          sbit LCD_WR = P4^2;      //Ð´¿ØÖÆ
   29          sbit LCD_RD = P4^4;      //¶Á¿ØÖÆ
   30          sbit LCD_CS = P3^4;      //Æ¬Ñ¡
   31          sbit LCD_RESET = P4^3;   //¸´Î»
   32          
   33          LCMÖ¸ÁîÍ¨¹ýÖÐ¶Ï·½Ê½µÈ´ý·¢ËÍÍê³É
   34          
   35          DMAÉèÖÃ³¤¶È2048×Ö½Ú£¬Í¨¹ýÖÐ¶Ï·½Ê½ÅÐ¶Ï´«ÊäÍê³É
   36          
   37          ÏÂÔØÊ±, Ñ¡ÔñÊ±ÖÓ 24MHz (¿ÉÒÔÔÚÅäÖÃÎÄ¼þ"config.h"ÖÐÐÞ¸Ä).
   38          
   39          ******************************************/
   40          
   41          
   42          //========================================================================
   43          //                               ±¾µØ³£Á¿ÉùÃ÷ 
   44          //========================================================================
   45          
   46          //Ö§³ÖºáÊúÆÁ¿ìËÙ¶¨ÒåÇÐ»»
   47          #define USE_HORIZONTAL      0   //¶¨ÒåÒº¾§ÆÁË³Ê±ÕëÐý×ª·½Ïò  0-0¶ÈÐý×ª£¬1-90¶ÈÐý×ª£¬2-180¶ÈÐý×ª£¬3-270¶ÈÐý×
             -ª
   48          
   49          //»­±ÊÑÕÉ«
   50          #define WHITE            0xFFFF
   51          #define BLACK            0x0000   
   52          #define BLUE             0x001F  
   53          #define BRED             0XF81F
   54          #define GRED             0XFFE0
   55          #define GBLUE            0X07FF
   56          #define RED              0xF800
   57          #define MAGENTA          0xF81F
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 2   

   58          #define GREEN            0x07E0
   59          #define CYAN             0x7FFF
   60          #define YELLOW           0xFFE0
   61          #define BROWN            0XBC40 //×ØÉ«
   62          #define BRRED            0XFC07 //×ØºìÉ«
   63          #define GRAY             0X8430 //»ÒÉ«
   64          
   65          #define DMA_AMT_LEN  2047  //n+1, ²»Òª³¬¹ýÐ¾Æ¬ xdata ¿Õ¼äÉÏÏÞ
   66          
   67          //========================================================================
   68          //                               ±¾µØ±äÁ¿ÉùÃ÷
   69          //========================================================================
   70          
   71          //¶¨ÒåLCDµÄ³ß´ç
   72          #define LCD_W 240     //LCD ¿í¶È
   73          #define LCD_H 320     //LCD ¸ß¶È
   74          
   75          u16 POINT_COLOR=0x0000; //»­±ÊÑÕÉ«
   76          
   77          u16 xdata Buffer[8]={0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88};
   78          u16 xdata Color[DMA_AMT_LEN+1];
   79          
   80          typedef struct  
   81          {                       
   82            u16 width;      //LCD ¿í¶È
   83            u16 height;     //LCD ¸ß¶È
   84            u16 id;       //LCD ID
   85            u8  dir;      //ºáÆÁ»¹ÊÇÊúÆÁ¿ØÖÆ£º0£¬ÊúÆÁ£»1£¬ºáÆÁ¡£  
   86            u8 wramcmd;   //¿ªÊ¼Ð´gramÖ¸Áî
   87            u8 rramcmd;   //¿ªÊ¼¶ÁgramÖ¸Áî
   88            u8 setxcmd;   //ÉèÖÃx×ø±êÖ¸Áî
   89            u8 setycmd;   //ÉèÖÃy×ø±êÖ¸Áî  
   90          }_lcd_dev;  
   91          
   92          _lcd_dev lcddev;
   93          
   94          //========================================================================
   95          //                               ±¾µØº¯ÊýÉùÃ÷
   96          //========================================================================
   97          
   98          void Test_Color(void);
   99          void LCD_WR_DATA_16Bit(u16 Data);
  100          void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd);
  101          void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode);
  102          void LCD_Init(void);
  103          
  104          //========================================================================
  105          //                            Íâ²¿º¯ÊýºÍ±äÁ¿ÉùÃ÷
  106          //========================================================================
  107          
  108          
  109          //========================================================================
  110          // º¯Êý: DMA_LCM_init
  111          // ÃèÊö: ÓÃ»§³õÊ¼»¯³ÌÐò.
  112          // ²ÎÊý: None.
  113          // ·µ»Ø: None.
  114          // °æ±¾: V1.0, 2020-09-28
  115          //========================================================================
  116          void DMA_LCM_init(void)
  117          {
  118   1        LCM_InitTypeDef   LCM_InitStructure;    //½á¹¹¶¨Òå
  119   1        DMA_LCM_InitTypeDef   DMA_LCM_InitStructure;    //½á¹¹¶¨Òå
  120   1      
  121   1        //----------------------------------------------
  122   1        P6_MODE_OUT_PP(GPIO_Pin_All);   //P6 ÉèÖÃ³ÉÍÆÍìÊä³ö
  123   1        P3_MODE_OUT_PP(GPIO_Pin_4);     //P3.4¿ÚÉèÖÃ³ÉÍÆÍìÊä³ö
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 3   

  124   1        P4_MODE_OUT_PP(GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5);  //P4.2~P4.5 ÉèÖÃ³ÉÍÆÍìÊä³ö
  125   1        
  126   1        //----------------------------------------------
  127   1        LCM_InitStructure.LCM_Enable = ENABLE;      //LCM½Ó¿ÚÊ¹ÄÜ   ENABLE,DISABLE
  128   1        LCM_InitStructure.LCM_Mode = MODE_I8080;    //LCM½Ó¿ÚÄ£Ê½   MODE_I8080,MODE_M6800
  129   1        LCM_InitStructure.LCM_Bit_Wide = BIT_WIDE_8;  //LCMÊý¾Ý¿í¶È   BIT_WIDE_8,BIT_WIDE_16
  130   1        LCM_InitStructure.LCM_Setup_Time = 2;     //LCMÍ¨ÐÅÊý¾Ý½¨Á¢Ê±¼ä   0~7
  131   1        LCM_InitStructure.LCM_Hold_Time = 1;      //LCMÍ¨ÐÅÊý¾Ý±£³ÖÊ±¼ä   0~3
  132   1        LCM_Inilize(&LCM_InitStructure);    //³õÊ¼»¯
  133   1        NVIC_LCM_Init(ENABLE,Priority_0);   //ÖÐ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Prio
             -rity_2,Priority_3
  134   1      
  135   1        //----------------------------------------------
  136   1        DMA_LCM_InitStructure.DMA_Enable = ENABLE;      //DMAÊ¹ÄÜ   ENABLE,DISABLE
  137   1        DMA_LCM_InitStructure.DMA_Length = DMA_AMT_LEN;     //DMA´«Êä×Ü×Ö½ÚÊý   (0~65535) + 1, ²»Òª³¬¹ýÐ¾Æ¬ xdat
             -a ¿Õ¼äÉÏÏÞ
  138   1        DMA_LCM_InitStructure.DMA_Tx_Buffer = (u16)Color; //·¢ËÍÊý¾Ý´æ´¢µØÖ·
  139   1        DMA_LCM_InitStructure.DMA_Rx_Buffer = (u16)Buffer;  //½ÓÊÕÊý¾Ý´æ´¢µØÖ·
  140   1        DMA_LCM_Inilize(&DMA_LCM_InitStructure);    //³õÊ¼»¯
  141   1        NVIC_DMA_LCM_Init(ENABLE,Priority_0,Priority_0);  //ÖÐ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0~P
             -riority_3; ×ÜÏßÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0~Priority_3
  142   1      
  143   1        LCD_Init();
  144   1      }
  145          
  146          //========================================================================
  147          // º¯Êý: Sample_DMA_LCM
  148          // ÃèÊö: ÓÃ»§Ó¦ÓÃ³ÌÐò.
  149          // ²ÎÊý: None.
  150          // ·µ»Ø: None.
  151          // °æ±¾: V1.0, 2020-09-24
  152          //========================================================================
  153          void Sample_DMA_LCM(void)
  154          {
  155   1        Test_Color();
  156   1      }
  157          
  158          void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
  159          {   
  160   1        u16 i,j;      
  161   1        u16 width=ex-sx+1;    //µÃµ½Ìî³äµÄ¿í¶È
  162   1        u16 height=ey-sy+1;   //¸ß¶È
  163   1        LCD_SetWindows(sx,sy,ex,ey);//ÉèÖÃÏÔÊ¾´°¿Ú
  164   1      
  165   1        for(j=0,i=0;i<=DMA_AMT_LEN;i++)
  166   1        {
  167   2          Color[i] = color;
  168   2        }
  169   1        LCM_Cnt = 75;     //(320 * 240 * 2) / 2048 = 75
  170   1        LCD_CS=0;
  171   1        DMA_LCM_TRIG_WD();  //Write dat
  172   1        while(!LCD_CS);
  173   1      }
  174          
  175          void Test_Color(void)
  176          {
  177   1        LCD_Fill(0,0,lcddev.width,lcddev.height,WHITE);
  178   1        Show_Str(20,30,BLUE,YELLOW,"LCM Test",16,1);delay_ms(800);
  179   1        LCD_Fill(0,0,lcddev.width,lcddev.height,RED);
  180   1        Show_Str(20,30,BLUE,YELLOW,"RED ",16,1);delay_ms(800);
  181   1        LCD_Fill(0,0,lcddev.width,lcddev.height,GREEN);
  182   1        Show_Str(20,30,BLUE,YELLOW,"GREEN ",16,1);delay_ms(800);
  183   1        LCD_Fill(0,0,lcddev.width,lcddev.height,BLUE);
  184   1        Show_Str(20,30,RED,YELLOW,"BLUE ",16,1);delay_ms(800);
  185   1      }
  186          
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 4   

  187          /*****************************************************************************
  188           * @name       :void LCD_WR_REG(u8 Reg) 
  189           * @date       :2018-08-09 
  190           * @function   :Write an 16-bit command to the LCD screen
  191           * @parameters :data:Command value to be written
  192           * @retvalue   :None
  193          ******************************************************************************/
  194          void LCD_WR_REG(u8 Reg)  
  195          {
  196   1        LCMIFDATL = Reg;
  197   1        LCD_CS=0;
  198   1        LCMIFCR = 0x84;   //Enable interface, write command out
  199   1        while(LcmFlag);
  200   1        LCD_CS = 1 ;
  201   1      } 
  202          
  203          /*****************************************************************************
  204           * @name       :void LCD_WR_DATA(u8 Data)
  205           * @date       :2018-08-09 
  206           * @function   :Write an 16-bit data to the LCD screen
  207           * @parameters :data:data value to be written
  208           * @retvalue   :None
  209          ******************************************************************************/
  210          void LCD_WR_DATA(u8 Data)
  211          {
  212   1        LCMIFDATL = Data;
  213   1        LCD_CS=0;
  214   1        LCMIFCR = 0x85;   //Enable interface, write data out
  215   1        while(LcmFlag);
  216   1        LCD_CS = 1 ;
  217   1      }
  218          
  219          /*****************************************************************************
  220           * @name       :void LCD_WR_DATA_16Bit(u16 Data)
  221           * @date       :2018-08-09 
  222           * @function   :Write an 16-bit command to the LCD screen
  223           * @parameters :Data:Data to be written
  224           * @retvalue   :None
  225          ******************************************************************************/  
  226          void LCD_WR_DATA_16Bit(u16 Data)
  227          {
  228   1        LCD_WR_DATA((u8)(Data>>8));
  229   1        LCD_WR_DATA((u8)Data);
  230   1      }
  231          
  232          /*****************************************************************************
  233           * @name       :void LCD_WriteReg(u8 LCD_Reg, u8 LCD_RegValue)
  234           * @date       :2018-08-09 
  235           * @function   :Write data into registers
  236           * @parameters :LCD_Reg:Register address
  237                          LCD_RegValue:Data to be written
  238           * @retvalue   :None
  239          ******************************************************************************/
  240          void LCD_WriteReg(u8 LCD_Reg, u8 LCD_RegValue)
  241          {
  242   1          LCD_WR_REG(LCD_Reg);
  243   1          LCD_WR_DATA(LCD_RegValue);
  244   1      }
  245          
  246          /*****************************************************************************
  247           * @name       :void LCD_WriteRAM_Prepare(void)
  248           * @date       :2018-08-09 
  249           * @function   :Write GRAM
  250           * @parameters :None
  251           * @retvalue   :None
  252          ******************************************************************************/ 
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 5   

  253          void LCD_WriteRAM_Prepare(void)
  254          {
  255   1        LCD_WR_REG(lcddev.wramcmd);   
  256   1      }
  257          
  258          /*****************************************************************************
  259           * @name       :void LCD_DrawPoint(u16 x,u16 y)
  260           * @date       :2018-08-09 
  261           * @function   :Write a pixel data at a specified location
  262           * @parameters :x:the x coordinate of the pixel
  263                          y:the y coordinate of the pixel
  264           * @retvalue   :None
  265          ******************************************************************************/ 
  266          void LCD_DrawPoint(u16 x,u16 y)
  267          {
  268   1        LCD_SetWindows(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ 
  269   1        LCD_WR_DATA_16Bit(POINT_COLOR);       
  270   1      }    
  271          
  272          /*****************************************************************************
  273           * @name       :void LCDReset(void)
  274           * @date       :2018-08-09 
  275           * @function   :Reset LCD screen
  276           * @parameters :None
  277           * @retvalue   :None
  278          ******************************************************************************/ 
  279          void LCDReset(void)
  280          {
  281   1        LCD_CS=1;
  282   1        delay_ms(50); 
  283   1        LCD_RESET=0;
  284   1        delay_ms(150);
  285   1        LCD_RESET=1;
  286   1        delay_ms(50);
  287   1      }
  288          
  289          /*****************************************************************************
  290           * @name       :void LCD_direction(u8 direction)
  291           * @date       :2018-08-09 
  292           * @function   :Setting the display direction of LCD screen
  293           * @parameters :direction:0-0 degree
  294                                    1-90 degree
  295                                    2-180 degree
  296                                    3-270 degree
  297           * @retvalue   :None
  298          ******************************************************************************/ 
  299          void LCD_direction(u8 direction)
  300          { 
  301   1          lcddev.setxcmd=0x2A;
  302   1          lcddev.setycmd=0x2B;
  303   1          lcddev.wramcmd=0x2C;
  304   1          lcddev.rramcmd=0x2E;
  305   1        switch(direction){
  306   2          case 0:
  307   2            lcddev.width=LCD_W;
  308   2            lcddev.height=LCD_H;
  309   2            LCD_WriteReg(0x36,(1<<3));
  310   2          break;
  311   2          case 1:
  312   2            lcddev.width=LCD_H;
  313   2            lcddev.height=LCD_W;
  314   2            LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
  315   2          break;
  316   2          case 2:
  317   2            lcddev.width=LCD_W;
  318   2            lcddev.height=LCD_H;  
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 6   

  319   2            LCD_WriteReg(0x36,(1<<3)|(1<<4)|(1<<6)|(1<<7));
  320   2          break;
  321   2          case 3:
  322   2            lcddev.width=LCD_H;
  323   2            lcddev.height=LCD_W;
  324   2            LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
  325   2          break;  
  326   2          default:break;
  327   2        }
  328   1      }
  329          
  330          /*****************************************************************************
  331           * @name       :void LCD_Init(void)
  332           * @date       :2018-08-09 
  333           * @function   :Initialization LCD screen
  334           * @parameters :None
  335           * @retvalue   :None
  336          ******************************************************************************/    
  337          void LCD_Init(void)
  338          {
  339   1        LCDReset(); //³õÊ¼»¯Ö®Ç°¸´Î»
  340   1      //  delay_ms(150);                     //¸ù¾Ý²»Í¬¾§ÕñËÙ¶È¿ÉÒÔµ÷ÕûÑÓÊ±£¬±£ÕÏÎÈ¶¨ÏÔÊ¾
  341   1      //*************2.4inch ILI9341³õÊ¼»¯**********//  
  342   1        LCD_WR_REG(0xCF);  
  343   1        LCD_WR_DATA(0x00); 
  344   1        LCD_WR_DATA(0xD9); //0xC1 
  345   1        LCD_WR_DATA(0X30); 
  346   1        LCD_WR_REG(0xED);  
  347   1        LCD_WR_DATA(0x64); 
  348   1        LCD_WR_DATA(0x03); 
  349   1        LCD_WR_DATA(0X12); 
  350   1        LCD_WR_DATA(0X81); 
  351   1        LCD_WR_REG(0xE8);  
  352   1        LCD_WR_DATA(0x85); 
  353   1        LCD_WR_DATA(0x10); 
  354   1        LCD_WR_DATA(0x7A); 
  355   1        LCD_WR_REG(0xCB);  
  356   1        LCD_WR_DATA(0x39); 
  357   1        LCD_WR_DATA(0x2C); 
  358   1        LCD_WR_DATA(0x00); 
  359   1        LCD_WR_DATA(0x34); 
  360   1        LCD_WR_DATA(0x02); 
  361   1        LCD_WR_REG(0xF7);  
  362   1        LCD_WR_DATA(0x20); 
  363   1        LCD_WR_REG(0xEA);  
  364   1        LCD_WR_DATA(0x00); 
  365   1        LCD_WR_DATA(0x00); 
  366   1        LCD_WR_REG(0xC0);    //Power control 
  367   1        LCD_WR_DATA(0x1B);   //VRH[5:0] 
  368   1        LCD_WR_REG(0xC1);    //Power control 
  369   1        LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
  370   1        LCD_WR_REG(0xC5);    //VCM control 
  371   1        LCD_WR_DATA(0x08);   //30
  372   1        LCD_WR_DATA(0x26);   //30
  373   1        LCD_WR_REG(0xC7);    //VCM control2 
  374   1        LCD_WR_DATA(0XB7); 
  375   1        LCD_WR_REG(0x36);    // Memory Access Control 
  376   1        LCD_WR_DATA(0x08);
  377   1        LCD_WR_REG(0x3A);   
  378   1        LCD_WR_DATA(0x55); 
  379   1        LCD_WR_REG(0xB1);   
  380   1        LCD_WR_DATA(0x00);   
  381   1        LCD_WR_DATA(0x1A); 
  382   1        LCD_WR_REG(0xB6);    // Display Function Control 
  383   1        LCD_WR_DATA(0x0A); 
  384   1        LCD_WR_DATA(0xA2); 
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 7   

  385   1        LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
  386   1        LCD_WR_DATA(0x00); 
  387   1        LCD_WR_REG(0x26);    //Gamma curve selected 
  388   1        LCD_WR_DATA(0x01); 
  389   1        LCD_WR_REG(0xE0);    //Set Gamma 
  390   1        LCD_WR_DATA(0x0F); 
  391   1        LCD_WR_DATA(0x1D); 
  392   1        LCD_WR_DATA(0x1A); 
  393   1        LCD_WR_DATA(0x0A); 
  394   1        LCD_WR_DATA(0x0D); 
  395   1        LCD_WR_DATA(0x07); 
  396   1        LCD_WR_DATA(0x49); 
  397   1        LCD_WR_DATA(0X66); 
  398   1        LCD_WR_DATA(0x3B); 
  399   1        LCD_WR_DATA(0x07); 
  400   1        LCD_WR_DATA(0x11); 
  401   1        LCD_WR_DATA(0x01); 
  402   1        LCD_WR_DATA(0x09); 
  403   1        LCD_WR_DATA(0x05); 
  404   1        LCD_WR_DATA(0x04);     
  405   1        LCD_WR_REG(0XE1);    //Set Gamma 
  406   1        LCD_WR_DATA(0x00); 
  407   1        LCD_WR_DATA(0x18); 
  408   1        LCD_WR_DATA(0x1D); 
  409   1        LCD_WR_DATA(0x02); 
  410   1        LCD_WR_DATA(0x0F); 
  411   1        LCD_WR_DATA(0x04); 
  412   1        LCD_WR_DATA(0x36); 
  413   1        LCD_WR_DATA(0x13); 
  414   1        LCD_WR_DATA(0x4C); 
  415   1        LCD_WR_DATA(0x07); 
  416   1        LCD_WR_DATA(0x13); 
  417   1        LCD_WR_DATA(0x0F); 
  418   1        LCD_WR_DATA(0x2E); 
  419   1        LCD_WR_DATA(0x2F); 
  420   1        LCD_WR_DATA(0x05); 
  421   1        LCD_WR_REG(0x2B); 
  422   1        LCD_WR_DATA(0x00);
  423   1        LCD_WR_DATA(0x00);
  424   1        LCD_WR_DATA(0x01);
  425   1        LCD_WR_DATA(0x3f);
  426   1        LCD_WR_REG(0x2A); 
  427   1        LCD_WR_DATA(0x00);
  428   1        LCD_WR_DATA(0x00);
  429   1        LCD_WR_DATA(0x00);
  430   1        LCD_WR_DATA(0xef);   
  431   1        LCD_WR_REG(0x11); //Exit Sleep
  432   1        delay_ms(120);
  433   1        LCD_WR_REG(0x29); //display on  
  434   1      
  435   1        //ÉèÖÃLCDÊôÐÔ²ÎÊý
  436   1        LCD_direction(USE_HORIZONTAL);//ÉèÖÃLCDÏÔÊ¾·½Ïò 
  437   1      }
  438          
  439          void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
  440          { 
  441   1        LCD_WR_REG(lcddev.setxcmd); 
  442   1        LCD_WR_DATA((u8)(xStar>>8));
  443   1        LCD_WR_DATA(0x00FF&xStar);    
  444   1        LCD_WR_DATA((u8)(xEnd>>8));
  445   1        LCD_WR_DATA(0x00FF&xEnd);
  446   1      
  447   1        LCD_WR_REG(lcddev.setycmd); 
  448   1        LCD_WR_DATA((u8)(yStar>>8));
  449   1        LCD_WR_DATA(0x00FF&yStar);    
  450   1        LCD_WR_DATA((u8)(yEnd>>8));
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 8   

  451   1        LCD_WR_DATA(0x00FF&yEnd); 
  452   1      
  453   1        LCD_WriteRAM_Prepare(); //¿ªÊ¼Ð´ÈëGRAM        
  454   1      }
  455          
  456          /*****************************************************************************
  457           * @name       :void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
  458           * @date       :2018-08-09 
  459           * @function   :Display a single English character
  460           * @parameters :x:the beginning x coordinate of the Character display position
  461                          y:the beginning y coordinate of the Character display position
  462                          fc:the color value of display character
  463                          bc:the background color of display character
  464                          num:the ascii code of display character(0~94)
  465                          size:the size of display character
  466                          mode:0-no overlying,1-overlying
  467           * @retvalue   :None
  468          ******************************************************************************/ 
  469          void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
  470          {
  471   1        u8 temp;
  472   1        u8 pos,t;
  473   1        u16 colortemp=POINT_COLOR;
  474   1      
  475   1        num=num-' ';//µÃµ½Æ«ÒÆºóµÄÖµ
  476   1        LCD_SetWindows(x,y,x+size/2-1,y+size-1);//ÉèÖÃµ¥¸öÎÄ×ÖÏÔÊ¾´°¿Ú
  477   1        if(!mode) //·Çµþ¼Ó·½Ê½
  478   1        {
  479   2          for(pos=0;pos<size;pos++)
  480   2          {
  481   3            if(size==12)temp=asc2_1206[num][pos];//µ÷ÓÃ1206×ÖÌå
  482   3            else temp=asc2_1608[num][pos];     //µ÷ÓÃ1608×ÖÌå
  483   3            for(t=0;t<size/2;t++)
  484   3            {
  485   4              if(temp&0x01)LCD_WR_DATA_16Bit(fc); 
  486   4              else LCD_WR_DATA_16Bit(bc); 
  487   4              temp>>=1; 
  488   4            }
  489   3          }
  490   2        }
  491   1        else//µþ¼Ó·½Ê½
  492   1        {
  493   2          for(pos=0;pos<size;pos++)
  494   2          {
  495   3            if(size==12)temp=asc2_1206[num][pos];//µ÷ÓÃ1206×ÖÌå
  496   3            else temp=asc2_1608[num][pos];     //µ÷ÓÃ1608×ÖÌå
  497   3            for(t=0;t<size/2;t++)
  498   3            {
  499   4              POINT_COLOR=fc;
  500   4              if(temp&0x01) LCD_DrawPoint(x+t,y+pos);//»­Ò»¸öµã
  501   4              temp>>=1;
  502   4            }
  503   3          }
  504   2        }
  505   1        POINT_COLOR=colortemp;  
  506   1        LCD_SetWindows(0,0,LCD_W-1,LCD_H-1);//»Ö¸´´°¿ÚÎªÈ«ÆÁ              
  507   1      }
  508          
  509          /*****************************************************************************
  510           * @name       :void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
  511           * @date       :2018-08-09 
  512           * @function   :Display Chinese and English strings
  513           * @parameters :x:the beginning x coordinate of the Chinese and English strings
  514                          y:the beginning y coordinate of the Chinese and English strings
  515                          fc:the color value of Chinese and English strings
  516                          bc:the background color of Chinese and English strings
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 9   

  517                          str:the start address of the Chinese and English strings
  518                          size:the size of Chinese and English strings
  519                          mode:0-no overlying,1-overlying
  520           * @retvalue   :None
  521          ******************************************************************************/          
  522          void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
  523          {         
  524   1        u16 x0=x;                   
  525   1        u8 bHz=0;     //×Ö·û»òÕßÖÐÎÄ 
  526   1        while(*str!=0)//Êý¾ÝÎ´½áÊø
  527   1        { 
  528   2          if(!bHz)
  529   2          {
  530   3            if(x>(LCD_W-size/2)||y>(LCD_H-size)) 
  531   3            return;
  532   3            if(*str>0x80) bHz=1;//ÖÐÎÄ 
  533   3            else              //×Ö·û
  534   3            {
  535   4              if(*str==0x0D)//»»ÐÐ·ûºÅ
  536   4              {
  537   5                y+=size;
  538   5                x=x0;
  539   5                str++;
  540   5              }
  541   4              else
  542   4              {
  543   5                if(size>16)//×Ö¿âÖÐÃ»ÓÐ¼¯³É12X24 16X32µÄÓ¢ÎÄ×ÖÌå,ÓÃ8X16´úÌæ
  544   5                {  
  545   6                  LCD_ShowChar(x,y,fc,bc,*str,16,mode);
  546   6                  x+=8; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë 
  547   6                }
  548   5                else
  549   5                {
  550   6                  LCD_ShowChar(x,y,fc,bc,*str,size,mode);
  551   6                  x+=size/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë 
  552   6                }
  553   5              }
  554   4              str++;
  555   4            }
  556   3          }
  557   2          else//ÖÐÎÄ
  558   2          {
  559   3      //      if(x>(lcddev.width-size)||y>(lcddev.height-size))
  560   3      //      return;
  561   3      //      bHz=0;//ÓÐºº×Ö¿â
  562   3      //      if(size==32)
  563   3      //      GUI_DrawFont32(x,y,fc,bc,str,mode);
  564   3      //      else if(size==24)
  565   3      //      GUI_DrawFont24(x,y,fc,bc,str,mode);
  566   3      //      else
  567   3      //      GUI_DrawFont16(x,y,fc,bc,str,mode);
  568   3      
  569   3            str+=2;
  570   3            x+=size;//ÏÂÒ»¸öºº×ÖÆ«ÒÆ
  571   3          }
  572   2        }
  573   1      }
  574          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4591     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/11/24  21:24:43  PAGE 10  

  xdata size           =      4112     ------
  xdata-const size     =    ------     ------
  edata size           =        13         43
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        54     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
