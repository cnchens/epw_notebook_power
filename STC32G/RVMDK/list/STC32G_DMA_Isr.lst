C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_DMA_Isr
OBJECT MODULE PLACED IN .\list\STC32G_DMA_Isr.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\Driver\isr\STC32G_DMA_Isr.c XSMALL INTR2 BROWSE INCDIR(..\Driver\in
                    -c;..\User;..\App\inc) DEBUG PRINT(.\list\STC32G_DMA_Isr.lst) TABS(2) OBJECT(.\list\STC32G_DMA_Isr.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include "STC32G_DMA.h"
   14          #include "STC32G_SPI.h"
   15          #include "STC32G_LCM.h"
   16          
   17          bit DmaTx1Flag;
   18          bit DmaRx1Flag;
   19          bit DmaTx2Flag;
   20          bit DmaRx2Flag;
   21          bit DmaTx3Flag;
   22          bit DmaRx3Flag;
   23          bit DmaTx4Flag;
   24          bit DmaRx4Flag;
   25          
   26          u16 LCM_Cnt;
   27          bit DmaLcmFlag;
   28          
   29          bit DmaADCFlag = 0;
   30          bit DmaM2MFlag = 0;
   31          bit DmaI2CTFlag=0;
   32          bit DmaI2CRFlag=0;
   33          
   34          bit SpiTxFlag;
   35          bit SpiRxFlag;
   36          
   37          bit u2sFlag;    //UART to SPI
   38          bit s2uFlag;    //SPI to UART
   39          
   40          bit SpiSendFlag;
   41          bit UartSendFlag;
   42          
   43          //========================================================================
   44          // 函数: DMA_ADC_ISR_Handler
   45          // 描述: DMA ADC 中断函数.
   46          // 参数: none.
   47          // 返回: none.
   48          // 版本: V1.0, 2022-03-23
   49          //========================================================================
   50          void DMA_ADC_ISR_Handler (void) interrupt DMA_ADC_VECTOR
   51          {
   52   1        // TODO: 在此处添加用户代码
   53   1        if(DMA_ADC_STA & 0x01)  //AD转换完成
   54   1        {
   55   2          DMA_ADC_STA &= ~0x01; //清标志位
   56   2          DmaADCFlag = 1;
   57   2        }
   58   1      }
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 2   

   59          
   60          //========================================================================
   61          // 函数: DMA_M2M_ISR_Handler
   62          // 描述: DMA M2M 中断函数.
   63          // 参数: none.
   64          // 返回: none.
   65          // 版本: V1.0, 2022-03-23
   66          //========================================================================
   67          void DMA_M2M_ISR_Handler (void) interrupt DMA_M2M_VECTOR
   68          {
   69   1        // TODO: 在此处添加用户代码
   70   1        if(DMA_M2M_STA & 0x01)  //M2M传输完成
   71   1        {
   72   2          DMA_M2M_STA &= ~0x01; //清标志位
   73   2          DmaM2MFlag = 1;
   74   2          if(u2sFlag)
   75   2          {
   76   3            u2sFlag = 0;
   77   3            SpiSendFlag = 1;
   78   3          }
   79   2          if(s2uFlag)
   80   2          {
   81   3            s2uFlag = 0;
   82   3            UartSendFlag = 1;
   83   3          }
   84   2        }
   85   1      }
   86          
   87          //========================================================================
   88          // 函数: DMA_UART1TX_ISR_Handler
   89          // 描述: DMA UART1 TX 中断函数.
   90          // 参数: none.
   91          // 返回: none.
   92          // 版本: V1.0, 2022-03-23
   93          //========================================================================
   94          void DMA_UART1TX_ISR_Handler (void) interrupt DMA_UR1T_VECTOR
   95          {
   96   1        // TODO: 在此处添加用户代码
   97   1        if (DMA_UR1T_STA & 0x01)  //发送完成
   98   1        {
   99   2          DMA_UR1T_STA &= ~0x01;  //清标志位
  100   2          DmaTx1Flag = 1;
  101   2        }
  102   1        if (DMA_UR1T_STA & 0x04)  //数据覆盖
  103   1        {
  104   2          DMA_UR1T_STA &= ~0x04;  //清标志位
  105   2        }
  106   1      }
  107          
  108          //========================================================================
  109          // 函数: DMA_UART1RX_ISR_Handler
  110          // 描述: DMA UART1 RX 中断函数.
  111          // 参数: none.
  112          // 返回: none.
  113          // 版本: V1.0, 2022-03-23
  114          //========================================================================
  115          void DMA_UART1RX_ISR_Handler (void) interrupt DMA_UR1R_VECTOR
  116          {
  117   1        // TODO: 在此处添加用户代码
  118   1        if (DMA_UR1R_STA & 0x01)  //接收完成
  119   1        {
  120   2          DMA_UR1R_STA &= ~0x01;  //清标志位
  121   2          DmaRx1Flag = 1;
  122   2      
  123   2      //    DMA_UR1T_TRIG();  //重新触发UART1发送功能
  124   2      //    DMA_UR1R_TRIG();  //重新触发UART1接收功能
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 3   

  125   2        }
  126   1        if (DMA_UR1R_STA & 0x02)  //数据丢弃
  127   1        {
  128   2          DMA_UR1R_STA &= ~0x02;  //清标志位
  129   2        }
  130   1      }
  131          
  132          //========================================================================
  133          // 函数: DMA_UART2TX_ISR_Handler
  134          // 描述: DMA UART2 TX 中断函数.
  135          // 参数: none.
  136          // 返回: none.
  137          // 版本: V1.0, 2022-03-23
  138          //========================================================================
  139          void DMA_UART2TX_ISR_Handler (void) interrupt DMA_UR2T_VECTOR
  140          {
  141   1        // TODO: 在此处添加用户代码
  142   1        if (DMA_UR2T_STA & 0x01)  //发送完成
  143   1        {
  144   2          DMA_UR2T_STA &= ~0x01;  //清标志位
  145   2          DmaTx2Flag = 1;
  146   2        }
  147   1        if (DMA_UR2T_STA & 0x04)  //数据覆盖
  148   1        {
  149   2          DMA_UR2T_STA &= ~0x04;  //清标志位
  150   2        }
  151   1      }
  152          
  153          //========================================================================
  154          // 函数: DMA_UART2RX_ISR_Handler
  155          // 描述: DMA UART2 RX 中断函数.
  156          // 参数: none.
  157          // 返回: none.
  158          // 版本: V1.0, 2022-03-23
  159          //========================================================================
  160          void DMA_UART2RX_ISR_Handler (void) interrupt DMA_UR2R_VECTOR
  161          {
  162   1        // TODO: 在此处添加用户代码
  163   1        if (DMA_UR2R_STA & 0x01)  //接收完成
  164   1        {
  165   2          DMA_UR2R_STA &= ~0x01;  //清标志位
  166   2          DmaRx2Flag = 1;
  167   2      
  168   2      //    DMA_UR2T_TRIG();  //重新触发UART2发送功能
  169   2      //    DMA_UR2R_TRIG();  //重新触发UART2接收功能
  170   2        }
  171   1        if (DMA_UR2R_STA & 0x02)  //数据丢弃
  172   1        {
  173   2          DMA_UR2R_STA &= ~0x02;  //清标志位
  174   2        }
  175   1      }
  176          
  177          //========================================================================
  178          // 函数: DMA_UART3TX_ISR_Handler
  179          // 描述: DMA UART3 TX 中断函数.
  180          // 参数: none.
  181          // 返回: none.
  182          // 版本: V1.0, 2022-03-23
  183          //========================================================================
  184          void DMA_UART3TX_ISR_Handler (void) interrupt DMA_UR3T_VECTOR
  185          {
  186   1        // TODO: 在此处添加用户代码
  187   1        if (DMA_UR3T_STA & 0x01)  //发送完成
  188   1        {
  189   2          DMA_UR3T_STA &= ~0x01;  //清标志位
  190   2          DmaTx3Flag = 1;
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 4   

  191   2        }
  192   1        if (DMA_UR3T_STA & 0x04)  //数据覆盖
  193   1        {
  194   2          DMA_UR3T_STA &= ~0x04;  //清标志位
  195   2        }
  196   1      }
  197          
  198          //========================================================================
  199          // 函数: DMA_UART3RX_ISR_Handler
  200          // 描述: DMA UART3 RX 中断函数.
  201          // 参数: none.
  202          // 返回: none.
  203          // 版本: V1.0, 2022-03-23
  204          //========================================================================
  205          void DMA_UART3RX_ISR_Handler (void) interrupt DMA_UR3R_VECTOR
  206          {
  207   1        // TODO: 在此处添加用户代码
  208   1        if (DMA_UR3R_STA & 0x01)  //接收完成
  209   1        {
  210   2          DMA_UR3R_STA &= ~0x01;  //清标志位
  211   2          DmaRx3Flag = 1;
  212   2      
  213   2      //    DMA_UR3T_TRIG();  //重新触发UART3发送功能
  214   2      //    DMA_UR3R_TRIG();  //重新触发UART3接收功能
  215   2        }
  216   1        if (DMA_UR3R_STA & 0x02)  //数据丢弃
  217   1        {
  218   2          DMA_UR3R_STA &= ~0x02;  //清标志位
  219   2        }
  220   1      }
  221          
  222          //========================================================================
  223          // 函数: DMA_UART4TX_ISR_Handler
  224          // 描述: DMA UART4 TX 中断函数.
  225          // 参数: none.
  226          // 返回: none.
  227          // 版本: V1.0, 2022-03-23
  228          //========================================================================
  229          void DMA_UART4TX_ISR_Handler (void) interrupt DMA_UR4T_VECTOR
  230          {
  231   1        // TODO: 在此处添加用户代码
  232   1        if (DMA_UR4T_STA & 0x01)  //发送完成
  233   1        {
  234   2          DMA_UR4T_STA &= ~0x01;  //清标志位
  235   2          DmaTx4Flag = 1;
  236   2        }
  237   1        if (DMA_UR4T_STA & 0x04)  //数据覆盖
  238   1        {
  239   2          DMA_UR4T_STA &= ~0x04;  //清标志位
  240   2        }
  241   1      }
  242          
  243          //========================================================================
  244          // 函数: DMA_UART4RX_ISR_Handler
  245          // 描述: DMA UART4 RX 中断函数.
  246          // 参数: none.
  247          // 返回: none.
  248          // 版本: V1.0, 2022-03-23
  249          //========================================================================
  250          void DMA_UART4RX_ISR_Handler (void) interrupt DMA_UR4R_VECTOR
  251          {
  252   1        // TODO: 在此处添加用户代码
  253   1        if (DMA_UR4R_STA & 0x01)  //接收完成
  254   1        {
  255   2          DMA_UR4R_STA &= ~0x01;  //清标志位
  256   2          DmaRx4Flag = 1;
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 5   

  257   2      
  258   2      //    DMA_UR4T_TRIG();  //重新触发UART4发送功能
  259   2      //    DMA_UR4R_TRIG();  //重新触发UART4接收功能
  260   2        }
  261   1        if (DMA_UR4R_STA & 0x02)  //数据丢弃
  262   1        {
  263   2          DMA_UR4R_STA &= ~0x02;  //清标志位
  264   2        }
  265   1      }
  266          
  267          //========================================================================
  268          // 函数: DMA_SPI_ISR_Handler
  269          // 描述: DMA SPI 中断函数.
  270          // 参数: none.
  271          // 返回: none.
  272          // 版本: V1.0, 2022-03-23
  273          //========================================================================
  274          void DMA_SPI_ISR_Handler (void) interrupt DMA_SPI_VECTOR
  275          {
  276   1        // TODO: 在此处添加用户代码
  277   1        if(DMA_SPI_STA & 0x01)  //通信完成
  278   1        {
  279   2          DMA_SPI_STA &= ~0x01; //清标志位
  280   2          if(MSTR) 
  281   2          { //主机模式
  282   3            SpiTxFlag = 1;
  283   3            SPI_SS_2 = 1;
  284   3          }
  285   2          else 
  286   2          { //从机模式
  287   3            SpiRxFlag = 1;
  288   3          }
  289   2        }
  290   1        if(DMA_SPI_STA & 0x02)  //数据丢弃
  291   1        {
  292   2          DMA_SPI_STA &= ~0x02; //清标志位
  293   2        }
  294   1        if(DMA_SPI_STA & 0x04)  //数据覆盖
  295   1        {
  296   2          DMA_SPI_STA &= ~0x04; //清标志位
  297   2        }
  298   1      }
  299          
  300          //========================================================================
  301          // 函数: DMA_I2C_ISR_Handler
  302          // 描述: DMA I2C 发送中断函数.
  303          // 参数: none.
  304          // 返回: none.
  305          // 版本: V1.0, 2022-03-25
  306          //========================================================================
  307          void DMA_I2CT_ISR_Handler (void) interrupt DMA_I2CT_VECTOR
  308          {
  309   1        // TODO: 在此处添加用户代码
  310   1        if(DMA_I2CT_STA & 0x01)   //发送完成
  311   1        {
  312   2          DMA_I2CT_STA &= ~0x01;  //清除标志位
  313   2          DmaI2CTFlag = 0;
  314   2        }
  315   1        if(DMA_I2CT_STA & 0x04)   //数据覆盖
  316   1        {
  317   2          DMA_I2CT_STA &= ~0x04;  //清除标志位
  318   2        }
  319   1      }
  320          
  321          //========================================================================
  322          // 函数: DMA_I2CR_ISR_Handler
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 6   

  323          // 描述: DMA I2C 接收中断函数.
  324          // 参数: none.
  325          // 返回: none.
  326          // 版本: V1.0, 2022-03-25
  327          //========================================================================
  328          void DMA_I2CR_ISR_Handler (void) interrupt DMA_I2CR_VECTOR
  329          {
  330   1        // TODO: 在此处添加用户代码
  331   1        if(DMA_I2CR_STA & 0x01)   //接收完成
  332   1        {
  333   2          DMA_I2CR_STA &= ~0x01;  //清除标志位
  334   2          DmaI2CRFlag = 0;
  335   2        }
  336   1        if(DMA_I2CR_STA & 0x02)   //数据丢弃
  337   1        {
  338   2          DMA_I2CR_STA &= ~0x02;  //清除标志位
  339   2        }
  340   1      }
  341          
  342          //========================================================================
  343          // 函数: DMA_LCM_ISR_Handler
  344          // 描述: DMA LCM 中断函数.
  345          // 参数: none.
  346          // 返回: none.
  347          // 版本: V1.0, 2022-03-23
  348          //========================================================================
  349          void DMA_LCM_ISR_Handler (void) interrupt DMA_LCM_VECTOR
  350          {
  351   1        // TODO: 在此处添加用户代码
  352   1        if(DMA_LCM_STA & 0x01)
  353   1        {
  354   2          if(DmaLcmFlag)
  355   2          {
  356   3            DmaLcmFlag = 0;
  357   3            DMA_LCM_CR = 0;
  358   3          }
  359   2          else
  360   2          {
  361   3            LCM_Cnt--;
  362   3            if(LCM_Cnt == 0)
  363   3            {
  364   4              DMA_LCM_CR = 0;
  365   4              LCD_CS=1;
  366   4            }
  367   3            else
  368   3            {
  369   4              DMA_LCM_CR = 0xa0;  //Write dat
  370   4            }
  371   3          }
  372   2          DMA_LCM_STA = 0;    //清标志位
  373   2        }
  374   1      }
  375          
  376          //========================================================================
  377          // 函数: DMA_ISR_Handler
  378          // 描述: DMA中断函数.
  379          // 参数: none.
  380          // 返回: none.
  381          // 版本: V1.0, 2021-05-25
  382          //========================================================================
  383          void DMA_ISR_Handler (void) interrupt 13
  384          {
  385   1        // TODO: 在此处添加用户代码
  386   1        
  387   1        //----------- DMA ADC --------------
  388   1        if(DMA_ADC_STA & 0x01)  //AD转换完成
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 7   

  389   1        {
  390   2          DMA_ADC_STA &= ~0x01; //清标志位
  391   2          DmaADCFlag = 1;
  392   2        }
  393   1      
  394   1        //----------- DMA M2M --------------
  395   1        if(DMA_M2M_STA & 0x01)  //M2M传输完成
  396   1        {
  397   2          DMA_M2M_STA &= ~0x01; //清标志位
  398   2          DmaM2MFlag = 1;
  399   2          if(u2sFlag)
  400   2          {
  401   3            u2sFlag = 0;
  402   3            SpiSendFlag = 1;
  403   3          }
  404   2          if(s2uFlag)
  405   2          {
  406   3            s2uFlag = 0;
  407   3            UartSendFlag = 1;
  408   3          }
  409   2        }
  410   1      
  411   1        //---------- DMA UART1 -------------
  412   1        if (DMA_UR1T_STA & 0x01)  //发送完成
  413   1        {
  414   2          DMA_UR1T_STA &= ~0x01;  //清标志位
  415   2          DmaTx1Flag = 1;
  416   2        }
  417   1        if (DMA_UR1T_STA & 0x04)  //数据覆盖
  418   1        {
  419   2          DMA_UR1T_STA &= ~0x04;  //清标志位
  420   2        }
  421   1        
  422   1        if (DMA_UR1R_STA & 0x01)  //接收完成
  423   1        {
  424   2          DMA_UR1R_STA &= ~0x01;  //清标志位
  425   2          DmaRx1Flag = 1;
  426   2        }
  427   1        if (DMA_UR1R_STA & 0x02)  //数据丢弃
  428   1        {
  429   2          DMA_UR1R_STA &= ~0x02;  //清标志位
  430   2        }
  431   1        //---------- DMA UART2 -------------
  432   1        if (DMA_UR2T_STA & 0x01)  //发送完成
  433   1        {
  434   2          DMA_UR2T_STA &= ~0x01;  //清标志位
  435   2          DmaTx2Flag = 1;
  436   2        }
  437   1        if (DMA_UR2T_STA & 0x04)  //数据覆盖
  438   1        {
  439   2          DMA_UR2T_STA &= ~0x04;  //清标志位
  440   2        }
  441   1        
  442   1        if (DMA_UR2R_STA & 0x01)  //接收完成
  443   1        {
  444   2          DMA_UR2R_STA &= ~0x01;  //清标志位
  445   2          DmaRx2Flag = 1;
  446   2        }
  447   1        if (DMA_UR2R_STA & 0x02)  //数据丢弃
  448   1        {
  449   2          DMA_UR2R_STA &= ~0x02;  //清标志位
  450   2        }
  451   1        //---------- DMA UART3 -------------
  452   1        if (DMA_UR3T_STA & 0x01)  //发送完成
  453   1        {
  454   2          DMA_UR3T_STA &= ~0x01;  //清标志位
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 8   

  455   2          DmaTx3Flag = 1;
  456   2        }
  457   1        if (DMA_UR3T_STA & 0x04)  //数据覆盖
  458   1        {
  459   2          DMA_UR3T_STA &= ~0x04;  //清标志位
  460   2        }
  461   1        
  462   1        if (DMA_UR3R_STA & 0x01)  //接收完成
  463   1        {
  464   2          DMA_UR3R_STA &= ~0x01;  //清标志位
  465   2          DmaRx3Flag = 1;
  466   2        }
  467   1        if (DMA_UR3R_STA & 0x02)  //数据丢弃
  468   1        {
  469   2          DMA_UR3R_STA &= ~0x02;  //清标志位
  470   2        }
  471   1        //---------- DMA UART4 -------------
  472   1        if (DMA_UR4T_STA & 0x01)  //发送完成
  473   1        {
  474   2          DMA_UR4T_STA &= ~0x01;  //清标志位
  475   2          DmaTx4Flag = 1;
  476   2        }
  477   1        if (DMA_UR4T_STA & 0x04)  //数据覆盖
  478   1        {
  479   2          DMA_UR4T_STA &= ~0x04;  //清标志位
  480   2        }
  481   1        
  482   1        if (DMA_UR4R_STA & 0x01)  //接收完成
  483   1        {
  484   2          DMA_UR4R_STA &= ~0x01;  //清标志位
  485   2          DmaRx4Flag = 1;
  486   2        }
  487   1        if (DMA_UR4R_STA & 0x02)  //数据丢弃
  488   1        {
  489   2          DMA_UR4R_STA &= ~0x02;  //清标志位
  490   2        }
  491   1      
  492   1        //---------- DMA SPI -------------
  493   1        if(DMA_SPI_STA & 0x01)  //通信完成
  494   1        {
  495   2          DMA_SPI_STA &= ~0x01; //清标志位
  496   2          if(MSTR) 
  497   2          { //主机模式
  498   3            SpiTxFlag = 1;
  499   3            SPI_SS_2 = 1;
  500   3          }
  501   2          else 
  502   2          { //从机模式
  503   3            SpiRxFlag = 1;
  504   3          }
  505   2        }
  506   1        if(DMA_SPI_STA & 0x02)  //数据丢弃
  507   1        {
  508   2          DMA_SPI_STA &= ~0x02; //清标志位
  509   2        }
  510   1        if(DMA_SPI_STA & 0x04)  //数据覆盖
  511   1        {
  512   2          DMA_SPI_STA &= ~0x04; //清标志位
  513   2        }
  514   1      
  515   1        //------------- LCM --------------
  516   1        if(LCMIFSTA & 0x01)
  517   1        {
  518   2          LCMIFSTA = 0x00;
  519   2          LcmFlag = 0;
  520   2        }
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     26/11/24  22:56:17  PAGE 9   

  521   1        
  522   1        //---------- DMA LCM -------------
  523   1        if(DMA_LCM_STA & 0x01)
  524   1        {
  525   2          if(DmaLcmFlag)
  526   2          {
  527   3            DmaLcmFlag = 0;
  528   3            DMA_LCM_CR = 0;
  529   3          }
  530   2          else
  531   2          {
  532   3            LCM_Cnt--;
  533   3            if(LCM_Cnt == 0)
  534   3            {
  535   4              DMA_LCM_CR = 0;
  536   4              LCD_CS=1;
  537   4            }
  538   3            else
  539   3            {
  540   4              DMA_LCM_CR = 0xa0;  //Write dat
  541   4            }
  542   3          }
  543   2          DMA_LCM_STA = 0;    //清标志位
  544   2        }
  545   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1346     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         2     ------
  bit size             =        19     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
