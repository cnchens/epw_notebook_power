C251 COMPILER V5.60.0,  APP_DMA_M2M                                                        26/11/24  22:56:05  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE APP_DMA_M2M
OBJECT MODULE PLACED IN .\list\APP_DMA_M2M.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\App\src\APP_DMA_M2M.c XSMALL INTR2 BROWSE INCDIR(..\Driver\inc;..\U
                    -ser;..\App\inc) DEBUG PRINT(.\list\APP_DMA_M2M.lst) TABS(2) OBJECT(.\list\APP_DMA_M2M.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include  "APP_DMA_M2M.h"
   14          #include  "STC32G_GPIO.h"
   15          #include  "STC32G_UART.h"
   16          #include  "STC32G_DMA.h"
   17          #include  "STC32G_NVIC.h"
   18          
   19          
   20          /*************  功能说明  **************
   21          
   22          本程序演示DMA Memory to Memory数据转移.
   23          
   24          设置2个存储器空间，一个发送一个接收，分别初始化2个存储器空间内容.
   25          
   26          设置M2M DMA，上电后自动将发送存储里的内容写入到接收存储器空间.
   27          
   28          根据不同的读取顺序、写入顺序，接收到不同的数据结果.
   29          
   30          通过串口2(P4.6 P4.7)打印接收存储器数据(上电打印一次).
   31          
   32          用定时器做波特率发生器，建议使用1T模式(除非低波特率用12T)，并选择可被波特率整除的时钟频率，以提高精度.
   33          
   34          下载时, 选择时钟 24MHz (可以在配置文件"config.h"中修改).
   35          
   36          ******************************************/
   37          
   38          
   39          //========================================================================
   40          //                               本地常量声明 
   41          //========================================================================
   42          
   43          
   44          //========================================================================
   45          //                               本地变量声明
   46          //========================================================================
   47          
   48          u8 xdata DmaTxBuffer[256];
   49          u8 xdata DmaRxBuffer[256];
   50          
   51          //========================================================================
   52          //                               本地函数声明
   53          //========================================================================
   54          
   55          
   56          //========================================================================
   57          //                            外部函数和变量声明
   58          //========================================================================
C251 COMPILER V5.60.0,  APP_DMA_M2M                                                        26/11/24  22:56:05  PAGE 2   

   59          
   60          
   61          //========================================================================
   62          // 函数: DMA_M2M_init
   63          // 描述: 用户初始化程序.
   64          // 参数: None.
   65          // 返回: None.
   66          // 版本: V1.0, 2020-09-28
   67          //========================================================================
   68          void DMA_M2M_init(void)
   69          {
   70   1        u16 i;
   71   1        COMx_InitDefine   COMx_InitStructure;   //结构定义
   72   1        DMA_M2M_InitTypeDef   DMA_M2M_InitStructure;    //结构定义
   73   1      
   74   1        //----------------------------------------------
   75   1        P4_MODE_IO_PU(GPIO_Pin_6 | GPIO_Pin_7);   //P4.6,P4.7 设置为准双向口
   76   1        
   77   1        //----------------------------------------------
   78   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,
             -UART_9bit_BRTx
   79   1      //  COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //选择波特率发生器, BRT_Timer2 (注意: 串口2固定使用B
             -RT_Timer2, 所以不用选择)
   80   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率,     110 ~ 115200
   81   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE 或 DISABLE
   82   1        UART_Configuration(UART2, &COMx_InitStructure);   //初始化串口2 UART1,UART2,UART3,UART4
   83   1        NVIC_UART2_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
   84   1        printf("STC32G Memory to Memory DMA Test Programme!\r\n");  //UART发送一个字符串
   85   1      
   86   1        //----------------------------------------------
   87   1        DMA_M2M_InitStructure.DMA_Enable = ENABLE;      //DMA使能   ENABLE,DISABLE
   88   1        DMA_M2M_InitStructure.DMA_Length = 127;         //DMA传输总字节数   (0~255) + 1
   89   1      
   90   1      //  DMA_M2M_InitStructure.DMA_Tx_Buffer = (u16)DmaTxBuffer; //发送数据存储地址
   91   1      //  DMA_M2M_InitStructure.DMA_Rx_Buffer = (u16)DmaRxBuffer; //接收数据存储地址
   92   1      //  DMA_M2M_InitStructure.DMA_SRC_Dir = M2M_ADDR_INC;   //数据源地址改变方向    M2M_ADDR_INC,M2M_ADDR_DEC
   93   1      //  DMA_M2M_InitStructure.DMA_DEST_Dir = M2M_ADDR_INC;  //数据目标地址改变方向  M2M_ADDR_INC,M2M_ADDR_DEC
   94   1      
   95   1      //  DMA_M2M_InitStructure.DMA_Tx_Buffer = (u16)&DmaTxBuffer[255]; //发送数据存储地址
   96   1      //  DMA_M2M_InitStructure.DMA_Rx_Buffer = (u16)DmaRxBuffer; //接收数据存储地址
   97   1      //  DMA_M2M_InitStructure.DMA_SRC_Dir = M2M_ADDR_DEC;   //数据源地址改变方向    M2M_ADDR_INC,M2M_ADDR_DEC
   98   1      //  DMA_M2M_InitStructure.DMA_DEST_Dir = M2M_ADDR_INC;  //数据目标地址改变方向  M2M_ADDR_INC,M2M_ADDR_DEC
   99   1      
  100   1      //  DMA_M2M_InitStructure.DMA_Tx_Buffer = (u16)DmaTxBuffer; //发送数据存储地址
  101   1      //  DMA_M2M_InitStructure.DMA_Rx_Buffer = (u16)&DmaRxBuffer[255]; //接收数据存储地址
  102   1      //  DMA_M2M_InitStructure.DMA_SRC_Dir = M2M_ADDR_INC;   //数据源地址改变方向    M2M_ADDR_INC,M2M_ADDR_DEC
  103   1      //  DMA_M2M_InitStructure.DMA_DEST_Dir = M2M_ADDR_DEC;  //数据目标地址改变方向  M2M_ADDR_INC,M2M_ADDR_DEC
  104   1      
  105   1        DMA_M2M_InitStructure.DMA_Tx_Buffer = (u16)&DmaTxBuffer[255]; //发送数据存储地址
  106   1        DMA_M2M_InitStructure.DMA_Rx_Buffer = (u16)&DmaRxBuffer[255]; //接收数据存储地址
  107   1        DMA_M2M_InitStructure.DMA_SRC_Dir = M2M_ADDR_DEC;   //数据源地址改变方向    M2M_ADDR_INC,M2M_ADDR_DEC
  108   1        DMA_M2M_InitStructure.DMA_DEST_Dir = M2M_ADDR_DEC;  //数据目标地址改变方向  M2M_ADDR_INC,M2M_ADDR_DEC
  109   1      
  110   1        DMA_M2M_Inilize(&DMA_M2M_InitStructure);    //初始化
  111   1        NVIC_DMA_M2M_Init(ENABLE,Priority_0,Priority_0);    //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0~
             -Priority_3; 总线优先级(低到高) Priority_0~Priority_3
  112   1      
  113   1        for(i=0; i<256; i++)
  114   1        {
  115   2          DmaTxBuffer[i] = i;
  116   2          DmaRxBuffer[i] = 0;
  117   2        }
  118   1        DMA_M2M_TRIG();   //触发启动转换
  119   1      }
  120          
C251 COMPILER V5.60.0,  APP_DMA_M2M                                                        26/11/24  22:56:05  PAGE 3   

  121          //========================================================================
  122          // 函数: Sample_DMA_M2M
  123          // 描述: 用户应用程序.
  124          // 参数: None.
  125          // 返回: None.
  126          // 版本: V1.0, 2020-09-24
  127          //========================================================================
  128          void Sample_DMA_M2M(void)
  129          {
  130   1        u16 i;
  131   1      
  132   1        if(DmaM2MFlag)
  133   1        {
  134   2          DmaM2MFlag = 0;
  135   2      
  136   2          for(i=0; i<256; i++)
  137   2          {
  138   3            printf("%02X ", DmaRxBuffer[i]);
  139   3            if((i & 0x0f) == 0x0f)
  140   3              printf("\r\n");
  141   3          }
  142   2        }
  143   1      }
  144          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       241     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       512     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         18
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        55     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
