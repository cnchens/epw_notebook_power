C251 COMPILER V5.60.0,  APP_DMA_I2C                                                        26/11/24  22:56:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE APP_DMA_I2C
OBJECT MODULE PLACED IN .\list\APP_DMA_I2C.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\App\src\APP_DMA_I2C.c XSMALL INTR2 BROWSE INCDIR(..\Driver\inc;..\U
                    -ser;..\App\inc) DEBUG PRINT(.\list\APP_DMA_I2C.lst) TABS(2) OBJECT(.\list\APP_DMA_I2C.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* Èç¹ûÒªÔÚ³ÌĞòÖĞÊ¹ÓÃ´Ë´úÂë,ÇëÔÚ³ÌĞòÖĞ×¢Ã÷Ê¹ÓÃÁËSTCµÄ×ÊÁÏ¼°³ÌĞò            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include  "APP_DMA_I2C.h"
   14          #include  "STC32G_I2C.h"
   15          #include  "STC32G_GPIO.h"
   16          #include  "STC32G_UART.h"
   17          #include  "STC32G_DMA.h"
   18          #include  "STC32G_NVIC.h"
   19          #include  "STC32G_Delay.h"
   20          #include  "STC32G_Switch.h"
   21          
   22          /*************  ±¾³ÌĞò¹¦ÄÜËµÃ÷  **************
   23          
   24          Í¨¹ı´®¿Ú2(P4.6 P4.7)·¢Ö¸ÁîÍ¨¹ıI2C DMA¶ÁĞ´AT24C02Êı¾İ.
   25          
   26          Ä¬ÈÏ²¨ÌØÂÊ:  115200,N,8,1. 
   27          
   28          ´®¿ÚÃüÁîÉèÖÃ: (ÃüÁî×ÖÄ¸²»Çø·Ö´óĞ¡Ğ´)
   29              W 0x12 1234567890 --> Ğ´Èë²Ù×÷  Ê®Áù½øÖÆµØÖ·  Ğ´ÈëÄÚÈİ.
   30              R 0x12 10         --> ¶Á³ö²Ù×÷  Ê®Áù½øÖÆµØÖ·  ¶Á³ö×Ö½ÚÊı.
   31          
   32          ÏÂÔØÊ±, Ñ¡ÔñÊ±ÖÓ 24MHz (¿ÉÒÔÔÚÅäÖÃÎÄ¼ş"config.h"ÖĞĞŞ¸Ä).
   33          
   34          ******************************************/
   35          
   36          
   37          //========================================================================
   38          //                               ±¾µØ³£Á¿ÉùÃ÷ 
   39          //========================================================================
   40          
   41          #define SLAW    0xA0
   42          #define SLAR    0xA1
   43          
   44          #define EE_BUF_LENGTH       255          //
   45          
   46          //========================================================================
   47          //                               ±¾µØ±äÁ¿ÉùÃ÷
   48          //========================================================================
   49          
   50          u8 EEPROM_addr;
   51          u8 xdata I2cTxBuffer[EE_BUF_LENGTH+1];
   52          u8 xdata I2cRxBuffer[EE_BUF_LENGTH+1];
   53          
   54          //========================================================================
   55          //                               ±¾µØº¯ÊıÉùÃ÷
   56          //========================================================================
   57          
   58          void WriteNbyte(u8 addr, u8 number);
C251 COMPILER V5.60.0,  APP_DMA_I2C                                                        26/11/24  22:56:06  PAGE 2   

   59          void ReadNbyte( u8 addr, u8 number);
   60          
   61          //========================================================================
   62          //                            Íâ²¿º¯ÊıºÍ±äÁ¿ÉùÃ÷
   63          //========================================================================
   64          
   65          
   66          //========================================================================
   67          // º¯Êı: DMA_I2C_init
   68          // ÃèÊö: ÓÃ»§³õÊ¼»¯³ÌĞò.
   69          // ²ÎÊı: None.
   70          // ·µ»Ø: None.
   71          // °æ±¾: V1.0, 2020-09-28
   72          //========================================================================
   73          void DMA_I2C_init(void)
   74          {
   75   1        I2C_InitTypeDef   I2C_InitStructure;
   76   1        COMx_InitDefine   COMx_InitStructure;   //½á¹¹¶¨Òå
   77   1        DMA_I2C_InitTypeDef   DMA_I2C_InitStructure;    //½á¹¹¶¨Òå
   78   1      
   79   1        I2C_SW(I2C_P24_P25);          //I2C_P14_P15,I2C_P24_P25,I2C_P76_P77,I2C_P33_P32
   80   1        P2_MODE_IO_PU(GPIO_Pin_4 | GPIO_Pin_5);   //P2.4,P2.5 ÉèÖÃÎª×¼Ë«Ïò¿Ú
   81   1        P4_MODE_IO_PU(GPIO_Pin_6 | GPIO_Pin_7);   //P4.6,P4.7 ÉèÖÃÎª×¼Ë«Ïò¿Ú
   82   1        
   83   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //Ä£Ê½,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,
             -UART_9bit_BRTx
   84   1      //  COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //Ñ¡Ôñ²¨ÌØÂÊ·¢ÉúÆ÷, BRT_Timer2 (×¢Òâ: ´®¿Ú2¹Ì¶¨Ê¹ÓÃB
             -RT_Timer2, ËùÒÔ²»ÓÃÑ¡Ôñ)
   85   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //²¨ÌØÂÊ,     110 ~ 115200
   86   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //½ÓÊÕÔÊĞí,   ENABLE »ò DISABLE
   87   1        UART_Configuration(UART2, &COMx_InitStructure);   //³õÊ¼»¯´®¿Ú2 UART1,UART2,UART3,UART4
   88   1        NVIC_UART2_Init(ENABLE,Priority_1);   //ÖĞ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
   89   1      
   90   1        I2C_InitStructure.I2C_Mode      = I2C_Mode_Master;  //Ö÷´ÓÑ¡Ôñ   I2C_Mode_Master, I2C_Mode_Slave
   91   1        I2C_InitStructure.I2C_Enable    = ENABLE;           //I2C¹¦ÄÜÊ¹ÄÜ,   ENABLE, DISABLE
   92   1        I2C_InitStructure.I2C_MS_WDTA   = DISABLE;          //Ö÷»úÊ¹ÄÜ×Ô¶¯·¢ËÍ,  ENABLE, DISABLE
   93   1        I2C_InitStructure.I2C_Speed     = 63;               //×ÜÏßËÙ¶È=Fosc/2/(Speed*2+4),      0~63
   94   1        I2C_Init(&I2C_InitStructure);
   95   1        NVIC_I2C_Init(I2C_Mode_Master,DISABLE,Priority_0);    //Ö÷´ÓÄ£Ê½, I2C_Mode_Master, I2C_Mode_Slave; ÖĞ¶ÏÊ¹Ä
             -Ü, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Priority_2,Priority_3
   96   1      
   97   1        DMA_I2C_InitStructure.DMA_TX_Length = EE_BUF_LENGTH;  //DMA´«Êä×Ü×Ö½ÚÊı   (0~65535) + 1
   98   1        DMA_I2C_InitStructure.DMA_TX_Buffer = (u16)I2cTxBuffer; //·¢ËÍÊı¾İ´æ´¢µØÖ·
   99   1        DMA_I2C_InitStructure.DMA_RX_Length = EE_BUF_LENGTH;  //DMA´«Êä×Ü×Ö½ÚÊı   (0~65535) + 1
  100   1        DMA_I2C_InitStructure.DMA_RX_Buffer = (u16)I2cRxBuffer; //½ÓÊÕÊı¾İ´æ´¢µØÖ·
  101   1        DMA_I2C_InitStructure.DMA_TX_Enable = ENABLE;   //DMAÊ¹ÄÜ   ENABLE,DISABLE
  102   1        DMA_I2C_InitStructure.DMA_RX_Enable = ENABLE;   //DMAÊ¹ÄÜ   ENABLE,DISABLE
  103   1        DMA_I2C_Inilize(&DMA_I2C_InitStructure);  //³õÊ¼»¯
  104   1      
  105   1        NVIC_DMA_I2CT_Init(ENABLE,Priority_0,Priority_0);   //ÖĞ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0
             -~Priority_3; ×ÜÏßÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0~Priority_3
  106   1        NVIC_DMA_I2CR_Init(ENABLE,Priority_0,Priority_0);   //ÖĞ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0
             -~Priority_3; ×ÜÏßÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0~Priority_3
  107   1        DMA_I2CR_CLRFIFO();   //Çå¿Õ DMA FIFO
  108   1      
  109   1        printf("ÃüÁîÉèÖÃ:\r\n");
  110   1        printf("W 0x12 1234567890 --> Ğ´Èë²Ù×÷  Ê®Áù½øÖÆµØÖ·  Ğ´ÈëÄÚÈİ\r\n");
  111   1        printf("R 0x12 10         --> ¶Á³ö²Ù×÷  Ê®Áù½øÖÆµØÖ·  ¶Á³ö×Ö½ÚÄÚÈİ\r\n");
  112   1      }
  113          
  114          //========================================================================
  115          // º¯Êı: I2cCheckData
  116          // ÃèÊö: Êı¾İĞ£Ñéº¯Êı.
  117          // ²ÎÊı: None.
  118          // ·µ»Ø: None.
C251 COMPILER V5.60.0,  APP_DMA_I2C                                                        26/11/24  22:56:06  PAGE 3   

  119          // °æ±¾: V1.0, 2020-09-28
  120          //========================================================================
  121          static u8 I2cCheckData(u8 dat)
  122          {
  123   1        if((dat >= '0') && (dat <= '9'))    return (dat-'0');
  124   1        if((dat >= 'A') && (dat <= 'F'))    return (dat-'A'+10);
  125   1        if((dat >= 'a') && (dat <= 'f'))    return (dat-'a'+10);
  126   1        return 0xff;
  127   1      }
  128          
  129          //========================================================================
  130          // º¯Êı: I2cGetAddress
  131          // ÃèÊö: ¼ÆËã¸÷ÖÖÊäÈë·½Ê½µÄµØÖ·.
  132          // ²ÎÊı: ÎŞ.
  133          // ·µ»Ø: 8Î»EEPROMµØÖ·.
  134          // °æ±¾: V1.0, 2013-6-6
  135          //========================================================================
  136          static u8 I2cGetAddress(void)
  137          {
  138   1          u8 address;
  139   1          u8  i,j;
  140   1          
  141   1          address = 0;
  142   1          if((RX2_Buffer[2] == '0') && (RX2_Buffer[3] == 'X'))
  143   1          {
  144   2              for(i=4; i<6; i++)
  145   2              {
  146   3                  j = I2cCheckData(RX2_Buffer[i]);
  147   3                  if(j >= 0x10)   return 0;  //error
  148   3                  address = (address << 4) + j;
  149   3              }
  150   2              return (address);
  151   2          }
  152   1          return  0; //error
  153   1      }
  154          
  155          //========================================================================
  156          // º¯Êı: I2cGetDataLength
  157          // ÃèÊö: »ñÈ¡Òª¶Á³öÊı¾İµÄ×Ö½ÚÊı.
  158          // ²ÎÊı: ÎŞ.
  159          // ·µ»Ø: 1Òª¶Á³öÊı¾İµÄ×Ö½ÚÊı.
  160          // °æ±¾: V1.0, 2013-6-6
  161          //========================================================================
  162          static u8 I2cGetDataLength(void)
  163          {
  164   1        u8  i;
  165   1        u8  length;
  166   1        
  167   1        length = 0;
  168   1        for(i=7; i<COM2.RX_Cnt; i++)
  169   1        {
  170   2          if(I2cCheckData(RX2_Buffer[i]) >= 10)  break;
  171   2          length = length * 10 + I2cCheckData(RX2_Buffer[i]);
  172   2        }
  173   1        return (length);
  174   1      }
  175          
  176          //========================================================================
  177          // º¯Êı: Sample_DMA_I2C
  178          // ÃèÊö: ÓÃ»§Ó¦ÓÃ³ÌĞò.
  179          // ²ÎÊı: None.
  180          // ·µ»Ø: None.
  181          // °æ±¾: V1.0, 2020-09-28
  182          //========================================================================
  183          void Sample_DMA_I2C(void)
  184          {
C251 COMPILER V5.60.0,  APP_DMA_I2C                                                        26/11/24  22:56:06  PAGE 4   

  185   1        u8  i,j;
  186   1        u8  addr;
  187   1        u8  status;
  188   1      
  189   1        if(COM2.RX_TimeOut > 0)   //³¬Ê±¼ÆÊı
  190   1        {
  191   2          if(--COM2.RX_TimeOut == 0)
  192   2          {
  193   3      //      printf("ÊÕµ½ÄÚÈİÈçÏÂ£º ");
  194   3      //      for(i=0; i<COM2.RX_Cnt; i++)    printf("%c", RX2_Buffer[i]);    //°ÑÊÕµ½µÄÊı¾İÔ­Ñù·µ»Ø,ÓÃÓÚ²âÊÔ
  195   3      //      printf("\r\n");
  196   3      
  197   3            status = 0xff;  //×´Ì¬¸øÒ»¸ö·Ç0Öµ
  198   3            if((COM2.RX_Cnt >= 8) && (RX2_Buffer[1] == ' ')) //×î¶ÌÃüÁîÎª8¸ö×Ö½Ú
  199   3            {
  200   4              for(i=0; i<6; i++)
  201   4              {
  202   5                if((RX2_Buffer[i] >= 'a') && (RX2_Buffer[i] <= 'z'))    RX2_Buffer[i] = RX2_Buffer[i] - 'a' + 'A';  
             -//Ğ¡Ğ´×ª´óĞ´
  203   5              }
  204   4              addr = I2cGetAddress();
  205   4              //if(addr <= 255)    //ÏŞÖÆµØÖ··¶Î§
  206   4              {
  207   5                if((RX2_Buffer[0] == 'W')&& (RX2_Buffer[6] == ' '))   //Ğ´ÈëN¸ö×Ö½Ú
  208   5                {
  209   6                  j = COM2.RX_Cnt - 7;
  210   6                  if(j > EE_BUF_LENGTH)  j = EE_BUF_LENGTH; //Ô½½ç¼ì²â
  211   6      
  212   6                  for(i=0; i<j; i++)  I2cTxBuffer[i+2] = RX2_Buffer[i+7];
  213   6                  WriteNbyte(addr, j);     //Ğ´N¸ö×Ö½Ú 
  214   6                  printf("ÒÑĞ´Èë%d×Ö½ÚÄÚÈİ!\r\n",j);
  215   6                  delay_ms(5);
  216   6      
  217   6                  ReadNbyte(addr, j);
  218   6                  printf("¶Á³ö%d¸ö×Ö½ÚÄÚÈİÈçÏÂ£º\r\n",j);
  219   6                  for(i=0; i<j; i++)    printf("%c", I2cRxBuffer[i]);
  220   6                  printf("\r\n");
  221   6      
  222   6                  status = 0; //ÃüÁîÕıÈ·
  223   6                }
  224   5                else if((RX2_Buffer[0] == 'R') && (RX2_Buffer[6] == ' '))   //¶Á³öN¸ö×Ö½Ú
  225   5                {
  226   6                  j = I2cGetDataLength();
  227   6                  if(j > EE_BUF_LENGTH)  j = EE_BUF_LENGTH; //Ô½½ç¼ì²â
  228   6                  if(j > 0)
  229   6                  {
  230   7                    ReadNbyte(addr, j);
  231   7                    printf("¶Á³ö%d¸ö×Ö½ÚÄÚÈİÈçÏÂ£º\r\n",j);
  232   7                    for(i=0; i<j; i++)    printf("%c", I2cRxBuffer[i]);
  233   7                    printf("\r\n");
  234   7      
  235   7                    status = 0; //ÃüÁîÕıÈ·
  236   7                  }
  237   6                }
  238   5              }
  239   4            }
  240   3            if(status != 0) printf("ÃüÁî´íÎó£¡\r\n");
  241   3            COM2.RX_Cnt = 0;
  242   3          }
  243   2        }
  244   1      }
  245          
  246          void WriteNbyte(u8 addr, u8 number)  /*  WordAddress,First Data Address,Byte lenth   */
  247          {
  248   1        while(Get_MSBusy_Status());    //¼ì²éI2C¿ØÖÆÆ÷Ã¦Âµ×´Ì¬
  249   1      
C251 COMPILER V5.60.0,  APP_DMA_I2C                                                        26/11/24  22:56:06  PAGE 5   

  250   1        DmaI2CTFlag = 1;
  251   1        I2cTxBuffer[0] = SLAW;
  252   1        I2cTxBuffer[1] = addr;
  253   1      
  254   1        I2C_MSCMD(0x89);      //ÆğÊ¼ÃüÁî+·¢ËÍÊı¾İ+½ÓÊÕACK
  255   1        I2C_DMA_Enable();
  256   1        SET_I2CT_DMA_LEN(number+1); //ÉèÖÃ´«Êä×Ü×Ö½ÚÊı£ºn+1
  257   1        SET_I2C_DMA_ST(number+1);   //ÉèÖÃĞèÒª´«Êä×Ö½ÚÊı£ºn+1
  258   1        DMA_I2CT_TRIG();
  259   1      
  260   1        while(DmaI2CTFlag);         //DMAÃ¦¼ì²â
  261   1        I2C_DMA_Disable();
  262   1      }
  263          
  264          void ReadNbyte(u8 addr, u8 number)   /*  WordAddress,First Data Address,Byte lenth   */
  265          {
  266   1        while(Get_MSBusy_Status());    //¼ì²éI2C¿ØÖÆÆ÷Ã¦Âµ×´Ì¬
  267   1        I2C_DMA_Disable();
  268   1      
  269   1        //·¢ËÍÆğÊ¼ĞÅºÅ+Éè±¸µØÖ·+Ğ´ĞÅºÅ
  270   1        SendCmdData(0x09,SLAW);
  271   1      
  272   1        //·¢ËÍ´æ´¢Æ÷µØÖ·
  273   1        SendCmdData(0x0a,addr);
  274   1          
  275   1        //·¢ËÍÆğÊ¼ĞÅºÅ+Éè±¸µØÖ·+¶ÁĞÅºÅ
  276   1        SendCmdData(0x09,SLAR);
  277   1      
  278   1        DmaI2CRFlag = 1;
  279   1      
  280   1        I2C_MSCMD(0x8b);      //ÆğÊ¼ÃüÁî+·¢ËÍÊı¾İ+½ÓÊÕACK
  281   1        I2C_DMA_Enable();
  282   1        SET_I2CR_DMA_LEN(number-1); //ÉèÖÃ´«Êä×Ü×Ö½ÚÊı£ºn+1
  283   1        SET_I2C_DMA_ST(number-1);   //ÉèÖÃĞèÒª´«Êä×Ö½ÚÊı£ºn+1
  284   1        DMA_I2CR_TRIG();
  285   1      
  286   1        while(DmaI2CRFlag);         //DMAÃ¦¼ì²â
  287   1        I2C_DMA_Disable();
  288   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1082     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       512     ------
  xdata-const size     =    ------     ------
  edata size           =         1         25
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       194     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
