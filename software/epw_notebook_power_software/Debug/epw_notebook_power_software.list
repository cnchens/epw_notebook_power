
epw_notebook_power_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdf4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000115c  0800cf04  0800cf04  0000df04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e060  0800e060  0001017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e060  0800e060  0000f060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e068  0800e068  0001017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e068  0800e068  0000f068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e06c  0800e06c  0000f06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800e070  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001570  2000017c  0800e1ec  0001017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016ec  0800e1ec  000106ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001898c  00000000  00000000  000101a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e5b  00000000  00000000  00028b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0002c990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001246  00000000  00000000  0002e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbad  00000000  00000000  0002f37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbcb  00000000  00000000  0004af2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e60  00000000  00000000  00068af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006580  00000000  00000000  000ff99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00105f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000017c 	.word	0x2000017c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ceec 	.word	0x0800ceec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000180 	.word	0x20000180
 800014c:	0800ceec 	.word	0x0800ceec

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_dmul>:
 8000164:	b570      	push	{r4, r5, r6, lr}
 8000166:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800016a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000172:	bf1d      	ittte	ne
 8000174:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000178:	ea94 0f0c 	teqne	r4, ip
 800017c:	ea95 0f0c 	teqne	r5, ip
 8000180:	f000 f8de 	bleq	8000340 <__aeabi_dmul+0x1dc>
 8000184:	442c      	add	r4, r5
 8000186:	ea81 0603 	eor.w	r6, r1, r3
 800018a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000192:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000196:	bf18      	it	ne
 8000198:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800019c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a4:	d038      	beq.n	8000218 <__aeabi_dmul+0xb4>
 80001a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001aa:	f04f 0500 	mov.w	r5, #0
 80001ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ba:	f04f 0600 	mov.w	r6, #0
 80001be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001c2:	f09c 0f00 	teq	ip, #0
 80001c6:	bf18      	it	ne
 80001c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d8:	d204      	bcs.n	80001e4 <__aeabi_dmul+0x80>
 80001da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001de:	416d      	adcs	r5, r5
 80001e0:	eb46 0606 	adc.w	r6, r6, r6
 80001e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001fc:	bf88      	it	hi
 80001fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000202:	d81e      	bhi.n	8000242 <__aeabi_dmul+0xde>
 8000204:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000208:	bf08      	it	eq
 800020a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020e:	f150 0000 	adcs.w	r0, r0, #0
 8000212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000216:	bd70      	pop	{r4, r5, r6, pc}
 8000218:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800021c:	ea46 0101 	orr.w	r1, r6, r1
 8000220:	ea40 0002 	orr.w	r0, r0, r2
 8000224:	ea81 0103 	eor.w	r1, r1, r3
 8000228:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800022c:	bfc2      	ittt	gt
 800022e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000232:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000236:	bd70      	popgt	{r4, r5, r6, pc}
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800023c:	f04f 0e00 	mov.w	lr, #0
 8000240:	3c01      	subs	r4, #1
 8000242:	f300 80ab 	bgt.w	800039c <__aeabi_dmul+0x238>
 8000246:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800024a:	bfde      	ittt	le
 800024c:	2000      	movle	r0, #0
 800024e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000252:	bd70      	pople	{r4, r5, r6, pc}
 8000254:	f1c4 0400 	rsb	r4, r4, #0
 8000258:	3c20      	subs	r4, #32
 800025a:	da35      	bge.n	80002c8 <__aeabi_dmul+0x164>
 800025c:	340c      	adds	r4, #12
 800025e:	dc1b      	bgt.n	8000298 <__aeabi_dmul+0x134>
 8000260:	f104 0414 	add.w	r4, r4, #20
 8000264:	f1c4 0520 	rsb	r5, r4, #32
 8000268:	fa00 f305 	lsl.w	r3, r0, r5
 800026c:	fa20 f004 	lsr.w	r0, r0, r4
 8000270:	fa01 f205 	lsl.w	r2, r1, r5
 8000274:	ea40 0002 	orr.w	r0, r0, r2
 8000278:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800027c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000280:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000284:	fa21 f604 	lsr.w	r6, r1, r4
 8000288:	eb42 0106 	adc.w	r1, r2, r6
 800028c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000290:	bf08      	it	eq
 8000292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	f1c4 040c 	rsb	r4, r4, #12
 800029c:	f1c4 0520 	rsb	r5, r4, #32
 80002a0:	fa00 f304 	lsl.w	r3, r0, r4
 80002a4:	fa20 f005 	lsr.w	r0, r0, r5
 80002a8:	fa01 f204 	lsl.w	r2, r1, r4
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b8:	f141 0100 	adc.w	r1, r1, #0
 80002bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002c0:	bf08      	it	eq
 80002c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f205 	lsl.w	r2, r0, r5
 80002d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d4:	fa20 f304 	lsr.w	r3, r0, r4
 80002d8:	fa01 f205 	lsl.w	r2, r1, r5
 80002dc:	ea43 0302 	orr.w	r3, r3, r2
 80002e0:	fa21 f004 	lsr.w	r0, r1, r4
 80002e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e8:	fa21 f204 	lsr.w	r2, r1, r4
 80002ec:	ea20 0002 	bic.w	r0, r0, r2
 80002f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f8:	bf08      	it	eq
 80002fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f094 0f00 	teq	r4, #0
 8000304:	d10f      	bne.n	8000326 <__aeabi_dmul+0x1c2>
 8000306:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800030a:	0040      	lsls	r0, r0, #1
 800030c:	eb41 0101 	adc.w	r1, r1, r1
 8000310:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000314:	bf08      	it	eq
 8000316:	3c01      	subeq	r4, #1
 8000318:	d0f7      	beq.n	800030a <__aeabi_dmul+0x1a6>
 800031a:	ea41 0106 	orr.w	r1, r1, r6
 800031e:	f095 0f00 	teq	r5, #0
 8000322:	bf18      	it	ne
 8000324:	4770      	bxne	lr
 8000326:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	eb43 0303 	adc.w	r3, r3, r3
 8000330:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000334:	bf08      	it	eq
 8000336:	3d01      	subeq	r5, #1
 8000338:	d0f7      	beq.n	800032a <__aeabi_dmul+0x1c6>
 800033a:	ea43 0306 	orr.w	r3, r3, r6
 800033e:	4770      	bx	lr
 8000340:	ea94 0f0c 	teq	r4, ip
 8000344:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000348:	bf18      	it	ne
 800034a:	ea95 0f0c 	teqne	r5, ip
 800034e:	d00c      	beq.n	800036a <__aeabi_dmul+0x206>
 8000350:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000354:	bf18      	it	ne
 8000356:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800035a:	d1d1      	bne.n	8000300 <__aeabi_dmul+0x19c>
 800035c:	ea81 0103 	eor.w	r1, r1, r3
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd70      	pop	{r4, r5, r6, pc}
 800036a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036e:	bf06      	itte	eq
 8000370:	4610      	moveq	r0, r2
 8000372:	4619      	moveq	r1, r3
 8000374:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000378:	d019      	beq.n	80003ae <__aeabi_dmul+0x24a>
 800037a:	ea94 0f0c 	teq	r4, ip
 800037e:	d102      	bne.n	8000386 <__aeabi_dmul+0x222>
 8000380:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000384:	d113      	bne.n	80003ae <__aeabi_dmul+0x24a>
 8000386:	ea95 0f0c 	teq	r5, ip
 800038a:	d105      	bne.n	8000398 <__aeabi_dmul+0x234>
 800038c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000390:	bf1c      	itt	ne
 8000392:	4610      	movne	r0, r2
 8000394:	4619      	movne	r1, r3
 8000396:	d10a      	bne.n	80003ae <__aeabi_dmul+0x24a>
 8000398:	ea81 0103 	eor.w	r1, r1, r3
 800039c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a8:	f04f 0000 	mov.w	r0, #0
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
 80003ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b6:	bd70      	pop	{r4, r5, r6, pc}

080003b8 <__aeabi_drsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	e002      	b.n	80003c4 <__adddf3>
 80003be:	bf00      	nop

080003c0 <__aeabi_dsub>:
 80003c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c4 <__adddf3>:
 80003c4:	b530      	push	{r4, r5, lr}
 80003c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	bf1f      	itttt	ne
 80003da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ea:	f000 80e2 	beq.w	80005b2 <__adddf3+0x1ee>
 80003ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f6:	bfb8      	it	lt
 80003f8:	426d      	neglt	r5, r5
 80003fa:	dd0c      	ble.n	8000416 <__adddf3+0x52>
 80003fc:	442c      	add	r4, r5
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	ea82 0000 	eor.w	r0, r2, r0
 800040a:	ea83 0101 	eor.w	r1, r3, r1
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	2d36      	cmp	r5, #54	@ 0x36
 8000418:	bf88      	it	hi
 800041a:	bd30      	pophi	{r4, r5, pc}
 800041c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000420:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000424:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000428:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x70>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000438:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800043c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000440:	d002      	beq.n	8000448 <__adddf3+0x84>
 8000442:	4252      	negs	r2, r2
 8000444:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000448:	ea94 0f05 	teq	r4, r5
 800044c:	f000 80a7 	beq.w	800059e <__adddf3+0x1da>
 8000450:	f1a4 0401 	sub.w	r4, r4, #1
 8000454:	f1d5 0e20 	rsbs	lr, r5, #32
 8000458:	db0d      	blt.n	8000476 <__adddf3+0xb2>
 800045a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045e:	fa22 f205 	lsr.w	r2, r2, r5
 8000462:	1880      	adds	r0, r0, r2
 8000464:	f141 0100 	adc.w	r1, r1, #0
 8000468:	fa03 f20e 	lsl.w	r2, r3, lr
 800046c:	1880      	adds	r0, r0, r2
 800046e:	fa43 f305 	asr.w	r3, r3, r5
 8000472:	4159      	adcs	r1, r3
 8000474:	e00e      	b.n	8000494 <__adddf3+0xd0>
 8000476:	f1a5 0520 	sub.w	r5, r5, #32
 800047a:	f10e 0e20 	add.w	lr, lr, #32
 800047e:	2a01      	cmp	r2, #1
 8000480:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000484:	bf28      	it	cs
 8000486:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	18c0      	adds	r0, r0, r3
 8000490:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000498:	d507      	bpl.n	80004aa <__adddf3+0xe6>
 800049a:	f04f 0e00 	mov.w	lr, #0
 800049e:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ae:	d31b      	bcc.n	80004e8 <__adddf3+0x124>
 80004b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b4:	d30c      	bcc.n	80004d0 <__adddf3+0x10c>
 80004b6:	0849      	lsrs	r1, r1, #1
 80004b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c0:	f104 0401 	add.w	r4, r4, #1
 80004c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004cc:	f080 809a 	bcs.w	8000604 <__adddf3+0x240>
 80004d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d4:	bf08      	it	eq
 80004d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004da:	f150 0000 	adcs.w	r0, r0, #0
 80004de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e2:	ea41 0105 	orr.w	r1, r1, r5
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004ec:	4140      	adcs	r0, r0
 80004ee:	eb41 0101 	adc.w	r1, r1, r1
 80004f2:	3c01      	subs	r4, #1
 80004f4:	bf28      	it	cs
 80004f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004fa:	d2e9      	bcs.n	80004d0 <__adddf3+0x10c>
 80004fc:	f091 0f00 	teq	r1, #0
 8000500:	bf04      	itt	eq
 8000502:	4601      	moveq	r1, r0
 8000504:	2000      	moveq	r0, #0
 8000506:	fab1 f381 	clz	r3, r1
 800050a:	bf08      	it	eq
 800050c:	3320      	addeq	r3, #32
 800050e:	f1a3 030b 	sub.w	r3, r3, #11
 8000512:	f1b3 0220 	subs.w	r2, r3, #32
 8000516:	da0c      	bge.n	8000532 <__adddf3+0x16e>
 8000518:	320c      	adds	r2, #12
 800051a:	dd08      	ble.n	800052e <__adddf3+0x16a>
 800051c:	f102 0c14 	add.w	ip, r2, #20
 8000520:	f1c2 020c 	rsb	r2, r2, #12
 8000524:	fa01 f00c 	lsl.w	r0, r1, ip
 8000528:	fa21 f102 	lsr.w	r1, r1, r2
 800052c:	e00c      	b.n	8000548 <__adddf3+0x184>
 800052e:	f102 0214 	add.w	r2, r2, #20
 8000532:	bfd8      	it	le
 8000534:	f1c2 0c20 	rsble	ip, r2, #32
 8000538:	fa01 f102 	lsl.w	r1, r1, r2
 800053c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000540:	bfdc      	itt	le
 8000542:	ea41 010c 	orrle.w	r1, r1, ip
 8000546:	4090      	lslle	r0, r2
 8000548:	1ae4      	subs	r4, r4, r3
 800054a:	bfa2      	ittt	ge
 800054c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000550:	4329      	orrge	r1, r5
 8000552:	bd30      	popge	{r4, r5, pc}
 8000554:	ea6f 0404 	mvn.w	r4, r4
 8000558:	3c1f      	subs	r4, #31
 800055a:	da1c      	bge.n	8000596 <__adddf3+0x1d2>
 800055c:	340c      	adds	r4, #12
 800055e:	dc0e      	bgt.n	800057e <__adddf3+0x1ba>
 8000560:	f104 0414 	add.w	r4, r4, #20
 8000564:	f1c4 0220 	rsb	r2, r4, #32
 8000568:	fa20 f004 	lsr.w	r0, r0, r4
 800056c:	fa01 f302 	lsl.w	r3, r1, r2
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	fa21 f304 	lsr.w	r3, r1, r4
 8000578:	ea45 0103 	orr.w	r1, r5, r3
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f1c4 040c 	rsb	r4, r4, #12
 8000582:	f1c4 0220 	rsb	r2, r4, #32
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 f304 	lsl.w	r3, r1, r4
 800058e:	ea40 0003 	orr.w	r0, r0, r3
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	fa21 f004 	lsr.w	r0, r1, r4
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	f094 0f00 	teq	r4, #0
 80005a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a6:	bf06      	itte	eq
 80005a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005ac:	3401      	addeq	r4, #1
 80005ae:	3d01      	subne	r5, #1
 80005b0:	e74e      	b.n	8000450 <__adddf3+0x8c>
 80005b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b6:	bf18      	it	ne
 80005b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005bc:	d029      	beq.n	8000612 <__adddf3+0x24e>
 80005be:	ea94 0f05 	teq	r4, r5
 80005c2:	bf08      	it	eq
 80005c4:	ea90 0f02 	teqeq	r0, r2
 80005c8:	d005      	beq.n	80005d6 <__adddf3+0x212>
 80005ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ce:	bf04      	itt	eq
 80005d0:	4619      	moveq	r1, r3
 80005d2:	4610      	moveq	r0, r2
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	ea91 0f03 	teq	r1, r3
 80005da:	bf1e      	ittt	ne
 80005dc:	2100      	movne	r1, #0
 80005de:	2000      	movne	r0, #0
 80005e0:	bd30      	popne	{r4, r5, pc}
 80005e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e6:	d105      	bne.n	80005f4 <__adddf3+0x230>
 80005e8:	0040      	lsls	r0, r0, #1
 80005ea:	4149      	adcs	r1, r1
 80005ec:	bf28      	it	cs
 80005ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f8:	bf3c      	itt	cc
 80005fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fe:	bd30      	popcc	{r4, r5, pc}
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000608:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800060c:	f04f 0000 	mov.w	r0, #0
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000616:	bf1a      	itte	ne
 8000618:	4619      	movne	r1, r3
 800061a:	4610      	movne	r0, r2
 800061c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000620:	bf1c      	itt	ne
 8000622:	460b      	movne	r3, r1
 8000624:	4602      	movne	r2, r0
 8000626:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062a:	bf06      	itte	eq
 800062c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000630:	ea91 0f03 	teqeq	r1, r3
 8000634:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop

0800063c <__aeabi_ui2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000650:	f04f 0500 	mov.w	r5, #0
 8000654:	f04f 0100 	mov.w	r1, #0
 8000658:	e750      	b.n	80004fc <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_i2d>:
 800065c:	f090 0f00 	teq	r0, #0
 8000660:	bf04      	itt	eq
 8000662:	2100      	moveq	r1, #0
 8000664:	4770      	bxeq	lr
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800066c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000670:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000674:	bf48      	it	mi
 8000676:	4240      	negmi	r0, r0
 8000678:	f04f 0100 	mov.w	r1, #0
 800067c:	e73e      	b.n	80004fc <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_f2d>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000686:	ea4f 0131 	mov.w	r1, r1, rrx
 800068a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068e:	bf1f      	itttt	ne
 8000690:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000694:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000698:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800069c:	4770      	bxne	lr
 800069e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006a2:	bf08      	it	eq
 80006a4:	4770      	bxeq	lr
 80006a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006aa:	bf04      	itt	eq
 80006ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c0:	e71c      	b.n	80004fc <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_ul2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	e00a      	b.n	80006ea <__aeabi_l2d+0x16>

080006d4 <__aeabi_l2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006e2:	d502      	bpl.n	80006ea <__aeabi_l2d+0x16>
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f6:	f43f aed8 	beq.w	80004aa <__adddf3+0xe6>
 80006fa:	f04f 0203 	mov.w	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000712:	f1c2 0320 	rsb	r3, r2, #32
 8000716:	fa00 fc03 	lsl.w	ip, r0, r3
 800071a:	fa20 f002 	lsr.w	r0, r0, r2
 800071e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000722:	ea40 000e 	orr.w	r0, r0, lr
 8000726:	fa21 f102 	lsr.w	r1, r1, r2
 800072a:	4414      	add	r4, r2
 800072c:	e6bd      	b.n	80004aa <__adddf3+0xe6>
 800072e:	bf00      	nop

08000730 <__aeabi_d2uiz>:
 8000730:	004a      	lsls	r2, r1, #1
 8000732:	d211      	bcs.n	8000758 <__aeabi_d2uiz+0x28>
 8000734:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000738:	d211      	bcs.n	800075e <__aeabi_d2uiz+0x2e>
 800073a:	d50d      	bpl.n	8000758 <__aeabi_d2uiz+0x28>
 800073c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000740:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000744:	d40e      	bmi.n	8000764 <__aeabi_d2uiz+0x34>
 8000746:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800074a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000752:	fa23 f002 	lsr.w	r0, r3, r2
 8000756:	4770      	bx	lr
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	4770      	bx	lr
 800075e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000762:	d102      	bne.n	800076a <__aeabi_d2uiz+0x3a>
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_frsub>:
 8000770:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000774:	e002      	b.n	800077c <__addsf3>
 8000776:	bf00      	nop

08000778 <__aeabi_fsub>:
 8000778:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800077c <__addsf3>:
 800077c:	0042      	lsls	r2, r0, #1
 800077e:	bf1f      	itttt	ne
 8000780:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000784:	ea92 0f03 	teqne	r2, r3
 8000788:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800078c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000790:	d06a      	beq.n	8000868 <__addsf3+0xec>
 8000792:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000796:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800079a:	bfc1      	itttt	gt
 800079c:	18d2      	addgt	r2, r2, r3
 800079e:	4041      	eorgt	r1, r0
 80007a0:	4048      	eorgt	r0, r1
 80007a2:	4041      	eorgt	r1, r0
 80007a4:	bfb8      	it	lt
 80007a6:	425b      	neglt	r3, r3
 80007a8:	2b19      	cmp	r3, #25
 80007aa:	bf88      	it	hi
 80007ac:	4770      	bxhi	lr
 80007ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007ba:	bf18      	it	ne
 80007bc:	4240      	negne	r0, r0
 80007be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007ca:	bf18      	it	ne
 80007cc:	4249      	negne	r1, r1
 80007ce:	ea92 0f03 	teq	r2, r3
 80007d2:	d03f      	beq.n	8000854 <__addsf3+0xd8>
 80007d4:	f1a2 0201 	sub.w	r2, r2, #1
 80007d8:	fa41 fc03 	asr.w	ip, r1, r3
 80007dc:	eb10 000c 	adds.w	r0, r0, ip
 80007e0:	f1c3 0320 	rsb	r3, r3, #32
 80007e4:	fa01 f103 	lsl.w	r1, r1, r3
 80007e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007ec:	d502      	bpl.n	80007f4 <__addsf3+0x78>
 80007ee:	4249      	negs	r1, r1
 80007f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007f8:	d313      	bcc.n	8000822 <__addsf3+0xa6>
 80007fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007fe:	d306      	bcc.n	800080e <__addsf3+0x92>
 8000800:	0840      	lsrs	r0, r0, #1
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	f102 0201 	add.w	r2, r2, #1
 800080a:	2afe      	cmp	r2, #254	@ 0xfe
 800080c:	d251      	bcs.n	80008b2 <__addsf3+0x136>
 800080e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000812:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000816:	bf08      	it	eq
 8000818:	f020 0001 	biceq.w	r0, r0, #1
 800081c:	ea40 0003 	orr.w	r0, r0, r3
 8000820:	4770      	bx	lr
 8000822:	0049      	lsls	r1, r1, #1
 8000824:	eb40 0000 	adc.w	r0, r0, r0
 8000828:	3a01      	subs	r2, #1
 800082a:	bf28      	it	cs
 800082c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000830:	d2ed      	bcs.n	800080e <__addsf3+0x92>
 8000832:	fab0 fc80 	clz	ip, r0
 8000836:	f1ac 0c08 	sub.w	ip, ip, #8
 800083a:	ebb2 020c 	subs.w	r2, r2, ip
 800083e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000842:	bfaa      	itet	ge
 8000844:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000848:	4252      	neglt	r2, r2
 800084a:	4318      	orrge	r0, r3
 800084c:	bfbc      	itt	lt
 800084e:	40d0      	lsrlt	r0, r2
 8000850:	4318      	orrlt	r0, r3
 8000852:	4770      	bx	lr
 8000854:	f092 0f00 	teq	r2, #0
 8000858:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800085c:	bf06      	itte	eq
 800085e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000862:	3201      	addeq	r2, #1
 8000864:	3b01      	subne	r3, #1
 8000866:	e7b5      	b.n	80007d4 <__addsf3+0x58>
 8000868:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800086c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000870:	bf18      	it	ne
 8000872:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000876:	d021      	beq.n	80008bc <__addsf3+0x140>
 8000878:	ea92 0f03 	teq	r2, r3
 800087c:	d004      	beq.n	8000888 <__addsf3+0x10c>
 800087e:	f092 0f00 	teq	r2, #0
 8000882:	bf08      	it	eq
 8000884:	4608      	moveq	r0, r1
 8000886:	4770      	bx	lr
 8000888:	ea90 0f01 	teq	r0, r1
 800088c:	bf1c      	itt	ne
 800088e:	2000      	movne	r0, #0
 8000890:	4770      	bxne	lr
 8000892:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000896:	d104      	bne.n	80008a2 <__addsf3+0x126>
 8000898:	0040      	lsls	r0, r0, #1
 800089a:	bf28      	it	cs
 800089c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008a0:	4770      	bx	lr
 80008a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008a6:	bf3c      	itt	cc
 80008a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008ac:	4770      	bxcc	lr
 80008ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008ba:	4770      	bx	lr
 80008bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008c0:	bf16      	itet	ne
 80008c2:	4608      	movne	r0, r1
 80008c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c8:	4601      	movne	r1, r0
 80008ca:	0242      	lsls	r2, r0, #9
 80008cc:	bf06      	itte	eq
 80008ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008d2:	ea90 0f01 	teqeq	r0, r1
 80008d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008da:	4770      	bx	lr

080008dc <__aeabi_ui2f>:
 80008dc:	f04f 0300 	mov.w	r3, #0
 80008e0:	e004      	b.n	80008ec <__aeabi_i2f+0x8>
 80008e2:	bf00      	nop

080008e4 <__aeabi_i2f>:
 80008e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008e8:	bf48      	it	mi
 80008ea:	4240      	negmi	r0, r0
 80008ec:	ea5f 0c00 	movs.w	ip, r0
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008f8:	4601      	mov	r1, r0
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	e01c      	b.n	800093a <__aeabi_l2f+0x2a>

08000900 <__aeabi_ul2f>:
 8000900:	ea50 0201 	orrs.w	r2, r0, r1
 8000904:	bf08      	it	eq
 8000906:	4770      	bxeq	lr
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	e00a      	b.n	8000924 <__aeabi_l2f+0x14>
 800090e:	bf00      	nop

08000910 <__aeabi_l2f>:
 8000910:	ea50 0201 	orrs.w	r2, r0, r1
 8000914:	bf08      	it	eq
 8000916:	4770      	bxeq	lr
 8000918:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800091c:	d502      	bpl.n	8000924 <__aeabi_l2f+0x14>
 800091e:	4240      	negs	r0, r0
 8000920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000924:	ea5f 0c01 	movs.w	ip, r1
 8000928:	bf02      	ittt	eq
 800092a:	4684      	moveq	ip, r0
 800092c:	4601      	moveq	r1, r0
 800092e:	2000      	moveq	r0, #0
 8000930:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000934:	bf08      	it	eq
 8000936:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800093a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800093e:	fabc f28c 	clz	r2, ip
 8000942:	3a08      	subs	r2, #8
 8000944:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000948:	db10      	blt.n	800096c <__aeabi_l2f+0x5c>
 800094a:	fa01 fc02 	lsl.w	ip, r1, r2
 800094e:	4463      	add	r3, ip
 8000950:	fa00 fc02 	lsl.w	ip, r0, r2
 8000954:	f1c2 0220 	rsb	r2, r2, #32
 8000958:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800095c:	fa20 f202 	lsr.w	r2, r0, r2
 8000960:	eb43 0002 	adc.w	r0, r3, r2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f102 0220 	add.w	r2, r2, #32
 8000970:	fa01 fc02 	lsl.w	ip, r1, r2
 8000974:	f1c2 0220 	rsb	r2, r2, #32
 8000978:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800097c:	fa21 f202 	lsr.w	r2, r1, r2
 8000980:	eb43 0002 	adc.w	r0, r3, r2
 8000984:	bf08      	it	eq
 8000986:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800098a:	4770      	bx	lr

0800098c <__aeabi_fmul>:
 800098c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000990:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000994:	bf1e      	ittt	ne
 8000996:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800099a:	ea92 0f0c 	teqne	r2, ip
 800099e:	ea93 0f0c 	teqne	r3, ip
 80009a2:	d06f      	beq.n	8000a84 <__aeabi_fmul+0xf8>
 80009a4:	441a      	add	r2, r3
 80009a6:	ea80 0c01 	eor.w	ip, r0, r1
 80009aa:	0240      	lsls	r0, r0, #9
 80009ac:	bf18      	it	ne
 80009ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009b2:	d01e      	beq.n	80009f2 <__aeabi_fmul+0x66>
 80009b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009c0:	fba0 3101 	umull	r3, r1, r0, r1
 80009c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009cc:	bf3e      	ittt	cc
 80009ce:	0049      	lslcc	r1, r1, #1
 80009d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d4:	005b      	lslcc	r3, r3, #1
 80009d6:	ea40 0001 	orr.w	r0, r0, r1
 80009da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009de:	2afd      	cmp	r2, #253	@ 0xfd
 80009e0:	d81d      	bhi.n	8000a1e <__aeabi_fmul+0x92>
 80009e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	4770      	bx	lr
 80009f2:	f090 0f00 	teq	r0, #0
 80009f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009fa:	bf08      	it	eq
 80009fc:	0249      	lsleq	r1, r1, #9
 80009fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a02:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a06:	3a7f      	subs	r2, #127	@ 0x7f
 8000a08:	bfc2      	ittt	gt
 8000a0a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a0e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a12:	4770      	bxgt	lr
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	dc5d      	bgt.n	8000adc <__aeabi_fmul+0x150>
 8000a20:	f112 0f19 	cmn.w	r2, #25
 8000a24:	bfdc      	itt	le
 8000a26:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a2a:	4770      	bxle	lr
 8000a2c:	f1c2 0200 	rsb	r2, r2, #0
 8000a30:	0041      	lsls	r1, r0, #1
 8000a32:	fa21 f102 	lsr.w	r1, r1, r2
 8000a36:	f1c2 0220 	rsb	r2, r2, #32
 8000a3a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a42:	f140 0000 	adc.w	r0, r0, #0
 8000a46:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a4a:	bf08      	it	eq
 8000a4c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a50:	4770      	bx	lr
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a5a:	bf02      	ittt	eq
 8000a5c:	0040      	lsleq	r0, r0, #1
 8000a5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a62:	3a01      	subeq	r2, #1
 8000a64:	d0f9      	beq.n	8000a5a <__aeabi_fmul+0xce>
 8000a66:	ea40 000c 	orr.w	r0, r0, ip
 8000a6a:	f093 0f00 	teq	r3, #0
 8000a6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a72:	bf02      	ittt	eq
 8000a74:	0049      	lsleq	r1, r1, #1
 8000a76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a7a:	3b01      	subeq	r3, #1
 8000a7c:	d0f9      	beq.n	8000a72 <__aeabi_fmul+0xe6>
 8000a7e:	ea41 010c 	orr.w	r1, r1, ip
 8000a82:	e78f      	b.n	80009a4 <__aeabi_fmul+0x18>
 8000a84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a88:	ea92 0f0c 	teq	r2, ip
 8000a8c:	bf18      	it	ne
 8000a8e:	ea93 0f0c 	teqne	r3, ip
 8000a92:	d00a      	beq.n	8000aaa <__aeabi_fmul+0x11e>
 8000a94:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a98:	bf18      	it	ne
 8000a9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9e:	d1d8      	bne.n	8000a52 <__aeabi_fmul+0xc6>
 8000aa0:	ea80 0001 	eor.w	r0, r0, r1
 8000aa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa8:	4770      	bx	lr
 8000aaa:	f090 0f00 	teq	r0, #0
 8000aae:	bf17      	itett	ne
 8000ab0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ab4:	4608      	moveq	r0, r1
 8000ab6:	f091 0f00 	teqne	r1, #0
 8000aba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000abe:	d014      	beq.n	8000aea <__aeabi_fmul+0x15e>
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	d101      	bne.n	8000aca <__aeabi_fmul+0x13e>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	d10f      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000aca:	ea93 0f0c 	teq	r3, ip
 8000ace:	d103      	bne.n	8000ad8 <__aeabi_fmul+0x14c>
 8000ad0:	024b      	lsls	r3, r1, #9
 8000ad2:	bf18      	it	ne
 8000ad4:	4608      	movne	r0, r1
 8000ad6:	d108      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000ad8:	ea80 0001 	eor.w	r0, r0, r1
 8000adc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_fdiv>:
 8000af4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000afc:	bf1e      	ittt	ne
 8000afe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b02:	ea92 0f0c 	teqne	r2, ip
 8000b06:	ea93 0f0c 	teqne	r3, ip
 8000b0a:	d069      	beq.n	8000be0 <__aeabi_fdiv+0xec>
 8000b0c:	eba2 0203 	sub.w	r2, r2, r3
 8000b10:	ea80 0c01 	eor.w	ip, r0, r1
 8000b14:	0249      	lsls	r1, r1, #9
 8000b16:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b1a:	d037      	beq.n	8000b8c <__aeabi_fdiv+0x98>
 8000b1c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b20:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b24:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b28:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	bf38      	it	cc
 8000b30:	005b      	lslcc	r3, r3, #1
 8000b32:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b36:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	bf24      	itt	cs
 8000b3e:	1a5b      	subcs	r3, r3, r1
 8000b40:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b44:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b48:	bf24      	itt	cs
 8000b4a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b52:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b56:	bf24      	itt	cs
 8000b58:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b60:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b64:	bf24      	itt	cs
 8000b66:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b6a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	bf18      	it	ne
 8000b72:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b76:	d1e0      	bne.n	8000b3a <__aeabi_fdiv+0x46>
 8000b78:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7a:	f63f af50 	bhi.w	8000a1e <__aeabi_fmul+0x92>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b90:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b94:	327f      	adds	r2, #127	@ 0x7f
 8000b96:	bfc2      	ittt	gt
 8000b98:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b9c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ba0:	4770      	bxgt	lr
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	3a01      	subs	r2, #1
 8000bac:	e737      	b.n	8000a1e <__aeabi_fmul+0x92>
 8000bae:	f092 0f00 	teq	r2, #0
 8000bb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb6:	bf02      	ittt	eq
 8000bb8:	0040      	lsleq	r0, r0, #1
 8000bba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bbe:	3a01      	subeq	r2, #1
 8000bc0:	d0f9      	beq.n	8000bb6 <__aeabi_fdiv+0xc2>
 8000bc2:	ea40 000c 	orr.w	r0, r0, ip
 8000bc6:	f093 0f00 	teq	r3, #0
 8000bca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bce:	bf02      	ittt	eq
 8000bd0:	0049      	lsleq	r1, r1, #1
 8000bd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd6:	3b01      	subeq	r3, #1
 8000bd8:	d0f9      	beq.n	8000bce <__aeabi_fdiv+0xda>
 8000bda:	ea41 010c 	orr.w	r1, r1, ip
 8000bde:	e795      	b.n	8000b0c <__aeabi_fdiv+0x18>
 8000be0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be4:	ea92 0f0c 	teq	r2, ip
 8000be8:	d108      	bne.n	8000bfc <__aeabi_fdiv+0x108>
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	f47f af7d 	bne.w	8000aea <__aeabi_fmul+0x15e>
 8000bf0:	ea93 0f0c 	teq	r3, ip
 8000bf4:	f47f af70 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	e776      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	d104      	bne.n	8000c0c <__aeabi_fdiv+0x118>
 8000c02:	024b      	lsls	r3, r1, #9
 8000c04:	f43f af4c 	beq.w	8000aa0 <__aeabi_fmul+0x114>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e76e      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c0c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c10:	bf18      	it	ne
 8000c12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c16:	d1ca      	bne.n	8000bae <__aeabi_fdiv+0xba>
 8000c18:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c1c:	f47f af5c 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000c20:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c24:	f47f af3c 	bne.w	8000aa0 <__aeabi_fmul+0x114>
 8000c28:	e75f      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c2a:	bf00      	nop

08000c2c <__gesf2>:
 8000c2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000c30:	e006      	b.n	8000c40 <__cmpsf2+0x4>
 8000c32:	bf00      	nop

08000c34 <__lesf2>:
 8000c34:	f04f 0c01 	mov.w	ip, #1
 8000c38:	e002      	b.n	8000c40 <__cmpsf2+0x4>
 8000c3a:	bf00      	nop

08000c3c <__cmpsf2>:
 8000c3c:	f04f 0c01 	mov.w	ip, #1
 8000c40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d011      	beq.n	8000c7c <__cmpsf2+0x40>
 8000c58:	b001      	add	sp, #4
 8000c5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c5e:	bf18      	it	ne
 8000c60:	ea90 0f01 	teqne	r0, r1
 8000c64:	bf58      	it	pl
 8000c66:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c6a:	bf88      	it	hi
 8000c6c:	17c8      	asrhi	r0, r1, #31
 8000c6e:	bf38      	it	cc
 8000c70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c74:	bf18      	it	ne
 8000c76:	f040 0001 	orrne.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c80:	d102      	bne.n	8000c88 <__cmpsf2+0x4c>
 8000c82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c86:	d105      	bne.n	8000c94 <__cmpsf2+0x58>
 8000c88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c8c:	d1e4      	bne.n	8000c58 <__cmpsf2+0x1c>
 8000c8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c92:	d0e1      	beq.n	8000c58 <__cmpsf2+0x1c>
 8000c94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_cfrcmple>:
 8000c9c:	4684      	mov	ip, r0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	4661      	mov	r1, ip
 8000ca2:	e7ff      	b.n	8000ca4 <__aeabi_cfcmpeq>

08000ca4 <__aeabi_cfcmpeq>:
 8000ca4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ca6:	f7ff ffc9 	bl	8000c3c <__cmpsf2>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	bf48      	it	mi
 8000cae:	f110 0f00 	cmnmi.w	r0, #0
 8000cb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cb4 <__aeabi_fcmpeq>:
 8000cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb8:	f7ff fff4 	bl	8000ca4 <__aeabi_cfcmpeq>
 8000cbc:	bf0c      	ite	eq
 8000cbe:	2001      	moveq	r0, #1
 8000cc0:	2000      	movne	r0, #0
 8000cc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_fcmplt>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff ffea 	bl	8000ca4 <__aeabi_cfcmpeq>
 8000cd0:	bf34      	ite	cc
 8000cd2:	2001      	movcc	r0, #1
 8000cd4:	2000      	movcs	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmple>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffe0 	bl	8000ca4 <__aeabi_cfcmpeq>
 8000ce4:	bf94      	ite	ls
 8000ce6:	2001      	movls	r0, #1
 8000ce8:	2000      	movhi	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmpge>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffd2 	bl	8000c9c <__aeabi_cfrcmple>
 8000cf8:	bf94      	ite	ls
 8000cfa:	2001      	movls	r0, #1
 8000cfc:	2000      	movhi	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmpgt>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffc8 	bl	8000c9c <__aeabi_cfrcmple>
 8000d0c:	bf34      	ite	cc
 8000d0e:	2001      	movcc	r0, #1
 8000d10:	2000      	movcs	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_f2iz>:
 8000d18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d20:	d30f      	bcc.n	8000d42 <__aeabi_f2iz+0x2a>
 8000d22:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d2a:	d90d      	bls.n	8000d48 <__aeabi_f2iz+0x30>
 8000d2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d34:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d38:	fa23 f002 	lsr.w	r0, r3, r2
 8000d3c:	bf18      	it	ne
 8000d3e:	4240      	negne	r0, r0
 8000d40:	4770      	bx	lr
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	4770      	bx	lr
 8000d48:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d4c:	d101      	bne.n	8000d52 <__aeabi_f2iz+0x3a>
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	d105      	bne.n	8000d5e <__aeabi_f2iz+0x46>
 8000d52:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	bf08      	it	eq
 8000d58:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d5c:	4770      	bx	lr
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	4770      	bx	lr

08000d64 <Feed_IWDG>:
static void MX_SPI2_Init(void);
static void MX_TIM2_Init(void);
static void MX_IWDG_Init(void);
/* USER CODE BEGIN PFP */
void Feed_IWDG(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <Feed_IWDG+0x10>)
 8000d6a:	f004 f9be 	bl	80050ea <HAL_IWDG_Refresh>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200002b4 	.word	0x200002b4

08000d78 <OLED_Write_Command>:
void OLED_Write_Command(uint8_t oled_wr_data)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af04      	add	r7, sp, #16
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, OLED_ADDRESS, OLED_CMD_ADDRESS, 1, &oled_wr_data, 1, 10);
 8000d82:	230a      	movs	r3, #10
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	2301      	movs	r3, #1
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2200      	movs	r2, #0
 8000d92:	2178      	movs	r1, #120	@ 0x78
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <OLED_Write_Command+0x2c>)
 8000d96:	f003 fa43 	bl	8004220 <HAL_I2C_Mem_Write>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000260 	.word	0x20000260

08000da8 <OLED_Write_Data>:

void OLED_Write_Data(uint8_t oled_wr_data)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af04      	add	r7, sp, #16
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, OLED_ADDRESS, OLED_DATA_ADDRESS, 1, &oled_wr_data, 1, 10);
 8000db2:	230a      	movs	r3, #10
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	2301      	movs	r3, #1
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2240      	movs	r2, #64	@ 0x40
 8000dc2:	2178      	movs	r1, #120	@ 0x78
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <OLED_Write_Data+0x2c>)
 8000dc6:	f003 fa2b 	bl	8004220 <HAL_I2C_Mem_Write>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000260 	.word	0x20000260

08000dd8 <OLED_Clear>:

void OLED_Clear(void) // 清屏
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(i = 0; i < 8; i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	71fb      	strb	r3, [r7, #7]
 8000de2:	e01b      	b.n	8000e1c <OLED_Clear+0x44>
	{
		OLED_Write_Command(0xB0 + i);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3b50      	subs	r3, #80	@ 0x50
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffc4 	bl	8000d78 <OLED_Write_Command>
		OLED_Write_Command(0x00);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff ffc1 	bl	8000d78 <OLED_Write_Command>
		OLED_Write_Command(0x10);
 8000df6:	2010      	movs	r0, #16
 8000df8:	f7ff ffbe 	bl	8000d78 <OLED_Write_Command>
		for(j = 0; j < 128; j++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71bb      	strb	r3, [r7, #6]
 8000e00:	e005      	b.n	8000e0e <OLED_Clear+0x36>
		{
			OLED_Write_Data(0x00);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ffd0 	bl	8000da8 <OLED_Write_Data>
		for(j = 0; j < 128; j++)
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	71bb      	strb	r3, [r7, #6]
 8000e0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	daf5      	bge.n	8000e02 <OLED_Clear+0x2a>
	for(i = 0; i < 8; i++)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b07      	cmp	r3, #7
 8000e20:	d9e0      	bls.n	8000de4 <OLED_Clear+0xc>
		}
	}
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <Start_OLED>:

void Start_OLED(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	OLED_Write_Command(0xAE);
 8000e30:	20ae      	movs	r0, #174	@ 0xae
 8000e32:	f7ff ffa1 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x00);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ff9e 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x10);
 8000e3c:	2010      	movs	r0, #16
 8000e3e:	f7ff ff9b 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x40);
 8000e42:	2040      	movs	r0, #64	@ 0x40
 8000e44:	f7ff ff98 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x81);
 8000e48:	2081      	movs	r0, #129	@ 0x81
 8000e4a:	f7ff ff95 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xCF);
 8000e4e:	20cf      	movs	r0, #207	@ 0xcf
 8000e50:	f7ff ff92 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xA1);
 8000e54:	20a1      	movs	r0, #161	@ 0xa1
 8000e56:	f7ff ff8f 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xC8);
 8000e5a:	20c8      	movs	r0, #200	@ 0xc8
 8000e5c:	f7ff ff8c 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xA6);
 8000e60:	20a6      	movs	r0, #166	@ 0xa6
 8000e62:	f7ff ff89 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xA8);
 8000e66:	20a8      	movs	r0, #168	@ 0xa8
 8000e68:	f7ff ff86 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x3F);
 8000e6c:	203f      	movs	r0, #63	@ 0x3f
 8000e6e:	f7ff ff83 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xD3);
 8000e72:	20d3      	movs	r0, #211	@ 0xd3
 8000e74:	f7ff ff80 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x00);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff ff7d 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xD5);
 8000e7e:	20d5      	movs	r0, #213	@ 0xd5
 8000e80:	f7ff ff7a 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x80);
 8000e84:	2080      	movs	r0, #128	@ 0x80
 8000e86:	f7ff ff77 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xD9);
 8000e8a:	20d9      	movs	r0, #217	@ 0xd9
 8000e8c:	f7ff ff74 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xF1);
 8000e90:	20f1      	movs	r0, #241	@ 0xf1
 8000e92:	f7ff ff71 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xDA);
 8000e96:	20da      	movs	r0, #218	@ 0xda
 8000e98:	f7ff ff6e 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x12);
 8000e9c:	2012      	movs	r0, #18
 8000e9e:	f7ff ff6b 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xDB);
 8000ea2:	20db      	movs	r0, #219	@ 0xdb
 8000ea4:	f7ff ff68 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x30);
 8000ea8:	2030      	movs	r0, #48	@ 0x30
 8000eaa:	f7ff ff65 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x20);
 8000eae:	2020      	movs	r0, #32
 8000eb0:	f7ff ff62 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x02);
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff ff5f 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x8D);
 8000eba:	208d      	movs	r0, #141	@ 0x8d
 8000ebc:	f7ff ff5c 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0x14);
 8000ec0:	2014      	movs	r0, #20
 8000ec2:	f7ff ff59 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(0xAF);
 8000ec6:	20af      	movs	r0, #175	@ 0xaf
 8000ec8:	f7ff ff56 	bl	8000d78 <OLED_Write_Command>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <OLED_Set_Position>:

void OLED_Set_Position(uint8_t pos_x, uint8_t pos_y)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
	OLED_Write_Command(0xB0 + pos_y); // 设置页地址(0-7)
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	3b50      	subs	r3, #80	@ 0x50
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff46 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(((pos_x & 0xF0) >> 4) | 0x10); // 设置列高地址Display Position
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff3d 	bl	8000d78 <OLED_Write_Command>
	OLED_Write_Command(pos_x & 0x0F); // 设置列低地址Display Position
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff36 	bl	8000d78 <OLED_Write_Command>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <OLED_Show_Char>:
		}
	}
}

void OLED_Show_Char(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t color_turn)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	4611      	mov	r1, r2
 8000f20:	461a      	mov	r2, r3
 8000f22:	4623      	mov	r3, r4
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	4603      	mov	r3, r0
 8000f28:	71bb      	strb	r3, [r7, #6]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	717b      	strb	r3, [r7, #5]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	713b      	strb	r3, [r7, #4]
	unsigned char c = 0, i = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73bb      	strb	r3, [r7, #14]
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; // 得到偏移后的值
 8000f3a:	797b      	ldrb	r3, [r7, #5]
 8000f3c:	3b20      	subs	r3, #32
 8000f3e:	73bb      	strb	r3, [r7, #14]
	if(x > 128 - 1)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da04      	bge.n	8000f52 <OLED_Show_Char+0x3e>
	{
		x = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	3302      	adds	r3, #2
 8000f50:	71bb      	strb	r3, [r7, #6]
	}
	if(size == 16)
 8000f52:	793b      	ldrb	r3, [r7, #4]
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d154      	bne.n	8001002 <OLED_Show_Char+0xee>
	{
		OLED_Set_Position(x, y);
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ffb6 	bl	8000ed0 <OLED_Set_Position>
		for(i = 0; i < 8; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e01b      	b.n	8000fa2 <OLED_Show_Char+0x8e>
		{
			if(color_turn)
 8000f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00b      	beq.n	8000f8a <OLED_Show_Char+0x76>
			{
				OLED_Write_Data(~F8X16[c * 16 + i]);
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	011a      	lsls	r2, r3, #4
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a3c      	ldr	r2, [pc, #240]	@ (800106c <OLED_Show_Char+0x158>)
 8000f7c:	5cd3      	ldrb	r3, [r2, r3]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff10 	bl	8000da8 <OLED_Write_Data>
 8000f88:	e008      	b.n	8000f9c <OLED_Show_Char+0x88>
			}
			else
			{
				OLED_Write_Data(F8X16[c * 16 + i]);
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	011a      	lsls	r2, r3, #4
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a36      	ldr	r2, [pc, #216]	@ (800106c <OLED_Show_Char+0x158>)
 8000f94:	5cd3      	ldrb	r3, [r2, r3]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff06 	bl	8000da8 <OLED_Write_Data>
		for(i = 0; i < 8; i++)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b07      	cmp	r3, #7
 8000fa6:	d9e0      	bls.n	8000f6a <OLED_Show_Char+0x56>
			}
		}
		OLED_Set_Position(x, y + 1);
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff8c 	bl	8000ed0 <OLED_Set_Position>
		for(i = 0; i < 8; i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e01d      	b.n	8000ffa <OLED_Show_Char+0xe6>
		{
			if(color_turn)
 8000fbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00c      	beq.n	8000fe0 <OLED_Show_Char+0xcc>
			{
				OLED_Write_Data(~F8X16[c * 16 + i + 8]);
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	011a      	lsls	r2, r3, #4
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4413      	add	r3, r2
 8000fce:	3308      	adds	r3, #8
 8000fd0:	4a26      	ldr	r2, [pc, #152]	@ (800106c <OLED_Show_Char+0x158>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fee5 	bl	8000da8 <OLED_Write_Data>
 8000fde:	e009      	b.n	8000ff4 <OLED_Show_Char+0xe0>
			}
			else
			{
				OLED_Write_Data(F8X16[c * 16 + i + 8]);
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	011a      	lsls	r2, r3, #4
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3308      	adds	r3, #8
 8000fea:	4a20      	ldr	r2, [pc, #128]	@ (800106c <OLED_Show_Char+0x158>)
 8000fec:	5cd3      	ldrb	r3, [r2, r3]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff feda 	bl	8000da8 <OLED_Write_Data>
		for(i = 0; i < 8; i++)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b07      	cmp	r3, #7
 8000ffe:	d9de      	bls.n	8000fbe <OLED_Show_Char+0xaa>
			{
				OLED_Write_Data(F6x8[c][i]);
			}
		}
	}
}
 8001000:	e02f      	b.n	8001062 <OLED_Show_Char+0x14e>
		OLED_Set_Position(x, y);
 8001002:	79ba      	ldrb	r2, [r7, #6]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff61 	bl	8000ed0 <OLED_Set_Position>
		for(i = 0; i < 6; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e023      	b.n	800105c <OLED_Show_Char+0x148>
			if(color_turn)
 8001014:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00f      	beq.n	800103c <OLED_Show_Char+0x128>
				OLED_Write_Data(~F6x8[c][i]);
 800101c:	7bba      	ldrb	r2, [r7, #14]
 800101e:	7bf9      	ldrb	r1, [r7, #15]
 8001020:	4813      	ldr	r0, [pc, #76]	@ (8001070 <OLED_Show_Char+0x15c>)
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4403      	add	r3, r0
 800102c:	440b      	add	r3, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	43db      	mvns	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff feb7 	bl	8000da8 <OLED_Write_Data>
 800103a:	e00c      	b.n	8001056 <OLED_Show_Char+0x142>
				OLED_Write_Data(F6x8[c][i]);
 800103c:	7bba      	ldrb	r2, [r7, #14]
 800103e:	7bf9      	ldrb	r1, [r7, #15]
 8001040:	480b      	ldr	r0, [pc, #44]	@ (8001070 <OLED_Show_Char+0x15c>)
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4403      	add	r3, r0
 800104c:	440b      	add	r3, r1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fea9 	bl	8000da8 <OLED_Write_Data>
		for(i = 0; i < 6; i++)
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	3301      	adds	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d9d8      	bls.n	8001014 <OLED_Show_Char+0x100>
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	0800d240 	.word	0x0800d240
 8001070:	0800d018 	.word	0x0800d018

08001074 <OLED_Show_String>:

void OLED_Show_String(uint8_t x, uint8_t y, char* chr, uint8_t size, uint8_t color_turn)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b087      	sub	sp, #28
 8001078:	af02      	add	r7, sp, #8
 800107a:	603a      	str	r2, [r7, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	460b      	mov	r3, r1
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	4613      	mov	r3, r2
 8001088:	717b      	strb	r3, [r7, #5]
	uint8_t j = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]

	while(chr[j] != '\0')
 800108e:	e02f      	b.n	80010f0 <OLED_Show_String+0x7c>
	{
		OLED_Show_Char(x, y, chr[j], size, color_turn);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	797c      	ldrb	r4, [r7, #5]
 800109a:	79b9      	ldrb	r1, [r7, #6]
 800109c:	79f8      	ldrb	r0, [r7, #7]
 800109e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4623      	mov	r3, r4
 80010a6:	f7ff ff35 	bl	8000f14 <OLED_Show_Char>
		if(size == 12)
 80010aa:	797b      	ldrb	r3, [r7, #5]
 80010ac:	2b0c      	cmp	r3, #12
 80010ae:	d103      	bne.n	80010b8 <OLED_Show_String+0x44>
		{
			x += 6;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3306      	adds	r3, #6
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e002      	b.n	80010be <OLED_Show_String+0x4a>
		}
		else
		{
			x += 8;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	3308      	adds	r3, #8
 80010bc:	71fb      	strb	r3, [r7, #7]
		}
		if(x > 122 && size == 12)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b7a      	cmp	r3, #122	@ 0x7a
 80010c2:	d907      	bls.n	80010d4 <OLED_Show_String+0x60>
 80010c4:	797b      	ldrb	r3, [r7, #5]
 80010c6:	2b0c      	cmp	r3, #12
 80010c8:	d104      	bne.n	80010d4 <OLED_Show_String+0x60>
		{
			x = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
			y++;
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	3301      	adds	r3, #1
 80010d2:	71bb      	strb	r3, [r7, #6]
		}
		if(x > 120 && size == 16)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b78      	cmp	r3, #120	@ 0x78
 80010d8:	d907      	bls.n	80010ea <OLED_Show_String+0x76>
 80010da:	797b      	ldrb	r3, [r7, #5]
 80010dc:	2b10      	cmp	r3, #16
 80010de:	d104      	bne.n	80010ea <OLED_Show_String+0x76>
		{
			x = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	71fb      	strb	r3, [r7, #7]
			y++;
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	3301      	adds	r3, #1
 80010e8:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	3301      	adds	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
	while(chr[j] != '\0')
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1c9      	bne.n	8001090 <OLED_Show_String+0x1c>
	}
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}

08001106 <OLED_POW>:

unsigned int OLED_POW(uint8_t m, uint8_t n)
{
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	460a      	mov	r2, r1
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	4613      	mov	r3, r2
 8001114:	71bb      	strb	r3, [r7, #6]
	unsigned int result = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
	while(n--)result *= m;
 800111a:	e004      	b.n	8001126 <OLED_POW+0x20>
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	71ba      	strb	r2, [r7, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f5      	bne.n	800111c <OLED_POW+0x16>
	return result;
 8001130:	68fb      	ldr	r3, [r7, #12]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <OLED_Show_Num>:

void OLED_Show_Num(uint8_t x, uint8_t y, unsigned int num, uint8_t len, uint8_t size2, uint8_t color_turn)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b087      	sub	sp, #28
 8001140:	af02      	add	r7, sp, #8
 8001142:	603a      	str	r2, [r7, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	460b      	mov	r3, r1
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	4613      	mov	r3, r2
 8001150:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	73bb      	strb	r3, [r7, #14]
	for(t = 0; t < len; t++)
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e055      	b.n	8001208 <OLED_Show_Num+0xcc>
	{
		temp = (num / OLED_POW(10, len - t - 1)) % 10;
 800115c:	797a      	ldrb	r2, [r7, #5]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	3b01      	subs	r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	200a      	movs	r0, #10
 800116c:	f7ff ffcb 	bl	8001106 <OLED_POW>
 8001170:	4602      	mov	r2, r0
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	fbb3 f1f2 	udiv	r1, r3, r2
 8001178:	4b28      	ldr	r3, [pc, #160]	@ (800121c <OLED_Show_Num+0xe0>)
 800117a:	fba3 2301 	umull	r2, r3, r3, r1
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	1aca      	subs	r2, r1, r3
 800118a:	4613      	mov	r3, r2
 800118c:	737b      	strb	r3, [r7, #13]
		if(enshow == 0 && t < (len - 1))
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11f      	bne.n	80011d4 <OLED_Show_Num+0x98>
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	797b      	ldrb	r3, [r7, #5]
 8001198:	3b01      	subs	r3, #1
 800119a:	429a      	cmp	r2, r3
 800119c:	da1a      	bge.n	80011d4 <OLED_Show_Num+0x98>
		{
			if(temp == 0)
 800119e:	7b7b      	ldrb	r3, [r7, #13]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d115      	bne.n	80011d0 <OLED_Show_Num+0x94>
			{
				OLED_Show_Char(x + (size2 / 2) * t, y, ' ', size2, color_turn);
 80011a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011a8:	085b      	lsrs	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4413      	add	r3, r2
 80011b8:	b2d8      	uxtb	r0, r3
 80011ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011be:	79b9      	ldrb	r1, [r7, #6]
 80011c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	4613      	mov	r3, r2
 80011c8:	2220      	movs	r2, #32
 80011ca:	f7ff fea3 	bl	8000f14 <OLED_Show_Char>
				continue;
 80011ce:	e018      	b.n	8001202 <OLED_Show_Num+0xc6>
			}
			else
			{
				enshow = 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73bb      	strb	r3, [r7, #14]
			}
		}
	 	OLED_Show_Char(x + (size2 / 2) * t, y, temp + '0', size2, color_turn);
 80011d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011d8:	085b      	lsrs	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4413      	add	r3, r2
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	3330      	adds	r3, #48	@ 0x30
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	f897 4020 	ldrb.w	r4, [r7, #32]
 80011f4:	79b9      	ldrb	r1, [r7, #6]
 80011f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4623      	mov	r3, r4
 80011fe:	f7ff fe89 	bl	8000f14 <OLED_Show_Char>
	for(t = 0; t < len; t++)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	3301      	adds	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	797b      	ldrb	r3, [r7, #5]
 800120c:	429a      	cmp	r2, r3
 800120e:	d3a5      	bcc.n	800115c <OLED_Show_Num+0x20>
	}
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	cccccccd 	.word	0xcccccccd

08001220 <OLED_Show_Decimal>:

void OLED_Show_Decimal(uint8_t x, uint8_t y, float num, uint8_t z_len, uint8_t f_len, uint8_t size2, uint8_t color_turn)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b089      	sub	sp, #36	@ 0x24
 8001224:	af02      	add	r7, sp, #8
 8001226:	603a      	str	r2, [r7, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	460b      	mov	r3, r1
 8001230:	71bb      	strb	r3, [r7, #6]
 8001232:	4613      	mov	r3, r2
 8001234:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp, i = 0;//i为负数标志位
 8001236:	2300      	movs	r3, #0
 8001238:	75bb      	strb	r3, [r7, #22]
	uint8_t enshow;
	int z_temp, f_temp;
	if(num < 0)
 800123a:	f04f 0100 	mov.w	r1, #0
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff fd42 	bl	8000cc8 <__aeabi_fcmplt>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <OLED_Show_Decimal+0x3c>
	{
		z_len += 1;
 800124a:	797b      	ldrb	r3, [r7, #5]
 800124c:	3301      	adds	r3, #1
 800124e:	717b      	strb	r3, [r7, #5]
		i = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	75bb      	strb	r3, [r7, #22]
		num =- num;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800125a:	603b      	str	r3, [r7, #0]
	}
	z_temp = (int)num;
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff fd5b 	bl	8000d18 <__aeabi_f2iz>
 8001262:	4603      	mov	r3, r0
 8001264:	613b      	str	r3, [r7, #16]
	//整数部分
	for(t = 0; t < z_len; t++)
 8001266:	2300      	movs	r3, #0
 8001268:	75fb      	strb	r3, [r7, #23]
 800126a:	e055      	b.n	8001318 <OLED_Show_Decimal+0xf8>
	{
		temp = (z_temp / OLED_POW(10, z_len - t - 1)) % 10;
 800126c:	693c      	ldr	r4, [r7, #16]
 800126e:	797a      	ldrb	r2, [r7, #5]
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3b01      	subs	r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	200a      	movs	r0, #10
 800127e:	f7ff ff42 	bl	8001106 <OLED_POW>
 8001282:	4603      	mov	r3, r0
 8001284:	fbb4 f1f3 	udiv	r1, r4, r3
 8001288:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <OLED_Show_Decimal+0x214>)
 800128a:	fba3 2301 	umull	r2, r3, r3, r1
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	1aca      	subs	r2, r1, r3
 800129a:	4613      	mov	r3, r2
 800129c:	72fb      	strb	r3, [r7, #11]
		if(enshow == 0 && t < (z_len - 1))
 800129e:	7d7b      	ldrb	r3, [r7, #21]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11f      	bne.n	80012e4 <OLED_Show_Decimal+0xc4>
 80012a4:	7dfa      	ldrb	r2, [r7, #23]
 80012a6:	797b      	ldrb	r3, [r7, #5]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	429a      	cmp	r2, r3
 80012ac:	da1a      	bge.n	80012e4 <OLED_Show_Decimal+0xc4>
		{
			if(temp == 0)
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d115      	bne.n	80012e0 <OLED_Show_Decimal+0xc0>
			{
				OLED_Show_Char(x + (size2 / 2) * t, y, ' ', size2, color_turn);
 80012b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	7dfa      	ldrb	r2, [r7, #23]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4413      	add	r3, r2
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80012ce:	79b9      	ldrb	r1, [r7, #6]
 80012d0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	2220      	movs	r2, #32
 80012da:	f7ff fe1b 	bl	8000f14 <OLED_Show_Char>
				continue;
 80012de:	e018      	b.n	8001312 <OLED_Show_Decimal+0xf2>
			}
			else
			enshow=1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	757b      	strb	r3, [r7, #21]
		}
		OLED_Show_Char(x + (size2 / 2) * t, y, temp + '0', size2, color_turn);
 80012e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	7dfa      	ldrb	r2, [r7, #23]
 80012ee:	fb02 f303 	mul.w	r3, r2, r3
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2d8      	uxtb	r0, r3
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	3330      	adds	r3, #48	@ 0x30
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8001304:	79b9      	ldrb	r1, [r7, #6]
 8001306:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4623      	mov	r3, r4
 800130e:	f7ff fe01 	bl	8000f14 <OLED_Show_Char>
	for(t = 0; t < z_len; t++)
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	3301      	adds	r3, #1
 8001316:	75fb      	strb	r3, [r7, #23]
 8001318:	7dfa      	ldrb	r2, [r7, #23]
 800131a:	797b      	ldrb	r3, [r7, #5]
 800131c:	429a      	cmp	r2, r3
 800131e:	d3a5      	bcc.n	800126c <OLED_Show_Decimal+0x4c>
	}
	//小数点
	OLED_Show_Char(x + (size2 / 2) * (z_len), y, '.', size2, color_turn);
 8001320:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	797a      	ldrb	r2, [r7, #5]
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	b2da      	uxtb	r2, r3
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4413      	add	r3, r2
 8001334:	b2d8      	uxtb	r0, r3
 8001336:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800133a:	79b9      	ldrb	r1, [r7, #6]
 800133c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	4613      	mov	r3, r2
 8001344:	222e      	movs	r2, #46	@ 0x2e
 8001346:	f7ff fde5 	bl	8000f14 <OLED_Show_Char>

	f_temp = (int)((num-z_temp) * (OLED_POW(10, f_len)));
 800134a:	6938      	ldr	r0, [r7, #16]
 800134c:	f7ff faca 	bl	80008e4 <__aeabi_i2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	6838      	ldr	r0, [r7, #0]
 8001356:	f7ff fa0f 	bl	8000778 <__aeabi_fsub>
 800135a:	4603      	mov	r3, r0
 800135c:	461c      	mov	r4, r3
 800135e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001362:	4619      	mov	r1, r3
 8001364:	200a      	movs	r0, #10
 8001366:	f7ff fece 	bl	8001106 <OLED_POW>
 800136a:	4603      	mov	r3, r0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fab5 	bl	80008dc <__aeabi_ui2f>
 8001372:	4603      	mov	r3, r0
 8001374:	4619      	mov	r1, r3
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff fb08 	bl	800098c <__aeabi_fmul>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fcca 	bl	8000d18 <__aeabi_f2iz>
 8001384:	4603      	mov	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]
  //小数部分
	for(t = 0; t < f_len; t++)
 8001388:	2300      	movs	r3, #0
 800138a:	75fb      	strb	r3, [r7, #23]
 800138c:	e038      	b.n	8001400 <OLED_Show_Decimal+0x1e0>
	{
		temp = (f_temp / OLED_POW(10, f_len - t - 1)) % 10;
 800138e:	68fc      	ldr	r4, [r7, #12]
 8001390:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3b01      	subs	r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4619      	mov	r1, r3
 80013a0:	200a      	movs	r0, #10
 80013a2:	f7ff feb0 	bl	8001106 <OLED_POW>
 80013a6:	4603      	mov	r3, r0
 80013a8:	fbb4 f1f3 	udiv	r1, r4, r3
 80013ac:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <OLED_Show_Decimal+0x214>)
 80013ae:	fba3 2301 	umull	r2, r3, r3, r1
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	1aca      	subs	r2, r1, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	72fb      	strb	r3, [r7, #11]
		OLED_Show_Char(x + (size2 / 2) * (t + z_len) + 5, y, temp + '0', size2, color_turn);
 80013c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013c6:	085b      	lsrs	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	7df9      	ldrb	r1, [r7, #23]
 80013cc:	797a      	ldrb	r2, [r7, #5]
 80013ce:	440a      	add	r2, r1
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4413      	add	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	3305      	adds	r3, #5
 80013e0:	b2d8      	uxtb	r0, r3
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	3330      	adds	r3, #48	@ 0x30
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 80013ec:	79b9      	ldrb	r1, [r7, #6]
 80013ee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	4623      	mov	r3, r4
 80013f6:	f7ff fd8d 	bl	8000f14 <OLED_Show_Char>
	for(t = 0; t < f_len; t++)
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	3301      	adds	r3, #1
 80013fe:	75fb      	strb	r3, [r7, #23]
 8001400:	7dfa      	ldrb	r2, [r7, #23]
 8001402:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001406:	429a      	cmp	r2, r3
 8001408:	d3c1      	bcc.n	800138e <OLED_Show_Decimal+0x16e>
	}
	if(i == 1)//如果为负，就将最前的一位赋值‘-’
 800140a:	7dbb      	ldrb	r3, [r7, #22]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10c      	bne.n	800142a <OLED_Show_Decimal+0x20a>
	{
		OLED_Show_Char(x, y, '-', size2, color_turn);
 8001410:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001414:	79b9      	ldrb	r1, [r7, #6]
 8001416:	79f8      	ldrb	r0, [r7, #7]
 8001418:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	4613      	mov	r3, r2
 8001420:	222d      	movs	r2, #45	@ 0x2d
 8001422:	f7ff fd77 	bl	8000f14 <OLED_Show_Char>
		i = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	75bb      	strb	r3, [r7, #22]
	}
}
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	cccccccd 	.word	0xcccccccd

08001438 <OLED_Show_BMP>:

void OLED_Show_BMP(uint8_t bmp)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]
	uint32_t j = 0, j1 = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]

	if(bmp)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01f      	beq.n	8001494 <OLED_Show_BMP+0x5c>
	{
		for(i = 0; i < 8; i++)
 8001454:	2300      	movs	r3, #0
 8001456:	75fb      	strb	r3, [r7, #23]
 8001458:	e018      	b.n	800148c <OLED_Show_BMP+0x54>
		{
			OLED_Set_Position(0, i);
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	4619      	mov	r1, r3
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fd36 	bl	8000ed0 <OLED_Set_Position>
			for(j = 0; j < 128; j++)
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	e00a      	b.n	8001480 <OLED_Show_BMP+0x48>
			{
				OLED_Write_Data(OLED_BMP_SYS[j1++]);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <OLED_Show_BMP+0xa4>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc97 	bl	8000da8 <OLED_Write_Data>
			for(j = 0; j < 128; j++)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	3301      	adds	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b7f      	cmp	r3, #127	@ 0x7f
 8001484:	d9f1      	bls.n	800146a <OLED_Show_BMP+0x32>
		for(i = 0; i < 8; i++)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	3301      	adds	r3, #1
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b07      	cmp	r3, #7
 8001490:	d9e3      	bls.n	800145a <OLED_Show_BMP+0x22>
			{
				OLED_Write_Data(OLED_BMP_INIT[j1++]);
			}
		}
	}
}
 8001492:	e01e      	b.n	80014d2 <OLED_Show_BMP+0x9a>
		for(i = 0; i < 8; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	75fb      	strb	r3, [r7, #23]
 8001498:	e018      	b.n	80014cc <OLED_Show_BMP+0x94>
			OLED_Set_Position(0, i);
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	4619      	mov	r1, r3
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff fd16 	bl	8000ed0 <OLED_Set_Position>
			for(j = 0; j < 128; j++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	e00a      	b.n	80014c0 <OLED_Show_BMP+0x88>
				OLED_Write_Data(OLED_BMP_INIT[j1++]);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	60fa      	str	r2, [r7, #12]
 80014b0:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <OLED_Show_BMP+0xa8>)
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fc77 	bl	8000da8 <OLED_Write_Data>
			for(j = 0; j < 128; j++)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	3301      	adds	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80014c4:	d9f1      	bls.n	80014aa <OLED_Show_BMP+0x72>
		for(i = 0; i < 8; i++)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3301      	adds	r3, #1
 80014ca:	75fb      	strb	r3, [r7, #23]
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d9e3      	bls.n	800149a <OLED_Show_BMP+0x62>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	0800d820 	.word	0x0800d820
 80014e0:	0800dc20 	.word	0x0800dc20

080014e4 <OLED_Show_StartMenu>:

void OLED_Show_StartMenu(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af04      	add	r7, sp, #16
	OLED_Show_String(0, 0, "Output", 16, 0);
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2310      	movs	r3, #16
 80014f0:	4a6f      	ldr	r2, [pc, #444]	@ (80016b0 <OLED_Show_StartMenu+0x1cc>)
 80014f2:	2100      	movs	r1, #0
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fdbd 	bl	8001074 <OLED_Show_String>
	OLED_Show_Decimal(0, 2, VCC19V5_VADC, 4, 1, 16, 0);
 80014fa:	4b6e      	ldr	r3, [pc, #440]	@ (80016b4 <OLED_Show_StartMenu+0x1d0>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	2310      	movs	r3, #16
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	2301      	movs	r3, #1
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2304      	movs	r3, #4
 800150c:	2102      	movs	r1, #2
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fe86 	bl	8001220 <OLED_Show_Decimal>
	OLED_Show_String(48, 2, "V", 16, 0);
 8001514:	2300      	movs	r3, #0
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2310      	movs	r3, #16
 800151a:	4a67      	ldr	r2, [pc, #412]	@ (80016b8 <OLED_Show_StartMenu+0x1d4>)
 800151c:	2102      	movs	r1, #2
 800151e:	2030      	movs	r0, #48	@ 0x30
 8001520:	f7ff fda8 	bl	8001074 <OLED_Show_String>
	OLED_Show_Decimal(0, 4, VCC19V5_IADC, 4, 1, 16, 0);
 8001524:	4b65      	ldr	r3, [pc, #404]	@ (80016bc <OLED_Show_StartMenu+0x1d8>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2300      	movs	r3, #0
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2310      	movs	r3, #16
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2301      	movs	r3, #1
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2304      	movs	r3, #4
 8001536:	2104      	movs	r1, #4
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fe71 	bl	8001220 <OLED_Show_Decimal>
	OLED_Show_String(48, 4, "A", 16, 0);
 800153e:	2300      	movs	r3, #0
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2310      	movs	r3, #16
 8001544:	4a5e      	ldr	r2, [pc, #376]	@ (80016c0 <OLED_Show_StartMenu+0x1dc>)
 8001546:	2104      	movs	r1, #4
 8001548:	2030      	movs	r0, #48	@ 0x30
 800154a:	f7ff fd93 	bl	8001074 <OLED_Show_String>
	OLED_Show_Decimal(0, 6, Output_19V5_Power, 4, 1, 16, 0);
 800154e:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <OLED_Show_StartMenu+0x1e0>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	2310      	movs	r3, #16
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	2301      	movs	r3, #1
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2304      	movs	r3, #4
 8001560:	2106      	movs	r1, #6
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fe5c 	bl	8001220 <OLED_Show_Decimal>
	OLED_Show_String(48, 6, "W", 16, 0);
 8001568:	2300      	movs	r3, #0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2310      	movs	r3, #16
 800156e:	4a56      	ldr	r2, [pc, #344]	@ (80016c8 <OLED_Show_StartMenu+0x1e4>)
 8001570:	2106      	movs	r1, #6
 8001572:	2030      	movs	r0, #48	@ 0x30
 8001574:	f7ff fd7e 	bl	8001074 <OLED_Show_String>

	OLED_Show_String(64, 0, "Vin", 12, 0);
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	230c      	movs	r3, #12
 800157e:	4a53      	ldr	r2, [pc, #332]	@ (80016cc <OLED_Show_StartMenu+0x1e8>)
 8001580:	2100      	movs	r1, #0
 8001582:	2040      	movs	r0, #64	@ 0x40
 8001584:	f7ff fd76 	bl	8001074 <OLED_Show_String>
	// OLED_Show_Decimal(90, 0, (float*)PMBUS_Recv_Buf_PSMI_0x08, 4, 1, 12, 0);

	OLED_Show_String(64, 1, "Fan", 12, 0);
 8001588:	2300      	movs	r3, #0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	230c      	movs	r3, #12
 800158e:	4a50      	ldr	r2, [pc, #320]	@ (80016d0 <OLED_Show_StartMenu+0x1ec>)
 8001590:	2101      	movs	r1, #1
 8001592:	2040      	movs	r0, #64	@ 0x40
 8001594:	f7ff fd6e 	bl	8001074 <OLED_Show_String>
	OLED_Show_Num(95, 1, SYS_FAN_Speed, 5, 12, 0);
 8001598:	4b4e      	ldr	r3, [pc, #312]	@ (80016d4 <OLED_Show_StartMenu+0x1f0>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	230c      	movs	r3, #12
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2305      	movs	r3, #5
 80015a6:	2101      	movs	r1, #1
 80015a8:	205f      	movs	r0, #95	@ 0x5f
 80015aa:	f7ff fdc7 	bl	800113c <OLED_Show_Num>

	OLED_Show_String(64, 2, "T1", 12, 0);
 80015ae:	2300      	movs	r3, #0
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	230c      	movs	r3, #12
 80015b4:	4a48      	ldr	r2, [pc, #288]	@ (80016d8 <OLED_Show_StartMenu+0x1f4>)
 80015b6:	2102      	movs	r1, #2
 80015b8:	2040      	movs	r0, #64	@ 0x40
 80015ba:	f7ff fd5b 	bl	8001074 <OLED_Show_String>
	OLED_Show_Decimal(90, 2, T_FRONT, 4, 1, 12, 0);
 80015be:	4b47      	ldr	r3, [pc, #284]	@ (80016dc <OLED_Show_StartMenu+0x1f8>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	230c      	movs	r3, #12
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2304      	movs	r3, #4
 80015d0:	2102      	movs	r1, #2
 80015d2:	205a      	movs	r0, #90	@ 0x5a
 80015d4:	f7ff fe24 	bl	8001220 <OLED_Show_Decimal>

	OLED_Show_String(64, 3, "T2", 12, 0);
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	230c      	movs	r3, #12
 80015de:	4a40      	ldr	r2, [pc, #256]	@ (80016e0 <OLED_Show_StartMenu+0x1fc>)
 80015e0:	2103      	movs	r1, #3
 80015e2:	2040      	movs	r0, #64	@ 0x40
 80015e4:	f7ff fd46 	bl	8001074 <OLED_Show_String>
	OLED_Show_Decimal(90, 3, T_REAR, 4, 1, 12, 0);
 80015e8:	4b3e      	ldr	r3, [pc, #248]	@ (80016e4 <OLED_Show_StartMenu+0x200>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	230c      	movs	r3, #12
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	2301      	movs	r3, #1
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2304      	movs	r3, #4
 80015fa:	2103      	movs	r1, #3
 80015fc:	205a      	movs	r0, #90	@ 0x5a
 80015fe:	f7ff fe0f 	bl	8001220 <OLED_Show_Decimal>

	OLED_Show_String(64, 4, "T3", 12, 0);
 8001602:	2300      	movs	r3, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	230c      	movs	r3, #12
 8001608:	4a37      	ldr	r2, [pc, #220]	@ (80016e8 <OLED_Show_StartMenu+0x204>)
 800160a:	2104      	movs	r1, #4
 800160c:	2040      	movs	r0, #64	@ 0x40
 800160e:	f7ff fd31 	bl	8001074 <OLED_Show_String>
	OLED_Show_Decimal(90, 4, T_BOOST, 4, 1, 12, 0);
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <OLED_Show_StartMenu+0x208>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230c      	movs	r3, #12
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2301      	movs	r3, #1
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	2104      	movs	r1, #4
 8001626:	205a      	movs	r0, #90	@ 0x5a
 8001628:	f7ff fdfa 	bl	8001220 <OLED_Show_Decimal>

	OLED_Show_String(64, 5, "T4", 12, 0);
 800162c:	2300      	movs	r3, #0
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	230c      	movs	r3, #12
 8001632:	4a2f      	ldr	r2, [pc, #188]	@ (80016f0 <OLED_Show_StartMenu+0x20c>)
 8001634:	2105      	movs	r1, #5
 8001636:	2040      	movs	r0, #64	@ 0x40
 8001638:	f7ff fd1c 	bl	8001074 <OLED_Show_String>
	OLED_Show_Decimal(90, 5, T_IN, 4, 1, 12, 0);
 800163c:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <OLED_Show_StartMenu+0x210>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	230c      	movs	r3, #12
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2301      	movs	r3, #1
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2304      	movs	r3, #4
 800164e:	2105      	movs	r1, #5
 8001650:	205a      	movs	r0, #90	@ 0x5a
 8001652:	f7ff fde5 	bl	8001220 <OLED_Show_Decimal>

	OLED_Show_String(64, 6, "Vref", 12, 0);
 8001656:	2300      	movs	r3, #0
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	230c      	movs	r3, #12
 800165c:	4a26      	ldr	r2, [pc, #152]	@ (80016f8 <OLED_Show_StartMenu+0x214>)
 800165e:	2106      	movs	r1, #6
 8001660:	2040      	movs	r0, #64	@ 0x40
 8001662:	f7ff fd07 	bl	8001074 <OLED_Show_String>
	OLED_Show_Decimal(90, 6, Vref_IN, 4, 1, 12, 0);
 8001666:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <OLED_Show_StartMenu+0x218>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	230c      	movs	r3, #12
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2301      	movs	r3, #1
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2304      	movs	r3, #4
 8001678:	2106      	movs	r1, #6
 800167a:	205a      	movs	r0, #90	@ 0x5a
 800167c:	f7ff fdd0 	bl	8001220 <OLED_Show_Decimal>

	OLED_Show_String(64, 7, "PSON  ", 12, 1);
 8001680:	2301      	movs	r3, #1
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	230c      	movs	r3, #12
 8001686:	4a1e      	ldr	r2, [pc, #120]	@ (8001700 <OLED_Show_StartMenu+0x21c>)
 8001688:	2107      	movs	r1, #7
 800168a:	2040      	movs	r0, #64	@ 0x40
 800168c:	f7ff fcf2 	bl	8001074 <OLED_Show_String>
	OLED_Show_Num(95, 7, SYS_Power_State, 5, 12, 1);
 8001690:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <OLED_Show_StartMenu+0x220>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	2301      	movs	r3, #1
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	230c      	movs	r3, #12
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2305      	movs	r3, #5
 80016a0:	2107      	movs	r1, #7
 80016a2:	205f      	movs	r0, #95	@ 0x5f
 80016a4:	f7ff fd4a 	bl	800113c <OLED_Show_Num>
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	0800cf04 	.word	0x0800cf04
 80016b4:	200004f0 	.word	0x200004f0
 80016b8:	0800cf0c 	.word	0x0800cf0c
 80016bc:	200004f4 	.word	0x200004f4
 80016c0:	0800cf10 	.word	0x0800cf10
 80016c4:	200004f8 	.word	0x200004f8
 80016c8:	0800cf14 	.word	0x0800cf14
 80016cc:	0800cf18 	.word	0x0800cf18
 80016d0:	0800cf1c 	.word	0x0800cf1c
 80016d4:	20000524 	.word	0x20000524
 80016d8:	0800cf20 	.word	0x0800cf20
 80016dc:	20000514 	.word	0x20000514
 80016e0:	0800cf24 	.word	0x0800cf24
 80016e4:	20000510 	.word	0x20000510
 80016e8:	0800cf28 	.word	0x0800cf28
 80016ec:	2000050c 	.word	0x2000050c
 80016f0:	0800cf2c 	.word	0x0800cf2c
 80016f4:	20000518 	.word	0x20000518
 80016f8:	0800cf30 	.word	0x0800cf30
 80016fc:	2000051c 	.word	0x2000051c
 8001700:	0800cf38 	.word	0x0800cf38
 8001704:	200003a8 	.word	0x200003a8

08001708 <PS_Power_Control>:

void PS_Power_Control(uint8_t state) // PSON控制
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	if(state)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d009      	beq.n	800172c <PS_Power_Control+0x24>
	{
		HAL_GPIO_WritePin(PSON_CTRL_GPIO_Port, PSON_CTRL_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800171e:	480a      	ldr	r0, [pc, #40]	@ (8001748 <PS_Power_Control+0x40>)
 8001720:	f002 fbe6 	bl	8003ef0 <HAL_GPIO_WritePin>
		SYS_Power_State = 1;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <PS_Power_Control+0x44>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_GPIO_WritePin(PSON_CTRL_GPIO_Port, PSON_CTRL_Pin, GPIO_PIN_RESET);
		SYS_Power_State = 0;
	}
}
 800172a:	e008      	b.n	800173e <PS_Power_Control+0x36>
		HAL_GPIO_WritePin(PSON_CTRL_GPIO_Port, PSON_CTRL_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <PS_Power_Control+0x40>)
 8001734:	f002 fbdc 	bl	8003ef0 <HAL_GPIO_WritePin>
		SYS_Power_State = 0;
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <PS_Power_Control+0x44>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40010800 	.word	0x40010800
 800174c:	200003a8 	.word	0x200003a8

08001750 <PMBUS_Read_PSMI>:

void PMBUS_Read_PSMI(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x04, 2, PMBUS_Recv_Buf_PSMI_0x04, 1, 10);
 8001756:	230a      	movs	r3, #10
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2301      	movs	r3, #1
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <PMBUS_Read_PSMI+0x114>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2302      	movs	r3, #2
 8001764:	2204      	movs	r2, #4
 8001766:	21b0      	movs	r1, #176	@ 0xb0
 8001768:	483f      	ldr	r0, [pc, #252]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 800176a:	f002 fe53 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x1A, 1, PMBUS_Recv_Buf_PSMI_0x1A, 1, 10);
 800176e:	230a      	movs	r3, #10
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2301      	movs	r3, #1
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <PMBUS_Read_PSMI+0x11c>)
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	221a      	movs	r2, #26
 800177e:	21b0      	movs	r1, #176	@ 0xb0
 8001780:	4839      	ldr	r0, [pc, #228]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 8001782:	f002 fe47 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x98, 1, PMBUS_Recv_Buf_PSMI_0x98, 1, 10);
 8001786:	230a      	movs	r3, #10
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2301      	movs	r3, #1
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <PMBUS_Read_PSMI+0x120>)
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	2298      	movs	r2, #152	@ 0x98
 8001796:	21b0      	movs	r1, #176	@ 0xb0
 8001798:	4833      	ldr	r0, [pc, #204]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 800179a:	f002 fe3b 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x0E, 1, PMBUS_Recv_Buf_PSMI_0x0E, 1, 10);
 800179e:	230a      	movs	r3, #10
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2301      	movs	r3, #1
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	4b33      	ldr	r3, [pc, #204]	@ (8001874 <PMBUS_Read_PSMI+0x124>)
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	220e      	movs	r2, #14
 80017ae:	21b0      	movs	r1, #176	@ 0xb0
 80017b0:	482d      	ldr	r0, [pc, #180]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 80017b2:	f002 fe2f 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x10, 1, PMBUS_Recv_Buf_PSMI_0x10, 1, 10);
 80017b6:	230a      	movs	r3, #10
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2301      	movs	r3, #1
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <PMBUS_Read_PSMI+0x128>)
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2301      	movs	r3, #1
 80017c4:	2210      	movs	r2, #16
 80017c6:	21b0      	movs	r1, #176	@ 0xb0
 80017c8:	4827      	ldr	r0, [pc, #156]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 80017ca:	f002 fe23 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x08, 1, PMBUS_Recv_Buf_PSMI_0x08, 1, 10);
 80017ce:	230a      	movs	r3, #10
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2301      	movs	r3, #1
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	4b29      	ldr	r3, [pc, #164]	@ (800187c <PMBUS_Read_PSMI+0x12c>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	2208      	movs	r2, #8
 80017de:	21b0      	movs	r1, #176	@ 0xb0
 80017e0:	4821      	ldr	r0, [pc, #132]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 80017e2:	f002 fe17 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x0C, 1, PMBUS_Recv_Buf_PSMI_0x0C, 1, 10);
 80017e6:	230a      	movs	r3, #10
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	2301      	movs	r3, #1
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <PMBUS_Read_PSMI+0x130>)
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	220c      	movs	r2, #12
 80017f6:	21b0      	movs	r1, #176	@ 0xb0
 80017f8:	481b      	ldr	r0, [pc, #108]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 80017fa:	f002 fe0b 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x12, 1, PMBUS_Recv_Buf_PSMI_0x12, 1, 10);
 80017fe:	230a      	movs	r3, #10
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2301      	movs	r3, #1
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <PMBUS_Read_PSMI+0x134>)
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	2212      	movs	r2, #18
 800180e:	21b0      	movs	r1, #176	@ 0xb0
 8001810:	4815      	ldr	r0, [pc, #84]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 8001812:	f002 fdff 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x1E, 1, PMBUS_Recv_Buf_PSMI_0x1E, 1, 10);
 8001816:	230a      	movs	r3, #10
 8001818:	9302      	str	r3, [sp, #8]
 800181a:	2301      	movs	r3, #1
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <PMBUS_Read_PSMI+0x138>)
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2301      	movs	r3, #1
 8001824:	221e      	movs	r2, #30
 8001826:	21b0      	movs	r1, #176	@ 0xb0
 8001828:	480f      	ldr	r0, [pc, #60]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 800182a:	f002 fdf3 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x00, 2, PMBUS_Recv_Buf_PSMI_0x00, 1, 10);
 800182e:	230a      	movs	r3, #10
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	2301      	movs	r3, #1
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <PMBUS_Read_PSMI+0x13c>)
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2302      	movs	r3, #2
 800183c:	2200      	movs	r2, #0
 800183e:	21b0      	movs	r1, #176	@ 0xb0
 8001840:	4809      	ldr	r0, [pc, #36]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 8001842:	f002 fde7 	bl	8004414 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_MCU_ADDRESS, 0x02, 2, PMBUS_Recv_Buf_PSMI_0x02, 1, 10);
 8001846:	230a      	movs	r3, #10
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	2301      	movs	r3, #1
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <PMBUS_Read_PSMI+0x140>)
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2302      	movs	r3, #2
 8001854:	2202      	movs	r2, #2
 8001856:	21b0      	movs	r1, #176	@ 0xb0
 8001858:	4803      	ldr	r0, [pc, #12]	@ (8001868 <PMBUS_Read_PSMI+0x118>)
 800185a:	f002 fddb 	bl	8004414 <HAL_I2C_Mem_Read>
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200003ac 	.word	0x200003ac
 8001868:	2000020c 	.word	0x2000020c
 800186c:	200003b0 	.word	0x200003b0
 8001870:	200003b4 	.word	0x200003b4
 8001874:	200003b8 	.word	0x200003b8
 8001878:	200003bc 	.word	0x200003bc
 800187c:	200003c0 	.word	0x200003c0
 8001880:	200003c4 	.word	0x200003c4
 8001884:	200003c8 	.word	0x200003c8
 8001888:	200003cc 	.word	0x200003cc
 800188c:	200003d0 	.word	0x200003d0
 8001890:	200003d4 	.word	0x200003d4

08001894 <PMBUS_Read_FRU>:

void PMBUS_Read_FRU(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, PMBUS_EEPROM_ADDRESS, 0xA1, 255, PMBUS_Recv_Buf_FRU, 1, 10);
 800189a:	230a      	movs	r3, #10
 800189c:	9302      	str	r3, [sp, #8]
 800189e:	2301      	movs	r3, #1
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <PMBUS_Read_FRU+0x24>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	23ff      	movs	r3, #255	@ 0xff
 80018a8:	22a1      	movs	r2, #161	@ 0xa1
 80018aa:	21a0      	movs	r1, #160	@ 0xa0
 80018ac:	4803      	ldr	r0, [pc, #12]	@ (80018bc <PMBUS_Read_FRU+0x28>)
 80018ae:	f002 fdb1 	bl	8004414 <HAL_I2C_Mem_Read>
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200003d8 	.word	0x200003d8
 80018bc:	2000020c 	.word	0x2000020c

080018c0 <USB_CDC_Transmit_PMBUS_PSMI>:

void USB_CDC_Transmit_PMBUS_PSMI(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	CDC_Transmit_FS("\n", 1);
 80018c4:	2101      	movs	r1, #1
 80018c6:	48a5      	ldr	r0, [pc, #660]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 80018c8:	f00a ff06 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f001 f9f1 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("PMBUS_PSMI", 10);
 80018d2:	210a      	movs	r1, #10
 80018d4:	48a2      	ldr	r0, [pc, #648]	@ (8001b60 <USB_CDC_Transmit_PMBUS_PSMI+0x2a0>)
 80018d6:	f00a feff 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f001 f9ea 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 80018e0:	2101      	movs	r1, #1
 80018e2:	489e      	ldr	r0, [pc, #632]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 80018e4:	f00a fef8 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f001 f9e3 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x04", 4);
 80018ee:	2104      	movs	r1, #4
 80018f0:	489c      	ldr	r0, [pc, #624]	@ (8001b64 <USB_CDC_Transmit_PMBUS_PSMI+0x2a4>)
 80018f2:	f00a fef1 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f001 f9dc 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 80018fc:	2101      	movs	r1, #1
 80018fe:	4897      	ldr	r0, [pc, #604]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001900:	f00a feea 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001904:	2001      	movs	r0, #1
 8001906:	f001 f9d5 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x04, 2);
 800190a:	2102      	movs	r1, #2
 800190c:	4896      	ldr	r0, [pc, #600]	@ (8001b68 <USB_CDC_Transmit_PMBUS_PSMI+0x2a8>)
 800190e:	f00a fee3 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f001 f9ce 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001918:	2101      	movs	r1, #1
 800191a:	4890      	ldr	r0, [pc, #576]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 800191c:	f00a fedc 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001920:	2001      	movs	r0, #1
 8001922:	f001 f9c7 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x1A", 4);
 8001926:	2104      	movs	r1, #4
 8001928:	4890      	ldr	r0, [pc, #576]	@ (8001b6c <USB_CDC_Transmit_PMBUS_PSMI+0x2ac>)
 800192a:	f00a fed5 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f001 f9c0 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001934:	2101      	movs	r1, #1
 8001936:	4889      	ldr	r0, [pc, #548]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001938:	f00a fece 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 800193c:	2001      	movs	r0, #1
 800193e:	f001 f9b9 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x1A, 1);
 8001942:	2101      	movs	r1, #1
 8001944:	488a      	ldr	r0, [pc, #552]	@ (8001b70 <USB_CDC_Transmit_PMBUS_PSMI+0x2b0>)
 8001946:	f00a fec7 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f001 f9b2 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001950:	2101      	movs	r1, #1
 8001952:	4882      	ldr	r0, [pc, #520]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001954:	f00a fec0 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f001 f9ab 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x98", 4);
 800195e:	2104      	movs	r1, #4
 8001960:	4884      	ldr	r0, [pc, #528]	@ (8001b74 <USB_CDC_Transmit_PMBUS_PSMI+0x2b4>)
 8001962:	f00a feb9 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001966:	2001      	movs	r0, #1
 8001968:	f001 f9a4 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 800196c:	2101      	movs	r1, #1
 800196e:	487b      	ldr	r0, [pc, #492]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001970:	f00a feb2 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f001 f99d 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x98, 1);
 800197a:	2101      	movs	r1, #1
 800197c:	487e      	ldr	r0, [pc, #504]	@ (8001b78 <USB_CDC_Transmit_PMBUS_PSMI+0x2b8>)
 800197e:	f00a feab 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001982:	2001      	movs	r0, #1
 8001984:	f001 f996 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001988:	2101      	movs	r1, #1
 800198a:	4874      	ldr	r0, [pc, #464]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 800198c:	f00a fea4 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f001 f98f 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x0E", 4);
 8001996:	2104      	movs	r1, #4
 8001998:	4878      	ldr	r0, [pc, #480]	@ (8001b7c <USB_CDC_Transmit_PMBUS_PSMI+0x2bc>)
 800199a:	f00a fe9d 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 800199e:	2001      	movs	r0, #1
 80019a0:	f001 f988 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 80019a4:	2101      	movs	r1, #1
 80019a6:	486d      	ldr	r0, [pc, #436]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 80019a8:	f00a fe96 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f001 f981 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x0E, 1);
 80019b2:	2101      	movs	r1, #1
 80019b4:	4872      	ldr	r0, [pc, #456]	@ (8001b80 <USB_CDC_Transmit_PMBUS_PSMI+0x2c0>)
 80019b6:	f00a fe8f 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f001 f97a 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 80019c0:	2101      	movs	r1, #1
 80019c2:	4866      	ldr	r0, [pc, #408]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 80019c4:	f00a fe88 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f001 f973 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x10", 4);
 80019ce:	2104      	movs	r1, #4
 80019d0:	486c      	ldr	r0, [pc, #432]	@ (8001b84 <USB_CDC_Transmit_PMBUS_PSMI+0x2c4>)
 80019d2:	f00a fe81 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f001 f96c 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 80019dc:	2101      	movs	r1, #1
 80019de:	485f      	ldr	r0, [pc, #380]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 80019e0:	f00a fe7a 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f001 f965 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x10, 1);
 80019ea:	2101      	movs	r1, #1
 80019ec:	4866      	ldr	r0, [pc, #408]	@ (8001b88 <USB_CDC_Transmit_PMBUS_PSMI+0x2c8>)
 80019ee:	f00a fe73 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f001 f95e 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 80019f8:	2101      	movs	r1, #1
 80019fa:	4858      	ldr	r0, [pc, #352]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 80019fc:	f00a fe6c 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f001 f957 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x08", 4);
 8001a06:	2104      	movs	r1, #4
 8001a08:	4860      	ldr	r0, [pc, #384]	@ (8001b8c <USB_CDC_Transmit_PMBUS_PSMI+0x2cc>)
 8001a0a:	f00a fe65 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f001 f950 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001a14:	2101      	movs	r1, #1
 8001a16:	4851      	ldr	r0, [pc, #324]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001a18:	f00a fe5e 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f001 f949 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x08, 1);
 8001a22:	2101      	movs	r1, #1
 8001a24:	485a      	ldr	r0, [pc, #360]	@ (8001b90 <USB_CDC_Transmit_PMBUS_PSMI+0x2d0>)
 8001a26:	f00a fe57 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f001 f942 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	484a      	ldr	r0, [pc, #296]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001a34:	f00a fe50 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f001 f93b 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x0C", 4);
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4854      	ldr	r0, [pc, #336]	@ (8001b94 <USB_CDC_Transmit_PMBUS_PSMI+0x2d4>)
 8001a42:	f00a fe49 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f001 f934 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4843      	ldr	r0, [pc, #268]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001a50:	f00a fe42 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f001 f92d 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x0C, 1);
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	484e      	ldr	r0, [pc, #312]	@ (8001b98 <USB_CDC_Transmit_PMBUS_PSMI+0x2d8>)
 8001a5e:	f00a fe3b 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f001 f926 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	483c      	ldr	r0, [pc, #240]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001a6c:	f00a fe34 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f001 f91f 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x12", 4);
 8001a76:	2104      	movs	r1, #4
 8001a78:	4848      	ldr	r0, [pc, #288]	@ (8001b9c <USB_CDC_Transmit_PMBUS_PSMI+0x2dc>)
 8001a7a:	f00a fe2d 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f001 f918 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001a84:	2101      	movs	r1, #1
 8001a86:	4835      	ldr	r0, [pc, #212]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001a88:	f00a fe26 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f001 f911 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x12, 1);
 8001a92:	2101      	movs	r1, #1
 8001a94:	4842      	ldr	r0, [pc, #264]	@ (8001ba0 <USB_CDC_Transmit_PMBUS_PSMI+0x2e0>)
 8001a96:	f00a fe1f 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f001 f90a 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	482e      	ldr	r0, [pc, #184]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001aa4:	f00a fe18 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f001 f903 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x1E", 4);
 8001aae:	2104      	movs	r1, #4
 8001ab0:	483c      	ldr	r0, [pc, #240]	@ (8001ba4 <USB_CDC_Transmit_PMBUS_PSMI+0x2e4>)
 8001ab2:	f00a fe11 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f001 f8fc 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001abc:	2101      	movs	r1, #1
 8001abe:	4827      	ldr	r0, [pc, #156]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001ac0:	f00a fe0a 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f001 f8f5 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x1E, 1);
 8001aca:	2101      	movs	r1, #1
 8001acc:	4836      	ldr	r0, [pc, #216]	@ (8001ba8 <USB_CDC_Transmit_PMBUS_PSMI+0x2e8>)
 8001ace:	f00a fe03 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f001 f8ee 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4820      	ldr	r0, [pc, #128]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001adc:	f00a fdfc 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f001 f8e7 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x00", 4);
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	4830      	ldr	r0, [pc, #192]	@ (8001bac <USB_CDC_Transmit_PMBUS_PSMI+0x2ec>)
 8001aea:	f00a fdf5 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f001 f8e0 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001af4:	2101      	movs	r1, #1
 8001af6:	4819      	ldr	r0, [pc, #100]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001af8:	f00a fdee 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f001 f8d9 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x00, 2);
 8001b02:	2102      	movs	r1, #2
 8001b04:	482a      	ldr	r0, [pc, #168]	@ (8001bb0 <USB_CDC_Transmit_PMBUS_PSMI+0x2f0>)
 8001b06:	f00a fde7 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f001 f8d2 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001b10:	2101      	movs	r1, #1
 8001b12:	4812      	ldr	r0, [pc, #72]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001b14:	f00a fde0 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f001 f8cb 	bl	8002cb4 <HAL_Delay>

	CDC_Transmit_FS("0x02", 4);
 8001b1e:	2104      	movs	r1, #4
 8001b20:	4824      	ldr	r0, [pc, #144]	@ (8001bb4 <USB_CDC_Transmit_PMBUS_PSMI+0x2f4>)
 8001b22:	f00a fdd9 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f001 f8c4 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001b30:	f00a fdd2 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f001 f8bd 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS(PMBUS_Recv_Buf_PSMI_0x02, 2);
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	481e      	ldr	r0, [pc, #120]	@ (8001bb8 <USB_CDC_Transmit_PMBUS_PSMI+0x2f8>)
 8001b3e:	f00a fdcb 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f001 f8b6 	bl	8002cb4 <HAL_Delay>
	CDC_Transmit_FS("\n", 1);
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <USB_CDC_Transmit_PMBUS_PSMI+0x29c>)
 8001b4c:	f00a fdc4 	bl	800c6d8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f001 f8af 	bl	8002cb4 <HAL_Delay>
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	0800cf40 	.word	0x0800cf40
 8001b60:	0800cf44 	.word	0x0800cf44
 8001b64:	0800cf50 	.word	0x0800cf50
 8001b68:	200003ac 	.word	0x200003ac
 8001b6c:	0800cf58 	.word	0x0800cf58
 8001b70:	200003b0 	.word	0x200003b0
 8001b74:	0800cf60 	.word	0x0800cf60
 8001b78:	200003b4 	.word	0x200003b4
 8001b7c:	0800cf68 	.word	0x0800cf68
 8001b80:	200003b8 	.word	0x200003b8
 8001b84:	0800cf70 	.word	0x0800cf70
 8001b88:	200003bc 	.word	0x200003bc
 8001b8c:	0800cf78 	.word	0x0800cf78
 8001b90:	200003c0 	.word	0x200003c0
 8001b94:	0800cf80 	.word	0x0800cf80
 8001b98:	200003c4 	.word	0x200003c4
 8001b9c:	0800cf88 	.word	0x0800cf88
 8001ba0:	200003c8 	.word	0x200003c8
 8001ba4:	0800cf90 	.word	0x0800cf90
 8001ba8:	200003cc 	.word	0x200003cc
 8001bac:	0800cf98 	.word	0x0800cf98
 8001bb0:	200003d0 	.word	0x200003d0
 8001bb4:	0800cfa0 	.word	0x0800cfa0
 8001bb8:	200003d4 	.word	0x200003d4

08001bbc <USB_CDC_Transmit_SYS_Status>:
	CDC_Transmit_FS("\n", 1);
	HAL_Delay(1);
}

void USB_CDC_Transmit_SYS_Status(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	USB_CDC_Transmit_PMBUS_PSMI();
 8001bc0:	f7ff fe7e 	bl	80018c0 <USB_CDC_Transmit_PMBUS_PSMI>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <SYS_LED_Control_Run>:
 * 3 = 常亮
 *
 * 注意：关闭是GPIO_PIN_SET, 打开是GPIO_PIN_RESET
 */
void SYS_LED_Control_Run(uint8_t state)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	if(state == 1)
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d108      	bne.n	8001bea <SYS_LED_Control_Run+0x22>
	{
		HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
 8001bd8:	2180      	movs	r1, #128	@ 0x80
 8001bda:	4813      	ldr	r0, [pc, #76]	@ (8001c28 <SYS_LED_Control_Run+0x60>)
 8001bdc:	f002 f9a0 	bl	8003f20 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001be0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be4:	f001 f866 	bl	8002cb4 <HAL_Delay>
	}
	else
	{
		HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_SET);
	}
}
 8001be8:	e019      	b.n	8001c1e <SYS_LED_Control_Run+0x56>
	else if(state == 2)
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d108      	bne.n	8001c02 <SYS_LED_Control_Run+0x3a>
		HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
 8001bf0:	2180      	movs	r1, #128	@ 0x80
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <SYS_LED_Control_Run+0x60>)
 8001bf4:	f002 f994 	bl	8003f20 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001bf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bfc:	f001 f85a 	bl	8002cb4 <HAL_Delay>
}
 8001c00:	e00d      	b.n	8001c1e <SYS_LED_Control_Run+0x56>
	else if(state == 3)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d105      	bne.n	8001c14 <SYS_LED_Control_Run+0x4c>
		HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2180      	movs	r1, #128	@ 0x80
 8001c0c:	4806      	ldr	r0, [pc, #24]	@ (8001c28 <SYS_LED_Control_Run+0x60>)
 8001c0e:	f002 f96f 	bl	8003ef0 <HAL_GPIO_WritePin>
}
 8001c12:	e004      	b.n	8001c1e <SYS_LED_Control_Run+0x56>
		HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <SYS_LED_Control_Run+0x60>)
 8001c1a:	f002 f969 	bl	8003ef0 <HAL_GPIO_WritePin>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40010c00 	.word	0x40010c00

08001c2c <SYS_LED_Control_Fault>:

void SYS_LED_Control_Fault(uint8_t state)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	if(state == 1)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d108      	bne.n	8001c4e <SYS_LED_Control_Fault+0x22>
	{
		HAL_GPIO_TogglePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin);
 8001c3c:	2140      	movs	r1, #64	@ 0x40
 8001c3e:	4813      	ldr	r0, [pc, #76]	@ (8001c8c <SYS_LED_Control_Fault+0x60>)
 8001c40:	f002 f96e 	bl	8003f20 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001c44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c48:	f001 f834 	bl	8002cb4 <HAL_Delay>
	}
	else
	{
		HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_SET);
	}
}
 8001c4c:	e019      	b.n	8001c82 <SYS_LED_Control_Fault+0x56>
	else if(state == 2)
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d108      	bne.n	8001c66 <SYS_LED_Control_Fault+0x3a>
		HAL_GPIO_TogglePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin);
 8001c54:	2140      	movs	r1, #64	@ 0x40
 8001c56:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <SYS_LED_Control_Fault+0x60>)
 8001c58:	f002 f962 	bl	8003f20 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001c5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c60:	f001 f828 	bl	8002cb4 <HAL_Delay>
}
 8001c64:	e00d      	b.n	8001c82 <SYS_LED_Control_Fault+0x56>
	else if(state == 3)
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d105      	bne.n	8001c78 <SYS_LED_Control_Fault+0x4c>
		HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2140      	movs	r1, #64	@ 0x40
 8001c70:	4806      	ldr	r0, [pc, #24]	@ (8001c8c <SYS_LED_Control_Fault+0x60>)
 8001c72:	f002 f93d 	bl	8003ef0 <HAL_GPIO_WritePin>
}
 8001c76:	e004      	b.n	8001c82 <SYS_LED_Control_Fault+0x56>
		HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2140      	movs	r1, #64	@ 0x40
 8001c7c:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <SYS_LED_Control_Fault+0x60>)
 8001c7e:	f002 f937 	bl	8003ef0 <HAL_GPIO_WritePin>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40010c00 	.word	0x40010c00

08001c90 <SYS_ADC_Convert_Value>:

void SYS_ADC_Convert_Value(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	VCC12V_SYS_VADC = (float)ADC_Value[0] * Vref_IN / 4096;
 8001c94:	4b78      	ldr	r3, [pc, #480]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fe1f 	bl	80008dc <__aeabi_ui2f>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b76      	ldr	r3, [pc, #472]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f7fe fe70 	bl	800098c <__aeabi_fmul>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe ff1e 	bl	8000af4 <__aeabi_fdiv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b70      	ldr	r3, [pc, #448]	@ (8001e80 <SYS_ADC_Convert_Value+0x1f0>)
 8001cbe:	601a      	str	r2, [r3, #0]
	VCC12V_SB_VADC = (float)ADC_Value[1] * Vref_IN / 4096;
 8001cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001cc2:	885b      	ldrh	r3, [r3, #2]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fe09 	bl	80008dc <__aeabi_ui2f>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b6b      	ldr	r3, [pc, #428]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7fe fe5a 	bl	800098c <__aeabi_fmul>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe ff08 	bl	8000af4 <__aeabi_fdiv>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b66      	ldr	r3, [pc, #408]	@ (8001e84 <SYS_ADC_Convert_Value+0x1f4>)
 8001cea:	601a      	str	r2, [r3, #0]
	VCC19V5_VADC = (float)ADC_Value[2] * Vref_IN / 4096;
 8001cec:	4b62      	ldr	r3, [pc, #392]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fdf3 	bl	80008dc <__aeabi_ui2f>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b60      	ldr	r3, [pc, #384]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f7fe fe44 	bl	800098c <__aeabi_fmul>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fef2 	bl	8000af4 <__aeabi_fdiv>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b5c      	ldr	r3, [pc, #368]	@ (8001e88 <SYS_ADC_Convert_Value+0x1f8>)
 8001d16:	601a      	str	r2, [r3, #0]
	VCC19V5_IADC = (float)ADC_Value[3] * Vref_IN / 4096;
 8001d18:	4b57      	ldr	r3, [pc, #348]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001d1a:	88db      	ldrh	r3, [r3, #6]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fddd 	bl	80008dc <__aeabi_ui2f>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b55      	ldr	r3, [pc, #340]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f7fe fe2e 	bl	800098c <__aeabi_fmul>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fedc 	bl	8000af4 <__aeabi_fdiv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b52      	ldr	r3, [pc, #328]	@ (8001e8c <SYS_ADC_Convert_Value+0x1fc>)
 8001d42:	601a      	str	r2, [r3, #0]
	T_BOOST = (float)ADC_Value[4] * Vref_IN / 4096;
 8001d44:	4b4c      	ldr	r3, [pc, #304]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001d46:	891b      	ldrh	r3, [r3, #8]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fdc7 	bl	80008dc <__aeabi_ui2f>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b4a      	ldr	r3, [pc, #296]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f7fe fe18 	bl	800098c <__aeabi_fmul>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fec6 	bl	8000af4 <__aeabi_fdiv>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b48      	ldr	r3, [pc, #288]	@ (8001e90 <SYS_ADC_Convert_Value+0x200>)
 8001d6e:	601a      	str	r2, [r3, #0]
	T_REAR = (float)ADC_Value[5] * Vref_IN / 4096;
 8001d70:	4b41      	ldr	r3, [pc, #260]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001d72:	895b      	ldrh	r3, [r3, #10]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fdb1 	bl	80008dc <__aeabi_ui2f>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f7fe fe02 	bl	800098c <__aeabi_fmul>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe feb0 	bl	8000af4 <__aeabi_fdiv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b3e      	ldr	r3, [pc, #248]	@ (8001e94 <SYS_ADC_Convert_Value+0x204>)
 8001d9a:	601a      	str	r2, [r3, #0]
	T_FRONT = (float)ADC_Value[6] * Vref_IN / 4096;
 8001d9c:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001d9e:	899b      	ldrh	r3, [r3, #12]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fd9b 	bl	80008dc <__aeabi_ui2f>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b34      	ldr	r3, [pc, #208]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f7fe fdec 	bl	800098c <__aeabi_fmul>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fe9a 	bl	8000af4 <__aeabi_fdiv>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b34      	ldr	r3, [pc, #208]	@ (8001e98 <SYS_ADC_Convert_Value+0x208>)
 8001dc6:	601a      	str	r2, [r3, #0]
	VCC5V0_SYS_VADC = (float)ADC_Value[7] * Vref_IN / 4096;
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001dca:	89db      	ldrh	r3, [r3, #14]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fd85 	bl	80008dc <__aeabi_ui2f>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7fe fdd6 	bl	800098c <__aeabi_fmul>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fe84 	bl	8000af4 <__aeabi_fdiv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <SYS_ADC_Convert_Value+0x20c>)
 8001df2:	601a      	str	r2, [r3, #0]
	VCC3V3_SYS_VADC = (float)ADC_Value[8] * Vref_IN / 4096;
 8001df4:	4b20      	ldr	r3, [pc, #128]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001df6:	8a1b      	ldrh	r3, [r3, #16]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fd6f 	bl	80008dc <__aeabi_ui2f>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b1e      	ldr	r3, [pc, #120]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f7fe fdc0 	bl	800098c <__aeabi_fmul>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fe6e 	bl	8000af4 <__aeabi_fdiv>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <SYS_ADC_Convert_Value+0x210>)
 8001e1e:	601a      	str	r2, [r3, #0]
	T_IN = (float)ADC_Value[9] * Vref_IN / 4096;
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001e22:	8a5b      	ldrh	r3, [r3, #18]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fd59 	bl	80008dc <__aeabi_ui2f>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7fe fdaa 	bl	800098c <__aeabi_fmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fe58 	bl	8000af4 <__aeabi_fdiv>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <SYS_ADC_Convert_Value+0x214>)
 8001e4a:	601a      	str	r2, [r3, #0]
	Vref_IN = (float)ADC_Value[10] * 3.3f / 4096;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <SYS_ADC_Convert_Value+0x1e8>)
 8001e4e:	8a9b      	ldrh	r3, [r3, #20]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fd43 	bl	80008dc <__aeabi_ui2f>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4913      	ldr	r1, [pc, #76]	@ (8001ea8 <SYS_ADC_Convert_Value+0x218>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fd96 	bl	800098c <__aeabi_fmul>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fe44 	bl	8000af4 <__aeabi_fdiv>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b02      	ldr	r3, [pc, #8]	@ (8001e7c <SYS_ADC_Convert_Value+0x1ec>)
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200004d8 	.word	0x200004d8
 8001e7c:	2000051c 	.word	0x2000051c
 8001e80:	200004fc 	.word	0x200004fc
 8001e84:	20000500 	.word	0x20000500
 8001e88:	200004f0 	.word	0x200004f0
 8001e8c:	200004f4 	.word	0x200004f4
 8001e90:	2000050c 	.word	0x2000050c
 8001e94:	20000510 	.word	0x20000510
 8001e98:	20000514 	.word	0x20000514
 8001e9c:	20000504 	.word	0x20000504
 8001ea0:	20000508 	.word	0x20000508
 8001ea4:	20000518 	.word	0x20000518
 8001ea8:	40533333 	.word	0x40533333
 8001eac:	00000000 	.word	0x00000000

08001eb0 <SYS_FAN_Control>:
 * 风扇速度控制
 * 风扇速度0-100, 0是最低速度(不一定会停转，看风扇)
 * ARR为1400, 所以这里输入的速度要 * 14.4
 */
void SYS_FAN_Control(uint8_t speed)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
	uint32_t pwm_speed = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
	pwm_speed = speed * 14.4;
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fbcb 	bl	800065c <__aeabi_i2d>
 8001ec6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001ef0 <SYS_FAN_Control+0x40>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe f94a 	bl	8000164 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fc2a 	bl	8000730 <__aeabi_d2uiz>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_speed);
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <SYS_FAN_Control+0x48>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	cccccccd 	.word	0xcccccccd
 8001ef4:	402ccccc 	.word	0x402ccccc
 8001ef8:	20000318 	.word	0x20000318

08001efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f00:	f000 fe76 	bl	8002bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f04:	f000 f864 	bl	8001fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f08:	f000 fb46 	bl	8002598 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f0c:	f000 fb26 	bl	800255c <MX_DMA_Init>
  MX_ADC1_Init();
 8001f10:	f000 f8be 	bl	8002090 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f14:	f000 f988 	bl	8002228 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001f18:	f000 f9b4 	bl	8002284 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001f1c:	f000 fa30 	bl	8002380 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001f20:	f00a fb06 	bl	800c530 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8001f24:	f000 f9f6 	bl	8002314 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001f28:	f000 faca 	bl	80024c0 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001f2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f30:	f000 fec0 	bl	8002cb4 <HAL_Delay>

  SYS_LED_Control_Fault(3);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f7ff fe79 	bl	8001c2c <SYS_LED_Control_Fault>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4820      	ldr	r0, [pc, #128]	@ (8001fc0 <main+0xc4>)
 8001f3e:	f005 fd3d 	bl	80079bc <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001f42:	4820      	ldr	r0, [pc, #128]	@ (8001fc4 <main+0xc8>)
 8001f44:	f001 faa6 	bl	8003494 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f000 feb3 	bl	8002cb4 <HAL_Delay>
  ADC_Enable(&hadc1);
 8001f4e:	481d      	ldr	r0, [pc, #116]	@ (8001fc4 <main+0xc8>)
 8001f50:	f001 f99e 	bl	8003290 <ADC_Enable>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 11);
 8001f54:	220b      	movs	r2, #11
 8001f56:	491c      	ldr	r1, [pc, #112]	@ (8001fc8 <main+0xcc>)
 8001f58:	481a      	ldr	r0, [pc, #104]	@ (8001fc4 <main+0xc8>)
 8001f5a:	f000 ffa7 	bl	8002eac <HAL_ADC_Start_DMA>

  SYS_FAN_Control(100);
 8001f5e:	2064      	movs	r0, #100	@ 0x64
 8001f60:	f7ff ffa6 	bl	8001eb0 <SYS_FAN_Control>

  Start_OLED();
 8001f64:	f7fe ff62 	bl	8000e2c <Start_OLED>
  OLED_Clear();
 8001f68:	f7fe ff36 	bl	8000dd8 <OLED_Clear>
  OLED_Set_Position(0, 0);
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7fe ffae 	bl	8000ed0 <OLED_Set_Position>
  OLED_Show_BMP(0);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff fa5f 	bl	8001438 <OLED_Show_BMP>

  PMBUS_Read_FRU();
 8001f7a:	f7ff fc8b 	bl	8001894 <PMBUS_Read_FRU>

  HAL_Delay(500);
 8001f7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f82:	f000 fe97 	bl	8002cb4 <HAL_Delay>

  OLED_Clear();
 8001f86:	f7fe ff27 	bl	8000dd8 <OLED_Clear>
  SYS_FAN_Control(0);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff ff90 	bl	8001eb0 <SYS_FAN_Control>

  HAL_TIM_Base_Start_IT(&htim2);
 8001f90:	480e      	ldr	r0, [pc, #56]	@ (8001fcc <main+0xd0>)
 8001f92:	f005 fc69 	bl	8007868 <HAL_TIM_Base_Start_IT>

  HAL_Delay(5000);
 8001f96:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f9a:	f000 fe8b 	bl	8002cb4 <HAL_Delay>
  PS_Power_Control(1);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff fbb2 	bl	8001708 <PS_Power_Control>
  SYS_LED_Control_Fault(0);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fe41 	bl	8001c2c <SYS_LED_Control_Fault>
  SYS_LED_Control_Run(1);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff fe0c 	bl	8001bc8 <SYS_LED_Control_Run>

  /*
   * 如果用MX重新生成过代码的话，需要在这里初始化IWDG
   */
  MX_IWDG_Init();
 8001fb0:	f000 f996 	bl	80022e0 <MX_IWDG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Feed_IWDG();
 8001fb4:	f7fe fed6 	bl	8000d64 <Feed_IWDG>
	  OLED_Show_StartMenu();
 8001fb8:	f7ff fa94 	bl	80014e4 <OLED_Show_StartMenu>
	  Feed_IWDG();
 8001fbc:	bf00      	nop
 8001fbe:	e7f9      	b.n	8001fb4 <main+0xb8>
 8001fc0:	20000318 	.word	0x20000318
 8001fc4:	20000198 	.word	0x20000198
 8001fc8:	200004d8 	.word	0x200004d8
 8001fcc:	20000360 	.word	0x20000360

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b094      	sub	sp, #80	@ 0x50
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fda:	2228      	movs	r2, #40	@ 0x28
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00a ff58 	bl	800ce94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002000:	2309      	movs	r3, #9
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002004:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800200a:	2300      	movs	r3, #0
 800200c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800200e:	2301      	movs	r3, #1
 8002010:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002012:	2301      	movs	r3, #1
 8002014:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002016:	2302      	movs	r3, #2
 8002018:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800201a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800201e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002020:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002024:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002026:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800202a:	4618      	mov	r0, r3
 800202c:	f004 fdcc 	bl	8006bc8 <HAL_RCC_OscConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002036:	f000 fb43 	bl	80026c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203a:	230f      	movs	r3, #15
 800203c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800204a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2102      	movs	r1, #2
 8002056:	4618      	mov	r0, r3
 8002058:	f005 f838 	bl	80070cc <HAL_RCC_ClockConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002062:	f000 fb2d 	bl	80026c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002066:	2312      	movs	r3, #18
 8002068:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800206a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800206e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f005 f9b6 	bl	80073e8 <HAL_RCCEx_PeriphCLKConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002082:	f000 fb1d 	bl	80026c0 <Error_Handler>
  }
}
 8002086:	bf00      	nop
 8002088:	3750      	adds	r7, #80	@ 0x50
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020a2:	4a60      	ldr	r2, [pc, #384]	@ (8002224 <MX_ADC1_Init+0x194>)
 80020a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ba:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020bc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80020c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c2:	4b57      	ldr	r3, [pc, #348]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 11;
 80020c8:	4b55      	ldr	r3, [pc, #340]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020ca:	220b      	movs	r2, #11
 80020cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ce:	4854      	ldr	r0, [pc, #336]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020d0:	f000 fe14 	bl	8002cfc <HAL_ADC_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020da:	f000 faf1 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020de:	2301      	movs	r3, #1
 80020e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	484c      	ldr	r0, [pc, #304]	@ (8002220 <MX_ADC1_Init+0x190>)
 80020f0:	f000 ffd6 	bl	80030a0 <HAL_ADC_ConfigChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020fa:	f000 fae1 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020fe:	2302      	movs	r3, #2
 8002100:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002102:	2302      	movs	r3, #2
 8002104:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4845      	ldr	r0, [pc, #276]	@ (8002220 <MX_ADC1_Init+0x190>)
 800210c:	f000 ffc8 	bl	80030a0 <HAL_ADC_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002116:	f000 fad3 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800211a:	2303      	movs	r3, #3
 800211c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800211e:	2303      	movs	r3, #3
 8002120:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	483e      	ldr	r0, [pc, #248]	@ (8002220 <MX_ADC1_Init+0x190>)
 8002128:	f000 ffba 	bl	80030a0 <HAL_ADC_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002132:	f000 fac5 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002136:	2304      	movs	r3, #4
 8002138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800213a:	2304      	movs	r3, #4
 800213c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4837      	ldr	r0, [pc, #220]	@ (8002220 <MX_ADC1_Init+0x190>)
 8002144:	f000 ffac 	bl	80030a0 <HAL_ADC_ConfigChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800214e:	f000 fab7 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002152:	2305      	movs	r3, #5
 8002154:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002156:	2305      	movs	r3, #5
 8002158:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4619      	mov	r1, r3
 800215e:	4830      	ldr	r0, [pc, #192]	@ (8002220 <MX_ADC1_Init+0x190>)
 8002160:	f000 ff9e 	bl	80030a0 <HAL_ADC_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800216a:	f000 faa9 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800216e:	2306      	movs	r3, #6
 8002170:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002172:	2306      	movs	r3, #6
 8002174:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4829      	ldr	r0, [pc, #164]	@ (8002220 <MX_ADC1_Init+0x190>)
 800217c:	f000 ff90 	bl	80030a0 <HAL_ADC_ConfigChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002186:	f000 fa9b 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800218a:	2307      	movs	r3, #7
 800218c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800218e:	2307      	movs	r3, #7
 8002190:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4822      	ldr	r0, [pc, #136]	@ (8002220 <MX_ADC1_Init+0x190>)
 8002198:	f000 ff82 	bl	80030a0 <HAL_ADC_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80021a2:	f000 fa8d 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80021a6:	2308      	movs	r3, #8
 80021a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80021aa:	2308      	movs	r3, #8
 80021ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	481b      	ldr	r0, [pc, #108]	@ (8002220 <MX_ADC1_Init+0x190>)
 80021b4:	f000 ff74 	bl	80030a0 <HAL_ADC_ConfigChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80021be:	f000 fa7f 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80021c2:	2309      	movs	r3, #9
 80021c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80021c6:	2309      	movs	r3, #9
 80021c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4814      	ldr	r0, [pc, #80]	@ (8002220 <MX_ADC1_Init+0x190>)
 80021d0:	f000 ff66 	bl	80030a0 <HAL_ADC_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80021da:	f000 fa71 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80021de:	2310      	movs	r3, #16
 80021e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80021e2:	230a      	movs	r3, #10
 80021e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	480d      	ldr	r0, [pc, #52]	@ (8002220 <MX_ADC1_Init+0x190>)
 80021ec:	f000 ff58 	bl	80030a0 <HAL_ADC_ConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80021f6:	f000 fa63 	bl	80026c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80021fa:	2311      	movs	r3, #17
 80021fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80021fe:	230b      	movs	r3, #11
 8002200:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4806      	ldr	r0, [pc, #24]	@ (8002220 <MX_ADC1_Init+0x190>)
 8002208:	f000 ff4a 	bl	80030a0 <HAL_ADC_ConfigChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8002212:	f000 fa55 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000198 	.word	0x20000198
 8002224:	40012400 	.word	0x40012400

08002228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <MX_I2C1_Init+0x50>)
 800222e:	4a13      	ldr	r2, [pc, #76]	@ (800227c <MX_I2C1_Init+0x54>)
 8002230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002234:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <MX_I2C1_Init+0x58>)
 8002236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002238:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <MX_I2C1_Init+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002244:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800224a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800224c:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <MX_I2C1_Init+0x50>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <MX_I2C1_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002266:	f001 fe97 	bl	8003f98 <HAL_I2C_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002270:	f000 fa26 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000020c 	.word	0x2000020c
 800227c:	40005400 	.word	0x40005400
 8002280:	000186a0 	.word	0x000186a0

08002284 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <MX_I2C2_Init+0x50>)
 800228a:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <MX_I2C2_Init+0x54>)
 800228c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <MX_I2C2_Init+0x50>)
 8002290:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <MX_I2C2_Init+0x58>)
 8002292:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <MX_I2C2_Init+0x50>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <MX_I2C2_Init+0x50>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022c0:	4804      	ldr	r0, [pc, #16]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022c2:	f001 fe69 	bl	8003f98 <HAL_I2C_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80022cc:	f000 f9f8 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000260 	.word	0x20000260
 80022d8:	40005800 	.word	0x40005800
 80022dc:	00061a80 	.word	0x00061a80

080022e0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <MX_IWDG_Init+0x2c>)
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <MX_IWDG_Init+0x30>)
 80022e8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <MX_IWDG_Init+0x2c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <MX_IWDG_Init+0x2c>)
 80022f2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80022f6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80022f8:	4804      	ldr	r0, [pc, #16]	@ (800230c <MX_IWDG_Init+0x2c>)
 80022fa:	f002 feb2 	bl	8005062 <HAL_IWDG_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002304:	f000 f9dc 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200002b4 	.word	0x200002b4
 8002310:	40003000 	.word	0x40003000

08002314 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <MX_SPI2_Init+0x64>)
 800231a:	4a18      	ldr	r2, [pc, #96]	@ (800237c <MX_SPI2_Init+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <MX_SPI2_Init+0x64>)
 8002320:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002324:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <MX_SPI2_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <MX_SPI2_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <MX_SPI2_Init+0x64>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <MX_SPI2_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_SPI2_Init+0x64>)
 8002340:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002344:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <MX_SPI2_Init+0x64>)
 8002348:	2200      	movs	r2, #0
 800234a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <MX_SPI2_Init+0x64>)
 800234e:	2200      	movs	r2, #0
 8002350:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <MX_SPI2_Init+0x64>)
 8002354:	2200      	movs	r2, #0
 8002356:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002358:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <MX_SPI2_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <MX_SPI2_Init+0x64>)
 8002360:	220a      	movs	r2, #10
 8002362:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	@ (8002378 <MX_SPI2_Init+0x64>)
 8002366:	f005 f9ab 	bl	80076c0 <HAL_SPI_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002370:	f000 f9a6 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200002c0 	.word	0x200002c0
 800237c:	40003800 	.word	0x40003800

08002380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b096      	sub	sp, #88	@ 0x58
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002386:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	615a      	str	r2, [r3, #20]
 80023b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2220      	movs	r2, #32
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f00a fd6b 	bl	800ce94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023be:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80023c0:	4a3e      	ldr	r2, [pc, #248]	@ (80024bc <MX_TIM1_Init+0x13c>)
 80023c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80023c4:	4b3c      	ldr	r3, [pc, #240]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 80023d0:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80023d2:	f240 529f 	movw	r2, #1439	@ 0x59f
 80023d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d8:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023de:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e4:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023ea:	4833      	ldr	r0, [pc, #204]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80023ec:	f005 f9ec 	bl	80077c8 <HAL_TIM_Base_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80023f6:	f000 f963 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002400:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002404:	4619      	mov	r1, r3
 8002406:	482c      	ldr	r0, [pc, #176]	@ (80024b8 <MX_TIM1_Init+0x138>)
 8002408:	f005 fd2c 	bl	8007e64 <HAL_TIM_ConfigClockSource>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002412:	f000 f955 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002416:	4828      	ldr	r0, [pc, #160]	@ (80024b8 <MX_TIM1_Init+0x138>)
 8002418:	f005 fa78 	bl	800790c <HAL_TIM_PWM_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002422:	f000 f94d 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800242e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002432:	4619      	mov	r1, r3
 8002434:	4820      	ldr	r0, [pc, #128]	@ (80024b8 <MX_TIM1_Init+0x138>)
 8002436:	f006 f8b9 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002440:	f000 f93e 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002444:	2360      	movs	r3, #96	@ 0x60
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002464:	2200      	movs	r2, #0
 8002466:	4619      	mov	r1, r3
 8002468:	4813      	ldr	r0, [pc, #76]	@ (80024b8 <MX_TIM1_Init+0x138>)
 800246a:	f005 fc39 	bl	8007ce0 <HAL_TIM_PWM_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002474:	f000 f924 	bl	80026c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800248c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002490:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4807      	ldr	r0, [pc, #28]	@ (80024b8 <MX_TIM1_Init+0x138>)
 800249c:	f006 f8e4 	bl	8008668 <HAL_TIMEx_ConfigBreakDeadTime>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80024a6:	f000 f90b 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024aa:	4803      	ldr	r0, [pc, #12]	@ (80024b8 <MX_TIM1_Init+0x138>)
 80024ac:	f000 fac0 	bl	8002a30 <HAL_TIM_MspPostInit>

}
 80024b0:	bf00      	nop
 80024b2:	3758      	adds	r7, #88	@ 0x58
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000318 	.word	0x20000318
 80024bc:	40012c00 	.word	0x40012c00

080024c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c6:	f107 0308 	add.w	r3, r7, #8
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d4:	463b      	mov	r3, r7
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002558 <MX_TIM2_Init+0x98>)
 80024de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80024e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <MX_TIM2_Init+0x98>)
 80024e6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80024ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <MX_TIM2_Init+0x98>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80024f2:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <MX_TIM2_Init+0x98>)
 80024f4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80024f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fa:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <MX_TIM2_Init+0x98>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002500:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <MX_TIM2_Init+0x98>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002506:	4814      	ldr	r0, [pc, #80]	@ (8002558 <MX_TIM2_Init+0x98>)
 8002508:	f005 f95e 	bl	80077c8 <HAL_TIM_Base_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002512:	f000 f8d5 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800251a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800251c:	f107 0308 	add.w	r3, r7, #8
 8002520:	4619      	mov	r1, r3
 8002522:	480d      	ldr	r0, [pc, #52]	@ (8002558 <MX_TIM2_Init+0x98>)
 8002524:	f005 fc9e 	bl	8007e64 <HAL_TIM_ConfigClockSource>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800252e:	f000 f8c7 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800253a:	463b      	mov	r3, r7
 800253c:	4619      	mov	r1, r3
 800253e:	4806      	ldr	r0, [pc, #24]	@ (8002558 <MX_TIM2_Init+0x98>)
 8002540:	f006 f834 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800254a:	f000 f8b9 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000360 	.word	0x20000360

0800255c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <MX_DMA_Init+0x38>)
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4a0b      	ldr	r2, [pc, #44]	@ (8002594 <MX_DMA_Init+0x38>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6153      	str	r3, [r2, #20]
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <MX_DMA_Init+0x38>)
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200b      	movs	r0, #11
 8002580:	f001 f90d 	bl	800379e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002584:	200b      	movs	r0, #11
 8002586:	f001 f926 	bl	80037d6 <HAL_NVIC_EnableIRQ>

}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ac:	4b40      	ldr	r3, [pc, #256]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a3f      	ldr	r2, [pc, #252]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025b2:	f043 0310 	orr.w	r3, r3, #16
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c4:	4b3a      	ldr	r3, [pc, #232]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a39      	ldr	r2, [pc, #228]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	4b34      	ldr	r3, [pc, #208]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a33      	ldr	r2, [pc, #204]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	4b2e      	ldr	r3, [pc, #184]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a2d      	ldr	r2, [pc, #180]	@ (80026b0 <MX_GPIO_Init+0x118>)
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <MX_GPIO_Init+0x118>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSON_CTRL_GPIO_Port, PSON_CTRL_Pin, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002612:	4828      	ldr	r0, [pc, #160]	@ (80026b4 <MX_GPIO_Init+0x11c>)
 8002614:	f001 fc6c 	bl	8003ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	2140      	movs	r1, #64	@ 0x40
 800261c:	4826      	ldr	r0, [pc, #152]	@ (80026b8 <MX_GPIO_Init+0x120>)
 800261e:	f001 fc67 	bl	8003ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_SET);
 8002622:	2201      	movs	r2, #1
 8002624:	2180      	movs	r1, #128	@ 0x80
 8002626:	4824      	ldr	r0, [pc, #144]	@ (80026b8 <MX_GPIO_Init+0x120>)
 8002628:	f001 fc62 	bl	8003ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800262c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <MX_GPIO_Init+0x124>)
 8002634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002636:	2301      	movs	r3, #1
 8002638:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	4619      	mov	r1, r3
 8002640:	481c      	ldr	r0, [pc, #112]	@ (80026b4 <MX_GPIO_Init+0x11c>)
 8002642:	f001 fad1 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSON_CTRL_Pin */
  GPIO_InitStruct.Pin = PSON_CTRL_Pin;
 8002646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800264a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264c:	2301      	movs	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2302      	movs	r3, #2
 8002656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PSON_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	4619      	mov	r1, r3
 800265e:	4815      	ldr	r0, [pc, #84]	@ (80026b4 <MX_GPIO_Init+0x11c>)
 8002660:	f001 fac2 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSOK_SIG_Pin */
  GPIO_InitStruct.Pin = PSOK_SIG_Pin;
 8002664:	2320      	movs	r3, #32
 8002666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PSOK_SIG_GPIO_Port, &GPIO_InitStruct);
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	4619      	mov	r1, r3
 8002676:	4810      	ldr	r0, [pc, #64]	@ (80026b8 <MX_GPIO_Init+0x120>)
 8002678:	f001 fab6 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_FAULT_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_FAULT_Pin|LED_RUN_Pin;
 800267c:	23c0      	movs	r3, #192	@ 0xc0
 800267e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	2301      	movs	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2302      	movs	r3, #2
 800268a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	4619      	mov	r1, r3
 8002692:	4809      	ldr	r0, [pc, #36]	@ (80026b8 <MX_GPIO_Init+0x120>)
 8002694:	f001 faa8 	bl	8003be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	2100      	movs	r1, #0
 800269c:	2017      	movs	r0, #23
 800269e:	f001 f87e 	bl	800379e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026a2:	2017      	movs	r0, #23
 80026a4:	f001 f897 	bl	80037d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026a8:	bf00      	nop
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40010c00 	.word	0x40010c00
 80026bc:	10310000 	.word	0x10310000

080026c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
}
 80026c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <Error_Handler+0x8>

080026cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_MspInit+0x5c>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	4a14      	ldr	r2, [pc, #80]	@ (8002728 <HAL_MspInit+0x5c>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6193      	str	r3, [r2, #24]
 80026de:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <HAL_MspInit+0x5c>)
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_MspInit+0x5c>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002728 <HAL_MspInit+0x5c>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	61d3      	str	r3, [r2, #28]
 80026f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <HAL_MspInit+0x5c>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002702:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <HAL_MspInit+0x60>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	4a04      	ldr	r2, [pc, #16]	@ (800272c <HAL_MspInit+0x60>)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	40021000 	.word	0x40021000
 800272c:	40010000 	.word	0x40010000

08002730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0318 	add.w	r3, r7, #24
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a33      	ldr	r2, [pc, #204]	@ (8002818 <HAL_ADC_MspInit+0xe8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d15f      	bne.n	8002810 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_ADC_MspInit+0xec>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a31      	ldr	r2, [pc, #196]	@ (800281c <HAL_ADC_MspInit+0xec>)
 8002756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b2f      	ldr	r3, [pc, #188]	@ (800281c <HAL_ADC_MspInit+0xec>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002768:	4b2c      	ldr	r3, [pc, #176]	@ (800281c <HAL_ADC_MspInit+0xec>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	4a2b      	ldr	r2, [pc, #172]	@ (800281c <HAL_ADC_MspInit+0xec>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6193      	str	r3, [r2, #24]
 8002774:	4b29      	ldr	r3, [pc, #164]	@ (800281c <HAL_ADC_MspInit+0xec>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	4b26      	ldr	r3, [pc, #152]	@ (800281c <HAL_ADC_MspInit+0xec>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a25      	ldr	r2, [pc, #148]	@ (800281c <HAL_ADC_MspInit+0xec>)
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b23      	ldr	r3, [pc, #140]	@ (800281c <HAL_ADC_MspInit+0xec>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VCC12V_SYS_VADC_Pin|VCC12V_SB_VADC_Pin|VCC19V5_VADC_Pin|VCC19V5_IADC_Pin
 8002798:	23fe      	movs	r3, #254	@ 0xfe
 800279a:	61bb      	str	r3, [r7, #24]
                          |T_BOOST_Pin|T_REAR_Pin|T_FRONT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279c:	2303      	movs	r3, #3
 800279e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f107 0318 	add.w	r3, r7, #24
 80027a4:	4619      	mov	r1, r3
 80027a6:	481e      	ldr	r0, [pc, #120]	@ (8002820 <HAL_ADC_MspInit+0xf0>)
 80027a8:	f001 fa1e 	bl	8003be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCC5V0_SYS_VADC_Pin|VCC3V3_SYS_VADC_Pin;
 80027ac:	2303      	movs	r3, #3
 80027ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b0:	2303      	movs	r3, #3
 80027b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	f107 0318 	add.w	r3, r7, #24
 80027b8:	4619      	mov	r1, r3
 80027ba:	481a      	ldr	r0, [pc, #104]	@ (8002824 <HAL_ADC_MspInit+0xf4>)
 80027bc:	f001 fa14 	bl	8003be8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027c2:	4a1a      	ldr	r2, [pc, #104]	@ (800282c <HAL_ADC_MspInit+0xfc>)
 80027c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c6:	4b18      	ldr	r3, [pc, #96]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027cc:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027d8:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027e0:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027ea:	2220      	movs	r2, #32
 80027ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027f4:	480c      	ldr	r0, [pc, #48]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 80027f6:	f001 f809 	bl	800380c <HAL_DMA_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002800:	f7ff ff5e 	bl	80026c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 8002808:	621a      	str	r2, [r3, #32]
 800280a:	4a07      	ldr	r2, [pc, #28]	@ (8002828 <HAL_ADC_MspInit+0xf8>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002810:	bf00      	nop
 8002812:	3728      	adds	r7, #40	@ 0x28
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40012400 	.word	0x40012400
 800281c:	40021000 	.word	0x40021000
 8002820:	40010800 	.word	0x40010800
 8002824:	40010c00 	.word	0x40010c00
 8002828:	200001c8 	.word	0x200001c8
 800282c:	40020008 	.word	0x40020008

08002830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a32      	ldr	r2, [pc, #200]	@ (8002914 <HAL_I2C_MspInit+0xe4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d133      	bne.n	80028b8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b31      	ldr	r3, [pc, #196]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a30      	ldr	r2, [pc, #192]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b2e      	ldr	r3, [pc, #184]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002868:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286e:	2312      	movs	r3, #18
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	4827      	ldr	r0, [pc, #156]	@ (800291c <HAL_I2C_MspInit+0xec>)
 800287e:	f001 f9b3 	bl	8003be8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002882:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <HAL_I2C_MspInit+0xf0>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800288e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002898:	4a21      	ldr	r2, [pc, #132]	@ (8002920 <HAL_I2C_MspInit+0xf0>)
 800289a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 80028a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028a8:	61d3      	str	r3, [r2, #28]
 80028aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028b6:	e029      	b.n	800290c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	@ (8002924 <HAL_I2C_MspInit+0xf4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d124      	bne.n	800290c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	4a14      	ldr	r2, [pc, #80]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	6193      	str	r3, [r2, #24]
 80028ce:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e0:	2312      	movs	r3, #18
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	4619      	mov	r1, r3
 80028ee:	480b      	ldr	r0, [pc, #44]	@ (800291c <HAL_I2C_MspInit+0xec>)
 80028f0:	f001 f97a 	bl	8003be8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028f4:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	4a07      	ldr	r2, [pc, #28]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 80028fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028fe:	61d3      	str	r3, [r2, #28]
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_I2C_MspInit+0xe8>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	bf00      	nop
 800290e:	3730      	adds	r7, #48	@ 0x30
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40005400 	.word	0x40005400
 8002918:	40021000 	.word	0x40021000
 800291c:	40010c00 	.word	0x40010c00
 8002920:	40010000 	.word	0x40010000
 8002924:	40005800 	.word	0x40005800

08002928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0310 	add.w	r3, r7, #16
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <HAL_SPI_MspInit+0x8c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d131      	bne.n	80029ac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002948:	4b1b      	ldr	r3, [pc, #108]	@ (80029b8 <HAL_SPI_MspInit+0x90>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4a1a      	ldr	r2, [pc, #104]	@ (80029b8 <HAL_SPI_MspInit+0x90>)
 800294e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002952:	61d3      	str	r3, [r2, #28]
 8002954:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <HAL_SPI_MspInit+0x90>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_SPI_MspInit+0x90>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a14      	ldr	r2, [pc, #80]	@ (80029b8 <HAL_SPI_MspInit+0x90>)
 8002966:	f043 0308 	orr.w	r3, r3, #8
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <HAL_SPI_MspInit+0x90>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002978:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800297c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4619      	mov	r1, r3
 800298c:	480b      	ldr	r0, [pc, #44]	@ (80029bc <HAL_SPI_MspInit+0x94>)
 800298e:	f001 f92b 	bl	8003be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002992:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4619      	mov	r1, r3
 80029a6:	4805      	ldr	r0, [pc, #20]	@ (80029bc <HAL_SPI_MspInit+0x94>)
 80029a8:	f001 f91e 	bl	8003be8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80029ac:	bf00      	nop
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40003800 	.word	0x40003800
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010c00 	.word	0x40010c00

080029c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <HAL_TIM_Base_MspInit+0x68>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10c      	bne.n	80029ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029d2:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <HAL_TIM_Base_MspInit+0x6c>)
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	4a15      	ldr	r2, [pc, #84]	@ (8002a2c <HAL_TIM_Base_MspInit+0x6c>)
 80029d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029dc:	6193      	str	r3, [r2, #24]
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <HAL_TIM_Base_MspInit+0x6c>)
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029ea:	e018      	b.n	8002a1e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f4:	d113      	bne.n	8002a1e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029f6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <HAL_TIM_Base_MspInit+0x6c>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	@ (8002a2c <HAL_TIM_Base_MspInit+0x6c>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	61d3      	str	r3, [r2, #28]
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <HAL_TIM_Base_MspInit+0x6c>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	201c      	movs	r0, #28
 8002a14:	f000 fec3 	bl	800379e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a18:	201c      	movs	r0, #28
 8002a1a:	f000 fedc 	bl	80037d6 <HAL_NVIC_EnableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	@ (8002a8c <HAL_TIM_MspPostInit+0x5c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d118      	bne.n	8002a82 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_TIM_MspPostInit+0x60>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	4a0e      	ldr	r2, [pc, #56]	@ (8002a90 <HAL_TIM_MspPostInit+0x60>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	6193      	str	r3, [r2, #24]
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <HAL_TIM_MspPostInit+0x60>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4805      	ldr	r0, [pc, #20]	@ (8002a94 <HAL_TIM_MspPostInit+0x64>)
 8002a7e:	f001 f8b3 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010800 	.word	0x40010800

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <NMI_Handler+0x4>

08002aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <MemManage_Handler+0x4>

08002ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <BusFault_Handler+0x4>

08002ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002abc:	bf00      	nop
 8002abe:	e7fd      	b.n	8002abc <UsageFault_Handler+0x4>

08002ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae8:	f000 f8c8 	bl	8002c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <DMA1_Channel1_IRQHandler+0x10>)
 8002af6:	f000 ff43 	bl	8003980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200001c8 	.word	0x200001c8

08002b04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b0a:	f002 fc19 	bl	8005340 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200011f4 	.word	0x200011f4

08002b18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	SYS_FAN_TACH_Count++;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <EXTI9_5_IRQHandler+0x1c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <EXTI9_5_IRQHandler+0x1c>)
 8002b24:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002b26:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002b2a:	f001 fa13 	bl	8003f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000520 	.word	0x20000520

08002b38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	SYS_FAN_Speed = SYS_FAN_TACH_Count / 4 * 60;
 8002b3c:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <TIM2_IRQHandler+0x48>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	089a      	lsrs	r2, r3, #2
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <TIM2_IRQHandler+0x4c>)
 8002b4e:	601a      	str	r2, [r3, #0]
	SYS_FAN_TACH_Count = 0;
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <TIM2_IRQHandler+0x48>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

	PMBUS_Read_PSMI();
 8002b56:	f7fe fdfb 	bl	8001750 <PMBUS_Read_PSMI>

	Output_19V5_Power = VCC19V5_VADC * VCC19V5_IADC;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <TIM2_IRQHandler+0x50>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b8c <TIM2_IRQHandler+0x54>)
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd ff11 	bl	800098c <__aeabi_fmul>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <TIM2_IRQHandler+0x58>)
 8002b70:	601a      	str	r2, [r3, #0]

	SYS_ADC_Convert_Value();
 8002b72:	f7ff f88d 	bl	8001c90 <SYS_ADC_Convert_Value>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b76:	4807      	ldr	r0, [pc, #28]	@ (8002b94 <TIM2_IRQHandler+0x5c>)
 8002b78:	f004 ffc2 	bl	8007b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000520 	.word	0x20000520
 8002b84:	20000524 	.word	0x20000524
 8002b88:	200004f0 	.word	0x200004f0
 8002b8c:	200004f4 	.word	0x200004f4
 8002b90:	200004f8 	.word	0x200004f8
 8002b94:	20000360 	.word	0x20000360

08002b98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ba4:	f7ff fff8 	bl	8002b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba8:	480b      	ldr	r0, [pc, #44]	@ (8002bd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002baa:	490c      	ldr	r1, [pc, #48]	@ (8002bdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bac:	4a0c      	ldr	r2, [pc, #48]	@ (8002be0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb0:	e002      	b.n	8002bb8 <LoopCopyDataInit>

08002bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bb6:	3304      	adds	r3, #4

08002bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bbc:	d3f9      	bcc.n	8002bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bbe:	4a09      	ldr	r2, [pc, #36]	@ (8002be4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bc0:	4c09      	ldr	r4, [pc, #36]	@ (8002be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc4:	e001      	b.n	8002bca <LoopFillZerobss>

08002bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc8:	3204      	adds	r2, #4

08002bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bcc:	d3fb      	bcc.n	8002bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bce:	f00a f969 	bl	800cea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bd2:	f7ff f993 	bl	8001efc <main>
  bx lr
 8002bd6:	4770      	bx	lr
  ldr r0, =_sdata
 8002bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bdc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8002be0:	0800e070 	.word	0x0800e070
  ldr r2, =_sbss
 8002be4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8002be8:	200016ec 	.word	0x200016ec

08002bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bec:	e7fe      	b.n	8002bec <ADC1_2_IRQHandler>
	...

08002bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <HAL_Init+0x28>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a07      	ldr	r2, [pc, #28]	@ (8002c18 <HAL_Init+0x28>)
 8002bfa:	f043 0310 	orr.w	r3, r3, #16
 8002bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c00:	2003      	movs	r0, #3
 8002c02:	f000 fdc1 	bl	8003788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c06:	200f      	movs	r0, #15
 8002c08:	f000 f808 	bl	8002c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0c:	f7ff fd5e 	bl	80026cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40022000 	.word	0x40022000

08002c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c24:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_InitTick+0x54>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_InitTick+0x58>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fdd9 	bl	80037f2 <HAL_SYSTICK_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00e      	b.n	8002c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d80a      	bhi.n	8002c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c50:	2200      	movs	r2, #0
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f000 fda1 	bl	800379e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c5c:	4a06      	ldr	r2, [pc, #24]	@ (8002c78 <HAL_InitTick+0x5c>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000008 	.word	0x20000008
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_IncTick+0x1c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_IncTick+0x20>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a03      	ldr	r2, [pc, #12]	@ (8002c9c <HAL_IncTick+0x20>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000008 	.word	0x20000008
 8002c9c:	20000528 	.word	0x20000528

08002ca0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca4:	4b02      	ldr	r3, [pc, #8]	@ (8002cb0 <HAL_GetTick+0x10>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000528 	.word	0x20000528

08002cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff fff0 	bl	8002ca0 <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d005      	beq.n	8002cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_Delay+0x44>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cda:	bf00      	nop
 8002cdc:	f7ff ffe0 	bl	8002ca0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d8f7      	bhi.n	8002cdc <HAL_Delay+0x28>
  {
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000008 	.word	0x20000008

08002cfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0be      	b.n	8002e9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff fcf8 	bl	8002730 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 faff 	bl	8003344 <ADC_ConversionStop_Disable>
 8002d46:	4603      	mov	r3, r0
 8002d48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 8099 	bne.w	8002e8a <HAL_ADC_Init+0x18e>
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 8095 	bne.w	8002e8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d68:	f023 0302 	bic.w	r3, r3, #2
 8002d6c:	f043 0202 	orr.w	r2, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7b1b      	ldrb	r3, [r3, #12]
 8002d82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d94:	d003      	beq.n	8002d9e <HAL_ADC_Init+0xa2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_ADC_Init+0xa8>
 8002d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002da2:	e000      	b.n	8002da6 <HAL_ADC_Init+0xaa>
 8002da4:	2300      	movs	r3, #0
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7d1b      	ldrb	r3, [r3, #20]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d119      	bne.n	8002de8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7b1b      	ldrb	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	035a      	lsls	r2, r3, #13
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	e00b      	b.n	8002de8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	4b28      	ldr	r3, [pc, #160]	@ (8002ea4 <HAL_ADC_Init+0x1a8>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e18:	d003      	beq.n	8002e22 <HAL_ADC_Init+0x126>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d104      	bne.n	8002e2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	051b      	lsls	r3, r3, #20
 8002e2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <HAL_ADC_Init+0x1ac>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d10b      	bne.n	8002e68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e66:	e018      	b.n	8002e9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	f023 0312 	bic.w	r3, r3, #18
 8002e70:	f043 0210 	orr.w	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e88:	e007      	b.n	8002e9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	ffe1f7fd 	.word	0xffe1f7fd
 8002ea8:	ff1f0efe 	.word	0xff1f0efe

08002eac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a64      	ldr	r2, [pc, #400]	@ (8003054 <HAL_ADC_Start_DMA+0x1a8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_ADC_Start_DMA+0x24>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a63      	ldr	r2, [pc, #396]	@ (8003058 <HAL_ADC_Start_DMA+0x1ac>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d106      	bne.n	8002ede <HAL_ADC_Start_DMA+0x32>
 8002ed0:	4b60      	ldr	r3, [pc, #384]	@ (8003054 <HAL_ADC_Start_DMA+0x1a8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 80b3 	bne.w	8003044 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_Start_DMA+0x40>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0ae      	b.n	800304a <HAL_ADC_Start_DMA+0x19e>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f9cb 	bl	8003290 <ADC_Enable>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 809a 	bne.w	800303a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a4e      	ldr	r2, [pc, #312]	@ (8003058 <HAL_ADC_Start_DMA+0x1ac>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d105      	bne.n	8002f30 <HAL_ADC_Start_DMA+0x84>
 8002f24:	4b4b      	ldr	r3, [pc, #300]	@ (8003054 <HAL_ADC_Start_DMA+0x1a8>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d115      	bne.n	8002f5c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d026      	beq.n	8002f98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f5a:	e01d      	b.n	8002f98 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a39      	ldr	r2, [pc, #228]	@ (8003054 <HAL_ADC_Start_DMA+0x1a8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_ADC_Start_DMA+0xd0>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a38      	ldr	r2, [pc, #224]	@ (8003058 <HAL_ADC_Start_DMA+0x1ac>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d10d      	bne.n	8002f98 <HAL_ADC_Start_DMA+0xec>
 8002f7c:	4b35      	ldr	r3, [pc, #212]	@ (8003054 <HAL_ADC_Start_DMA+0x1a8>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	f023 0206 	bic.w	r2, r3, #6
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fb0:	e002      	b.n	8002fb8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	@ (800305c <HAL_ADC_Start_DMA+0x1b0>)
 8002fc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a24      	ldr	r2, [pc, #144]	@ (8003060 <HAL_ADC_Start_DMA+0x1b4>)
 8002fce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4a23      	ldr	r2, [pc, #140]	@ (8003064 <HAL_ADC_Start_DMA+0x1b8>)
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0202 	mvn.w	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a18      	ldr	r0, [r3, #32]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	334c      	adds	r3, #76	@ 0x4c
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f000 fc5d 	bl	80038c0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003010:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003014:	d108      	bne.n	8003028 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003024:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003026:	e00f      	b.n	8003048 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003036:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003038:	e006      	b.n	8003048 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8003042:	e001      	b.n	8003048 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003048:	7dfb      	ldrb	r3, [r7, #23]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40012400 	.word	0x40012400
 8003058:	40012800 	.word	0x40012800
 800305c:	080033c7 	.word	0x080033c7
 8003060:	08003443 	.word	0x08003443
 8003064:	0800345f 	.word	0x0800345f

08003068 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x20>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0dc      	b.n	800327a <HAL_ADC_ConfigChannel+0x1da>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d81c      	bhi.n	800310a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b05      	subs	r3, #5
 80030e2:	221f      	movs	r2, #31
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4019      	ands	r1, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b05      	subs	r3, #5
 80030fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	635a      	str	r2, [r3, #52]	@ 0x34
 8003108:	e03c      	b.n	8003184 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d81c      	bhi.n	800314c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	3b23      	subs	r3, #35	@ 0x23
 8003124:	221f      	movs	r2, #31
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	4019      	ands	r1, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	3b23      	subs	r3, #35	@ 0x23
 800313e:	fa00 f203 	lsl.w	r2, r0, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
 800314a:	e01b      	b.n	8003184 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b41      	subs	r3, #65	@ 0x41
 800315e:	221f      	movs	r2, #31
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	4019      	ands	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b41      	subs	r3, #65	@ 0x41
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b09      	cmp	r3, #9
 800318a:	d91c      	bls.n	80031c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68d9      	ldr	r1, [r3, #12]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	3b1e      	subs	r3, #30
 800319e:	2207      	movs	r2, #7
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4019      	ands	r1, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6898      	ldr	r0, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	3b1e      	subs	r3, #30
 80031b8:	fa00 f203 	lsl.w	r2, r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	e019      	b.n	80031fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6919      	ldr	r1, [r3, #16]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	2207      	movs	r2, #7
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	4019      	ands	r1, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6898      	ldr	r0, [r3, #8]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	fa00 f203 	lsl.w	r2, r0, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d003      	beq.n	800320a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003206:	2b11      	cmp	r3, #17
 8003208:	d132      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1d      	ldr	r2, [pc, #116]	@ (8003284 <HAL_ADC_ConfigChannel+0x1e4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d125      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d126      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003230:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d11a      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800323a:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <HAL_ADC_ConfigChannel+0x1e8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a13      	ldr	r2, [pc, #76]	@ (800328c <HAL_ADC_ConfigChannel+0x1ec>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9a      	lsrs	r2, r3, #18
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003250:	e002      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3b01      	subs	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x1b2>
 800325e:	e007      	b.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012400 	.word	0x40012400
 8003288:	20000000 	.word	0x20000000
 800328c:	431bde83 	.word	0x431bde83

08003290 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d040      	beq.n	8003330 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032be:	4b1f      	ldr	r3, [pc, #124]	@ (800333c <ADC_Enable+0xac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003340 <ADC_Enable+0xb0>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032cc:	e002      	b.n	80032d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f9      	bne.n	80032ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032da:	f7ff fce1 	bl	8002ca0 <HAL_GetTick>
 80032de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032e0:	e01f      	b.n	8003322 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032e2:	f7ff fcdd 	bl	8002ca0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d918      	bls.n	8003322 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d011      	beq.n	8003322 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003302:	f043 0210 	orr.w	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e007      	b.n	8003332 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d1d8      	bne.n	80032e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000
 8003340:	431bde83 	.word	0x431bde83

08003344 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d12e      	bne.n	80033bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800336e:	f7ff fc97 	bl	8002ca0 <HAL_GetTick>
 8003372:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003374:	e01b      	b.n	80033ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003376:	f7ff fc93 	bl	8002ca0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d914      	bls.n	80033ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10d      	bne.n	80033ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e007      	b.n	80033be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d0dc      	beq.n	8003376 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d127      	bne.n	8003430 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80033f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80033fa:	d115      	bne.n	8003428 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003400:	2b00      	cmp	r3, #0
 8003402:	d111      	bne.n	8003428 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff fe1d 	bl	8003068 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800342e:	e004      	b.n	800343a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fe12 	bl	800307a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003470:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	f043 0204 	orr.w	r2, r3, #4
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fe01 	bl	800308c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e097      	b.n	80035e2 <HAL_ADCEx_Calibration_Start+0x14e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff42 	bl	8003344 <ADC_ConversionStop_Disable>
 80034c0:	4603      	mov	r3, r0
 80034c2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff fee3 	bl	8003290 <ADC_Enable>
 80034ca:	4603      	mov	r3, r0
 80034cc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 8081 	bne.w	80035d8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034de:	f023 0302 	bic.w	r3, r3, #2
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034ea:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <HAL_ADCEx_Calibration_Start+0x158>)
 80034ec:	681c      	ldr	r4, [r3, #0]
 80034ee:	2002      	movs	r0, #2
 80034f0:	f004 f830 	bl	8007554 <HAL_RCCEx_GetPeriphCLKFreq>
 80034f4:	4603      	mov	r3, r0
 80034f6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034fa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034fc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034fe:	e002      	b.n	8003506 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3b01      	subs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f9      	bne.n	8003500 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0208 	orr.w	r2, r2, #8
 800351a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800351c:	f7ff fbc0 	bl	8002ca0 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003522:	e01b      	b.n	800355c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003524:	f7ff fbbc 	bl	8002ca0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b0a      	cmp	r3, #10
 8003530:	d914      	bls.n	800355c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00d      	beq.n	800355c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	f023 0312 	bic.w	r3, r3, #18
 8003548:	f043 0210 	orr.w	r2, r3, #16
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e042      	b.n	80035e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1dc      	bne.n	8003524 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0204 	orr.w	r2, r2, #4
 8003578:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800357a:	f7ff fb91 	bl	8002ca0 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003580:	e01b      	b.n	80035ba <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003582:	f7ff fb8d 	bl	8002ca0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b0a      	cmp	r3, #10
 800358e:	d914      	bls.n	80035ba <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	f023 0312 	bic.w	r3, r3, #18
 80035a6:	f043 0210 	orr.w	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e013      	b.n	80035e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1dc      	bne.n	8003582 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	f023 0303 	bic.w	r3, r3, #3
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd90      	pop	{r4, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000000 	.word	0x20000000

080035f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800360c:	4013      	ands	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800361c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003622:	4a04      	ldr	r2, [pc, #16]	@ (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	60d3      	str	r3, [r2, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <__NVIC_GetPriorityGrouping+0x18>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	f003 0307 	and.w	r3, r3, #7
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db0b      	blt.n	800367e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4906      	ldr	r1, [pc, #24]	@ (8003688 <__NVIC_EnableIRQ+0x34>)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2001      	movs	r0, #1
 8003676:	fa00 f202 	lsl.w	r2, r0, r2
 800367a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	e000e100 	.word	0xe000e100

0800368c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	6039      	str	r1, [r7, #0]
 8003696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369c:	2b00      	cmp	r3, #0
 800369e:	db0a      	blt.n	80036b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	490c      	ldr	r1, [pc, #48]	@ (80036d8 <__NVIC_SetPriority+0x4c>)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	0112      	lsls	r2, r2, #4
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	440b      	add	r3, r1
 80036b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b4:	e00a      	b.n	80036cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4908      	ldr	r1, [pc, #32]	@ (80036dc <__NVIC_SetPriority+0x50>)
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	3b04      	subs	r3, #4
 80036c4:	0112      	lsls	r2, r2, #4
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	440b      	add	r3, r1
 80036ca:	761a      	strb	r2, [r3, #24]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000e100 	.word	0xe000e100
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	@ 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f1c3 0307 	rsb	r3, r3, #7
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	bf28      	it	cs
 80036fe:	2304      	movcs	r3, #4
 8003700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3304      	adds	r3, #4
 8003706:	2b06      	cmp	r3, #6
 8003708:	d902      	bls.n	8003710 <NVIC_EncodePriority+0x30>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3b03      	subs	r3, #3
 800370e:	e000      	b.n	8003712 <NVIC_EncodePriority+0x32>
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	f04f 32ff 	mov.w	r2, #4294967295
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43da      	mvns	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	401a      	ands	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003728:	f04f 31ff 	mov.w	r1, #4294967295
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	43d9      	mvns	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003738:	4313      	orrs	r3, r2
         );
}
 800373a:	4618      	mov	r0, r3
 800373c:	3724      	adds	r7, #36	@ 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003754:	d301      	bcc.n	800375a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003756:	2301      	movs	r3, #1
 8003758:	e00f      	b.n	800377a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375a:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <SysTick_Config+0x40>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003762:	210f      	movs	r1, #15
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	f7ff ff90 	bl	800368c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <SysTick_Config+0x40>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003772:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <SysTick_Config+0x40>)
 8003774:	2207      	movs	r2, #7
 8003776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	e000e010 	.word	0xe000e010

08003788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff2d 	bl	80035f0 <__NVIC_SetPriorityGrouping>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037b0:	f7ff ff42 	bl	8003638 <__NVIC_GetPriorityGrouping>
 80037b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	6978      	ldr	r0, [r7, #20]
 80037bc:	f7ff ff90 	bl	80036e0 <NVIC_EncodePriority>
 80037c0:	4602      	mov	r2, r0
 80037c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff5f 	bl	800368c <__NVIC_SetPriority>
}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff35 	bl	8003654 <__NVIC_EnableIRQ>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ffa2 	bl	8003744 <SysTick_Config>
 8003800:	4603      	mov	r3, r0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e043      	b.n	80038aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	4b22      	ldr	r3, [pc, #136]	@ (80038b4 <HAL_DMA_Init+0xa8>)
 800382a:	4413      	add	r3, r2
 800382c:	4a22      	ldr	r2, [pc, #136]	@ (80038b8 <HAL_DMA_Init+0xac>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1f      	ldr	r2, [pc, #124]	@ (80038bc <HAL_DMA_Init+0xb0>)
 800383e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003856:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800385a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	bffdfff8 	.word	0xbffdfff8
 80038b8:	cccccccd 	.word	0xcccccccd
 80038bc:	40020000 	.word	0x40020000

080038c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_DMA_Start_IT+0x20>
 80038dc:	2302      	movs	r3, #2
 80038de:	e04b      	b.n	8003978 <HAL_DMA_Start_IT+0xb8>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d13a      	bne.n	800396a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f937 	bl	8003b8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 020e 	orr.w	r2, r2, #14
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e00f      	b.n	8003958 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 020a 	orr.w	r2, r2, #10
 8003956:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e005      	b.n	8003976 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003972:	2302      	movs	r3, #2
 8003974:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003976:	7dfb      	ldrb	r3, [r7, #23]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	2204      	movs	r2, #4
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d04f      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xc8>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d04a      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d107      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0204 	bic.w	r2, r2, #4
 80039ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a66      	ldr	r2, [pc, #408]	@ (8003b70 <HAL_DMA_IRQHandler+0x1f0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d029      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xae>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a65      	ldr	r2, [pc, #404]	@ (8003b74 <HAL_DMA_IRQHandler+0x1f4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xaa>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a63      	ldr	r2, [pc, #396]	@ (8003b78 <HAL_DMA_IRQHandler+0x1f8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01a      	beq.n	8003a24 <HAL_DMA_IRQHandler+0xa4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a62      	ldr	r2, [pc, #392]	@ (8003b7c <HAL_DMA_IRQHandler+0x1fc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d012      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x9e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a60      	ldr	r2, [pc, #384]	@ (8003b80 <HAL_DMA_IRQHandler+0x200>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00a      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x98>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5f      	ldr	r2, [pc, #380]	@ (8003b84 <HAL_DMA_IRQHandler+0x204>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d102      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x92>
 8003a0c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a10:	e00e      	b.n	8003a30 <HAL_DMA_IRQHandler+0xb0>
 8003a12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a16:	e00b      	b.n	8003a30 <HAL_DMA_IRQHandler+0xb0>
 8003a18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a1c:	e008      	b.n	8003a30 <HAL_DMA_IRQHandler+0xb0>
 8003a1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a22:	e005      	b.n	8003a30 <HAL_DMA_IRQHandler+0xb0>
 8003a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a28:	e002      	b.n	8003a30 <HAL_DMA_IRQHandler+0xb0>
 8003a2a:	2340      	movs	r3, #64	@ 0x40
 8003a2c:	e000      	b.n	8003a30 <HAL_DMA_IRQHandler+0xb0>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	4a55      	ldr	r2, [pc, #340]	@ (8003b88 <HAL_DMA_IRQHandler+0x208>)
 8003a32:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8094 	beq.w	8003b66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a46:	e08e      	b.n	8003b66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d056      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x186>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d051      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 020a 	bic.w	r2, r2, #10
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a38      	ldr	r2, [pc, #224]	@ (8003b70 <HAL_DMA_IRQHandler+0x1f0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d029      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x166>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a37      	ldr	r2, [pc, #220]	@ (8003b74 <HAL_DMA_IRQHandler+0x1f4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x162>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a35      	ldr	r2, [pc, #212]	@ (8003b78 <HAL_DMA_IRQHandler+0x1f8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01a      	beq.n	8003adc <HAL_DMA_IRQHandler+0x15c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a34      	ldr	r2, [pc, #208]	@ (8003b7c <HAL_DMA_IRQHandler+0x1fc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d012      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x156>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a32      	ldr	r2, [pc, #200]	@ (8003b80 <HAL_DMA_IRQHandler+0x200>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x150>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a31      	ldr	r2, [pc, #196]	@ (8003b84 <HAL_DMA_IRQHandler+0x204>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d102      	bne.n	8003aca <HAL_DMA_IRQHandler+0x14a>
 8003ac4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ac8:	e00e      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x168>
 8003aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ace:	e00b      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x168>
 8003ad0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ad4:	e008      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x168>
 8003ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ada:	e005      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x168>
 8003adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ae0:	e002      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x168>
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	e000      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x168>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <HAL_DMA_IRQHandler+0x208>)
 8003aea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d034      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b04:	e02f      	b.n	8003b66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x1e8>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d023      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 020e 	bic.w	r2, r2, #14
 8003b2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b38:	2101      	movs	r1, #1
 8003b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
    }
  }
  return;
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
}
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40020008 	.word	0x40020008
 8003b74:	4002001c 	.word	0x4002001c
 8003b78:	40020030 	.word	0x40020030
 8003b7c:	40020044 	.word	0x40020044
 8003b80:	40020058 	.word	0x40020058
 8003b84:	4002006c 	.word	0x4002006c
 8003b88:	40020000 	.word	0x40020000

08003b8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d108      	bne.n	8003bcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bca:	e007      	b.n	8003bdc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b08b      	sub	sp, #44	@ 0x2c
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bfa:	e169      	b.n	8003ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	f040 8158 	bne.w	8003eca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a9a      	ldr	r2, [pc, #616]	@ (8003e88 <HAL_GPIO_Init+0x2a0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d05e      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c24:	4a98      	ldr	r2, [pc, #608]	@ (8003e88 <HAL_GPIO_Init+0x2a0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d875      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c2a:	4a98      	ldr	r2, [pc, #608]	@ (8003e8c <HAL_GPIO_Init+0x2a4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d058      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c30:	4a96      	ldr	r2, [pc, #600]	@ (8003e8c <HAL_GPIO_Init+0x2a4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d86f      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c36:	4a96      	ldr	r2, [pc, #600]	@ (8003e90 <HAL_GPIO_Init+0x2a8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d052      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c3c:	4a94      	ldr	r2, [pc, #592]	@ (8003e90 <HAL_GPIO_Init+0x2a8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d869      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c42:	4a94      	ldr	r2, [pc, #592]	@ (8003e94 <HAL_GPIO_Init+0x2ac>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04c      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c48:	4a92      	ldr	r2, [pc, #584]	@ (8003e94 <HAL_GPIO_Init+0x2ac>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d863      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c4e:	4a92      	ldr	r2, [pc, #584]	@ (8003e98 <HAL_GPIO_Init+0x2b0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d046      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c54:	4a90      	ldr	r2, [pc, #576]	@ (8003e98 <HAL_GPIO_Init+0x2b0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d85d      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c5a:	2b12      	cmp	r3, #18
 8003c5c:	d82a      	bhi.n	8003cb4 <HAL_GPIO_Init+0xcc>
 8003c5e:	2b12      	cmp	r3, #18
 8003c60:	d859      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c62:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <HAL_GPIO_Init+0x80>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003ce3 	.word	0x08003ce3
 8003c6c:	08003cbd 	.word	0x08003cbd
 8003c70:	08003ccf 	.word	0x08003ccf
 8003c74:	08003d11 	.word	0x08003d11
 8003c78:	08003d17 	.word	0x08003d17
 8003c7c:	08003d17 	.word	0x08003d17
 8003c80:	08003d17 	.word	0x08003d17
 8003c84:	08003d17 	.word	0x08003d17
 8003c88:	08003d17 	.word	0x08003d17
 8003c8c:	08003d17 	.word	0x08003d17
 8003c90:	08003d17 	.word	0x08003d17
 8003c94:	08003d17 	.word	0x08003d17
 8003c98:	08003d17 	.word	0x08003d17
 8003c9c:	08003d17 	.word	0x08003d17
 8003ca0:	08003d17 	.word	0x08003d17
 8003ca4:	08003d17 	.word	0x08003d17
 8003ca8:	08003d17 	.word	0x08003d17
 8003cac:	08003cc5 	.word	0x08003cc5
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	4a79      	ldr	r2, [pc, #484]	@ (8003e9c <HAL_GPIO_Init+0x2b4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cba:	e02c      	b.n	8003d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	623b      	str	r3, [r7, #32]
          break;
 8003cc2:	e029      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	623b      	str	r3, [r7, #32]
          break;
 8003ccc:	e024      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	623b      	str	r3, [r7, #32]
          break;
 8003cd6:	e01f      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	623b      	str	r3, [r7, #32]
          break;
 8003ce0:	e01a      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cea:	2304      	movs	r3, #4
 8003cec:	623b      	str	r3, [r7, #32]
          break;
 8003cee:	e013      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	611a      	str	r2, [r3, #16]
          break;
 8003d02:	e009      	b.n	8003d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d04:	2308      	movs	r3, #8
 8003d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	615a      	str	r2, [r3, #20]
          break;
 8003d0e:	e003      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
          break;
 8003d14:	e000      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          break;
 8003d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2bff      	cmp	r3, #255	@ 0xff
 8003d1c:	d801      	bhi.n	8003d22 <HAL_GPIO_Init+0x13a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	e001      	b.n	8003d26 <HAL_GPIO_Init+0x13e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2bff      	cmp	r3, #255	@ 0xff
 8003d2c:	d802      	bhi.n	8003d34 <HAL_GPIO_Init+0x14c>
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	e002      	b.n	8003d3a <HAL_GPIO_Init+0x152>
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	3b08      	subs	r3, #8
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	210f      	movs	r1, #15
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	6a39      	ldr	r1, [r7, #32]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	431a      	orrs	r2, r3
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80b1 	beq.w	8003eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6193      	str	r3, [r2, #24]
 8003d74:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d80:	4a48      	ldr	r2, [pc, #288]	@ (8003ea4 <HAL_GPIO_Init+0x2bc>)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	220f      	movs	r2, #15
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a40      	ldr	r2, [pc, #256]	@ (8003ea8 <HAL_GPIO_Init+0x2c0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <HAL_GPIO_Init+0x1ec>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3f      	ldr	r2, [pc, #252]	@ (8003eac <HAL_GPIO_Init+0x2c4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00d      	beq.n	8003dd0 <HAL_GPIO_Init+0x1e8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb0 <HAL_GPIO_Init+0x2c8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <HAL_GPIO_Init+0x1e4>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8003eb4 <HAL_GPIO_Init+0x2cc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_GPIO_Init+0x1e0>
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e006      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	e004      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e002      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd8:	f002 0203 	and.w	r2, r2, #3
 8003ddc:	0092      	lsls	r2, r2, #2
 8003dde:	4093      	lsls	r3, r2
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003de6:	492f      	ldr	r1, [pc, #188]	@ (8003ea4 <HAL_GPIO_Init+0x2bc>)
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	3302      	adds	r3, #2
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e00:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	492c      	ldr	r1, [pc, #176]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	4928      	ldr	r1, [pc, #160]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e28:	4b23      	ldr	r3, [pc, #140]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	4922      	ldr	r1, [pc, #136]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60cb      	str	r3, [r1, #12]
 8003e34:	e006      	b.n	8003e44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e36:	4b20      	ldr	r3, [pc, #128]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	491e      	ldr	r1, [pc, #120]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e50:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	4918      	ldr	r1, [pc, #96]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
 8003e5c:	e006      	b.n	8003e6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e5e:	4b16      	ldr	r3, [pc, #88]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	4914      	ldr	r1, [pc, #80]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d021      	beq.n	8003ebc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e78:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	490e      	ldr	r1, [pc, #56]	@ (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	e021      	b.n	8003eca <HAL_GPIO_Init+0x2e2>
 8003e86:	bf00      	nop
 8003e88:	10320000 	.word	0x10320000
 8003e8c:	10310000 	.word	0x10310000
 8003e90:	10220000 	.word	0x10220000
 8003e94:	10210000 	.word	0x10210000
 8003e98:	10120000 	.word	0x10120000
 8003e9c:	10110000 	.word	0x10110000
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40010800 	.word	0x40010800
 8003eac:	40010c00 	.word	0x40010c00
 8003eb0:	40011000 	.word	0x40011000
 8003eb4:	40011400 	.word	0x40011400
 8003eb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4909      	ldr	r1, [pc, #36]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	3301      	adds	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f47f ae8e 	bne.w	8003bfc <HAL_GPIO_Init+0x14>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	372c      	adds	r7, #44	@ 0x2c
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	40010400 	.word	0x40010400

08003ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
 8003efc:	4613      	mov	r3, r2
 8003efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f00:	787b      	ldrb	r3, [r7, #1]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f0c:	e003      	b.n	8003f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	041a      	lsls	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4013      	ands	r3, r2
 8003f38:	041a      	lsls	r2, r3, #16
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43d9      	mvns	r1, r3
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	400b      	ands	r3, r1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	611a      	str	r2, [r3, #16]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f5e:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f6a:	4a05      	ldr	r2, [pc, #20]	@ (8003f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f806 	bl	8003f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40010400 	.word	0x40010400

08003f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e12b      	b.n	8004202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fe fc36 	bl	8002830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	@ 0x24
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f003 f9ae 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 8004000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a81      	ldr	r2, [pc, #516]	@ (800420c <HAL_I2C_Init+0x274>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d807      	bhi.n	800401c <HAL_I2C_Init+0x84>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a80      	ldr	r2, [pc, #512]	@ (8004210 <HAL_I2C_Init+0x278>)
 8004010:	4293      	cmp	r3, r2
 8004012:	bf94      	ite	ls
 8004014:	2301      	movls	r3, #1
 8004016:	2300      	movhi	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e006      	b.n	800402a <HAL_I2C_Init+0x92>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a7d      	ldr	r2, [pc, #500]	@ (8004214 <HAL_I2C_Init+0x27c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	bf94      	ite	ls
 8004024:	2301      	movls	r3, #1
 8004026:	2300      	movhi	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e0e7      	b.n	8004202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a78      	ldr	r2, [pc, #480]	@ (8004218 <HAL_I2C_Init+0x280>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0c9b      	lsrs	r3, r3, #18
 800403c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4a6a      	ldr	r2, [pc, #424]	@ (800420c <HAL_I2C_Init+0x274>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d802      	bhi.n	800406c <HAL_I2C_Init+0xd4>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3301      	adds	r3, #1
 800406a:	e009      	b.n	8004080 <HAL_I2C_Init+0xe8>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	4a69      	ldr	r2, [pc, #420]	@ (800421c <HAL_I2C_Init+0x284>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	3301      	adds	r3, #1
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	430b      	orrs	r3, r1
 8004086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004092:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	495c      	ldr	r1, [pc, #368]	@ (800420c <HAL_I2C_Init+0x274>)
 800409c:	428b      	cmp	r3, r1
 800409e:	d819      	bhi.n	80040d4 <HAL_I2C_Init+0x13c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1e59      	subs	r1, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040b4:	400b      	ands	r3, r1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_I2C_Init+0x138>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1e59      	subs	r1, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ce:	e051      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 80040d0:	2304      	movs	r3, #4
 80040d2:	e04f      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d111      	bne.n	8004100 <HAL_I2C_Init+0x168>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e58      	subs	r0, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	440b      	add	r3, r1
 80040ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e012      	b.n	8004126 <HAL_I2C_Init+0x18e>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Init+0x196>
 800412a:	2301      	movs	r3, #1
 800412c:	e022      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10e      	bne.n	8004154 <HAL_I2C_Init+0x1bc>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1e58      	subs	r0, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	440b      	add	r3, r1
 8004144:	fbb0 f3f3 	udiv	r3, r0, r3
 8004148:	3301      	adds	r3, #1
 800414a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004152:	e00f      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1e58      	subs	r0, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6859      	ldr	r1, [r3, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	0099      	lsls	r1, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	fbb0 f3f3 	udiv	r3, r0, r3
 800416a:	3301      	adds	r3, #1
 800416c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	6809      	ldr	r1, [r1, #0]
 8004178:	4313      	orrs	r3, r2
 800417a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6911      	ldr	r1, [r2, #16]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68d2      	ldr	r2, [r2, #12]
 80041ae:	4311      	orrs	r1, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	000186a0 	.word	0x000186a0
 8004210:	001e847f 	.word	0x001e847f
 8004214:	003d08ff 	.word	0x003d08ff
 8004218:	431bde83 	.word	0x431bde83
 800421c:	10624dd3 	.word	0x10624dd3

08004220 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	4608      	mov	r0, r1
 800422a:	4611      	mov	r1, r2
 800422c:	461a      	mov	r2, r3
 800422e:	4603      	mov	r3, r0
 8004230:	817b      	strh	r3, [r7, #10]
 8004232:	460b      	mov	r3, r1
 8004234:	813b      	strh	r3, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800423a:	f7fe fd31 	bl	8002ca0 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b20      	cmp	r3, #32
 800424a:	f040 80d9 	bne.w	8004400 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	2319      	movs	r3, #25
 8004254:	2201      	movs	r2, #1
 8004256:	496d      	ldr	r1, [pc, #436]	@ (800440c <HAL_I2C_Mem_Write+0x1ec>)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fccd 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
 8004266:	e0cc      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_I2C_Mem_Write+0x56>
 8004272:	2302      	movs	r3, #2
 8004274:	e0c5      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d007      	beq.n	800429c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2221      	movs	r2, #33	@ 0x21
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2240      	movs	r2, #64	@ 0x40
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a4d      	ldr	r2, [pc, #308]	@ (8004410 <HAL_I2C_Mem_Write+0x1f0>)
 80042dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042de:	88f8      	ldrh	r0, [r7, #6]
 80042e0:	893a      	ldrh	r2, [r7, #8]
 80042e2:	8979      	ldrh	r1, [r7, #10]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4603      	mov	r3, r0
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fb04 	bl	80048fc <I2C_RequestMemoryWrite>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d052      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e081      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fd92 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	2b04      	cmp	r3, #4
 8004314:	d107      	bne.n	8004326 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06b      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11b      	bne.n	80043a0 <HAL_I2C_Mem_Write+0x180>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d017      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1aa      	bne.n	80042fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fd85 	bl	8004ebc <I2C_WaitOnBTFFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d107      	bne.n	80043d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e016      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	00100002 	.word	0x00100002
 8004410:	ffff0000 	.word	0xffff0000

08004414 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08c      	sub	sp, #48	@ 0x30
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	4608      	mov	r0, r1
 800441e:	4611      	mov	r1, r2
 8004420:	461a      	mov	r2, r3
 8004422:	4603      	mov	r3, r0
 8004424:	817b      	strh	r3, [r7, #10]
 8004426:	460b      	mov	r3, r1
 8004428:	813b      	strh	r3, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004432:	f7fe fc35 	bl	8002ca0 <HAL_GetTick>
 8004436:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b20      	cmp	r3, #32
 8004442:	f040 8250 	bne.w	80048e6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2319      	movs	r3, #25
 800444c:	2201      	movs	r2, #1
 800444e:	4982      	ldr	r1, [pc, #520]	@ (8004658 <HAL_I2C_Mem_Read+0x244>)
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fbd1 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	e243      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_I2C_Mem_Read+0x5a>
 800446a:	2302      	movs	r3, #2
 800446c:	e23c      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d007      	beq.n	8004494 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2222      	movs	r2, #34	@ 0x22
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2240      	movs	r2, #64	@ 0x40
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a62      	ldr	r2, [pc, #392]	@ (800465c <HAL_I2C_Mem_Read+0x248>)
 80044d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d6:	88f8      	ldrh	r0, [r7, #6]
 80044d8:	893a      	ldrh	r2, [r7, #8]
 80044da:	8979      	ldrh	r1, [r7, #10]
 80044dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	4603      	mov	r3, r0
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa9e 	bl	8004a28 <I2C_RequestMemoryRead>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1f8      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d113      	bne.n	8004526 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e1cc      	b.n	80048c0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452a:	2b01      	cmp	r3, #1
 800452c:	d11e      	bne.n	800456c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800453e:	b672      	cpsid	i
}
 8004540:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004566:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004568:	b662      	cpsie	i
}
 800456a:	e035      	b.n	80045d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004570:	2b02      	cmp	r3, #2
 8004572:	d11e      	bne.n	80045b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004582:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004584:	b672      	cpsid	i
}
 8004586:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045ae:	b662      	cpsie	i
}
 80045b0:	e012      	b.n	80045d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045d8:	e172      	b.n	80048c0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045de:	2b03      	cmp	r3, #3
 80045e0:	f200 811f 	bhi.w	8004822 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d123      	bne.n	8004634 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fcab 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e173      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004632:	e145      	b.n	80048c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004638:	2b02      	cmp	r3, #2
 800463a:	d152      	bne.n	80046e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004642:	2200      	movs	r2, #0
 8004644:	4906      	ldr	r1, [pc, #24]	@ (8004660 <HAL_I2C_Mem_Read+0x24c>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fad6 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e148      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
 8004656:	bf00      	nop
 8004658:	00100002 	.word	0x00100002
 800465c:	ffff0000 	.word	0xffff0000
 8004660:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004664:	b672      	cpsid	i
}
 8004666:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046aa:	b662      	cpsie	i
}
 80046ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046e0:	e0ee      	b.n	80048c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e8:	2200      	movs	r2, #0
 80046ea:	4981      	ldr	r1, [pc, #516]	@ (80048f0 <HAL_I2C_Mem_Read+0x4dc>)
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fa83 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0f5      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800470a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800470c:	b672      	cpsid	i
}
 800470e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004742:	4b6c      	ldr	r3, [pc, #432]	@ (80048f4 <HAL_I2C_Mem_Read+0x4e0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	08db      	lsrs	r3, r3, #3
 8004748:	4a6b      	ldr	r2, [pc, #428]	@ (80048f8 <HAL_I2C_Mem_Read+0x4e4>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0a1a      	lsrs	r2, r3, #8
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	00da      	lsls	r2, r3, #3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	3b01      	subs	r3, #1
 8004760:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d118      	bne.n	800479a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800478a:	b662      	cpsie	i
}
 800478c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0a6      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d1d9      	bne.n	800475c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047ea:	b662      	cpsie	i
}
 80047ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004820:	e04e      	b.n	80048c0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004824:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fb90 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e058      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d124      	bne.n	80048c0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487a:	2b03      	cmp	r3, #3
 800487c:	d107      	bne.n	800488e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800488c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f47f ae88 	bne.w	80045da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3728      	adds	r7, #40	@ 0x28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	00010004 	.word	0x00010004
 80048f4:	20000000 	.word	0x20000000
 80048f8:	14f8b589 	.word	0x14f8b589

080048fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	817b      	strh	r3, [r7, #10]
 800490e:	460b      	mov	r3, r1
 8004910:	813b      	strh	r3, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2200      	movs	r2, #0
 800492e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f960 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800494c:	d103      	bne.n	8004956 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004954:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e05f      	b.n	8004a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	492d      	ldr	r1, [pc, #180]	@ (8004a24 <I2C_RequestMemoryWrite+0x128>)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f9bb 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e04c      	b.n	8004a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fa46 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e02b      	b.n	8004a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049c8:	893b      	ldrh	r3, [r7, #8]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]
 80049d2:	e021      	b.n	8004a18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	b29b      	uxth	r3, r3
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fa20 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d107      	bne.n	8004a0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e005      	b.n	8004a1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0e:	893b      	ldrh	r3, [r7, #8]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	00010002 	.word	0x00010002

08004a28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	817b      	strh	r3, [r7, #10]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	813b      	strh	r3, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f8c2 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a88:	d103      	bne.n	8004a92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0aa      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a96:	897b      	ldrh	r3, [r7, #10]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	4952      	ldr	r1, [pc, #328]	@ (8004bf4 <I2C_RequestMemoryRead+0x1cc>)
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f91d 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e097      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	6a39      	ldr	r1, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f9a8 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d107      	bne.n	8004afa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e076      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]
 8004b0e:	e021      	b.n	8004b54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	6a39      	ldr	r1, [r7, #32]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f982 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d107      	bne.n	8004b46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e050      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4a:	893b      	ldrh	r3, [r7, #8]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b56:	6a39      	ldr	r1, [r7, #32]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f967 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d107      	bne.n	8004b7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e035      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f82b 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb6:	d103      	bne.n	8004bc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e013      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bc4:	897b      	ldrh	r3, [r7, #10]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	6a3a      	ldr	r2, [r7, #32]
 8004bd8:	4906      	ldr	r1, [pc, #24]	@ (8004bf4 <I2C_RequestMemoryRead+0x1cc>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f886 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	00010002 	.word	0x00010002

08004bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c08:	e048      	b.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d044      	beq.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fe f845 	bl	8002ca0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d139      	bne.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10d      	bne.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	e00c      	b.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d116      	bne.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e023      	b.n	8004ce4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	0c1b      	lsrs	r3, r3, #16
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10d      	bne.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	43da      	mvns	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	e00c      	b.n	8004cdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	43da      	mvns	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d093      	beq.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cfa:	e071      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0a:	d123      	bne.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	f043 0204 	orr.w	r2, r3, #4
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e067      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d041      	beq.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5c:	f7fd ffa0 	bl	8002ca0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d136      	bne.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10c      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e00b      	b.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	43da      	mvns	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4013      	ands	r3, r2
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e021      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10c      	bne.n	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e00b      	b.n	8004e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f af6d 	bne.w	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e38:	e034      	b.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f8e3 	bl	8005006 <I2C_IsAcknowledgeFailed>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e034      	b.n	8004eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d028      	beq.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fd ff25 	bl	8002ca0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11d      	bne.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e72:	2b80      	cmp	r3, #128	@ 0x80
 8004e74:	d016      	beq.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e007      	b.n	8004eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eae:	2b80      	cmp	r3, #128	@ 0x80
 8004eb0:	d1c3      	bne.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec8:	e034      	b.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f89b 	bl	8005006 <I2C_IsAcknowledgeFailed>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e034      	b.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d028      	beq.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee2:	f7fd fedd 	bl	8002ca0 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d302      	bcc.n	8004ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11d      	bne.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d016      	beq.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e007      	b.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d1c3      	bne.n	8004eca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f58:	e049      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d119      	bne.n	8004f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0210 	mvn.w	r2, #16
 8004f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e030      	b.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fd fe80 	bl	8002ca0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11d      	bne.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b40      	cmp	r3, #64	@ 0x40
 8004fbe:	d016      	beq.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e007      	b.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff8:	2b40      	cmp	r3, #64	@ 0x40
 8004ffa:	d1ae      	bne.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501c:	d11b      	bne.n	8005056 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005026:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	f043 0204 	orr.w	r2, r3, #4
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e036      	b.n	80050e2 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800507c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005086:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6852      	ldr	r2, [r2, #4]
 8005090:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6892      	ldr	r2, [r2, #8]
 800509a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800509c:	f7fd fe00 	bl	8002ca0 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80050a2:	e011      	b.n	80050c8 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80050a4:	f7fd fdfc 	bl	8002ca0 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 323c 	movw	r2, #4924	@ 0x133c
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d908      	bls.n	80050c8 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e00c      	b.n	80050e2 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e6      	bne.n	80050a4 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80050de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80050fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0e8      	b.n	80052ec <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f007 fc06 	bl	800c940 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2203      	movs	r2, #3
 8005138:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f003 fb14 	bl	8008774 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005156:	f003 faea 	bl	800872e <USB_CoreInit>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0bf      	b.n	80052ec <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2100      	movs	r1, #0
 8005172:	4618      	mov	r0, r3
 8005174:	f003 fb18 	bl	80087a8 <USB_SetCurrentMode>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e0b0      	b.n	80052ec <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
 800518e:	e03e      	b.n	800520e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	440b      	add	r3, r1
 800519e:	3311      	adds	r3, #17
 80051a0:	2201      	movs	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	3310      	adds	r3, #16
 80051b4:	7bfa      	ldrb	r2, [r7, #15]
 80051b6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051b8:	7bfa      	ldrb	r2, [r7, #15]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	440b      	add	r3, r1
 80051c6:	3313      	adds	r3, #19
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	440b      	add	r3, r1
 80051da:	3320      	adds	r3, #32
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051e0:	7bfa      	ldrb	r2, [r7, #15]
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	440b      	add	r3, r1
 80051ee:	3324      	adds	r3, #36	@ 0x24
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	440b      	add	r3, r1
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	3301      	adds	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	791b      	ldrb	r3, [r3, #4]
 8005212:	7bfa      	ldrb	r2, [r7, #15]
 8005214:	429a      	cmp	r2, r3
 8005216:	d3bb      	bcc.n	8005190 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]
 800521c:	e044      	b.n	80052a8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	440b      	add	r3, r1
 800522c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	440b      	add	r3, r1
 8005242:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005246:	7bfa      	ldrb	r2, [r7, #15]
 8005248:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	440b      	add	r3, r1
 8005258:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	440b      	add	r3, r1
 800526e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	440b      	add	r3, r1
 8005284:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	440b      	add	r3, r1
 800529a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	3301      	adds	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	791b      	ldrb	r3, [r3, #4]
 80052ac:	7bfa      	ldrb	r2, [r7, #15]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d3b5      	bcc.n	800521e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052bc:	f003 fa80 	bl	80087c0 <USB_DevInit>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d005      	beq.n	80052d2 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e00c      	b.n	80052ec <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f005 fd00 	bl	800acea <USB_DevDisconnect>

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_PCD_Start+0x16>
 8005306:	2302      	movs	r3, #2
 8005308:	e016      	b.n	8005338 <HAL_PCD_Start+0x44>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f003 fa16 	bl	8008748 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800531c:	2101      	movs	r1, #1
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f007 fd81 	bl	800ce26 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f005 fcd4 	bl	800acd6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f005 fcd6 	bl	800acfe <USB_ReadInterrupts>
 8005352:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fb1a 	bl	8005998 <PCD_EP_ISR_Handler>

    return;
 8005364:	e119      	b.n	800559a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005378:	b29a      	uxth	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005382:	b292      	uxth	r2, r2
 8005384:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f007 fb54 	bl	800ca36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800538e:	2100      	movs	r1, #0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f905 	bl	80055a0 <HAL_PCD_SetAddress>

    return;
 8005396:	e100      	b.n	800559a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00c      	beq.n	80053bc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053b4:	b292      	uxth	r2, r2
 80053b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80053ba:	e0ee      	b.n	800559a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053d8:	b292      	uxth	r2, r2
 80053da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80053de:	e0dc      	b.n	800559a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d027      	beq.n	800543a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0204 	bic.w	r2, r2, #4
 80053fc:	b292      	uxth	r2, r2
 80053fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0208 	bic.w	r2, r2, #8
 8005414:	b292      	uxth	r2, r2
 8005416:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f007 fb44 	bl	800caa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005432:	b292      	uxth	r2, r2
 8005434:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005438:	e0af      	b.n	800559a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8083 	beq.w	800554c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005446:	2300      	movs	r3, #0
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e010      	b.n	800546e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	7ffb      	ldrb	r3, [r7, #31]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	441a      	add	r2, r3
 8005458:	7ffb      	ldrb	r3, [r7, #31]
 800545a:	8812      	ldrh	r2, [r2, #0]
 800545c:	b292      	uxth	r2, r2
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	3320      	adds	r3, #32
 8005462:	443b      	add	r3, r7
 8005464:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005468:	7ffb      	ldrb	r3, [r7, #31]
 800546a:	3301      	adds	r3, #1
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	7ffb      	ldrb	r3, [r7, #31]
 8005470:	2b07      	cmp	r3, #7
 8005472:	d9eb      	bls.n	800544c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800547c:	b29a      	uxth	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	b292      	uxth	r2, r2
 8005488:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005494:	b29a      	uxth	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0201 	bic.w	r2, r2, #1
 800549e:	b292      	uxth	r2, r2
 80054a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80054a4:	bf00      	nop
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f6      	beq.n	80054a6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ca:	b292      	uxth	r2, r2
 80054cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e00f      	b.n	80054f6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80054d6:	7ffb      	ldrb	r3, [r7, #31]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	4611      	mov	r1, r2
 80054de:	7ffa      	ldrb	r2, [r7, #31]
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	440a      	add	r2, r1
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	3320      	adds	r3, #32
 80054e8:	443b      	add	r3, r7
 80054ea:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80054ee:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80054f0:	7ffb      	ldrb	r3, [r7, #31]
 80054f2:	3301      	adds	r3, #1
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	7ffb      	ldrb	r3, [r7, #31]
 80054f8:	2b07      	cmp	r3, #7
 80054fa:	d9ec      	bls.n	80054d6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005504:	b29a      	uxth	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0208 	orr.w	r2, r2, #8
 800550e:	b292      	uxth	r2, r2
 8005510:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005526:	b292      	uxth	r2, r2
 8005528:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005534:	b29a      	uxth	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0204 	orr.w	r2, r2, #4
 800553e:	b292      	uxth	r2, r2
 8005540:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f007 fa95 	bl	800ca74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800554a:	e026      	b.n	800559a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00f      	beq.n	8005576 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005568:	b292      	uxth	r2, r2
 800556a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f007 fa53 	bl	800ca1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005574:	e011      	b.n	800559a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00c      	beq.n	800559a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005588:	b29a      	uxth	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005592:	b292      	uxth	r2, r2
 8005594:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005598:	bf00      	nop
  }
}
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_PCD_SetAddress+0x1a>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e012      	b.n	80055e0 <HAL_PCD_SetAddress+0x40>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	4611      	mov	r1, r2
 80055d0:	4618      	mov	r0, r3
 80055d2:	f005 fb6d 	bl	800acb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	70fb      	strb	r3, [r7, #3]
 80055fa:	460b      	mov	r3, r1
 80055fc:	803b      	strh	r3, [r7, #0]
 80055fe:	4613      	mov	r3, r2
 8005600:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800560a:	2b00      	cmp	r3, #0
 800560c:	da0e      	bge.n	800562c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	f003 0207 	and.w	r2, r3, #7
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	3310      	adds	r3, #16
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	705a      	strb	r2, [r3, #1]
 800562a:	e00e      	b.n	800564a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	f003 0207 	and.w	r2, r3, #7
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005656:	883a      	ldrh	r2, [r7, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	78ba      	ldrb	r2, [r7, #2]
 8005660:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005662:	78bb      	ldrb	r3, [r7, #2]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d102      	bne.n	800566e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_PCD_EP_Open+0x94>
 8005678:	2302      	movs	r3, #2
 800567a:	e00e      	b.n	800569a <HAL_PCD_EP_Open+0xb2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68f9      	ldr	r1, [r7, #12]
 800568a:	4618      	mov	r0, r3
 800568c:	f003 f8b6 	bl	80087fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005698:	7afb      	ldrb	r3, [r7, #11]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da0e      	bge.n	80056d4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 0207 	and.w	r2, r3, #7
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	3310      	adds	r3, #16
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	4413      	add	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	705a      	strb	r2, [r3, #1]
 80056d2:	e00e      	b.n	80056f2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 0207 	and.w	r2, r3, #7
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_PCD_EP_Close+0x6a>
 8005708:	2302      	movs	r3, #2
 800570a:	e00e      	b.n	800572a <HAL_PCD_EP_Close+0x88>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68f9      	ldr	r1, [r7, #12]
 800571a:	4618      	mov	r0, r3
 800571c:	f003 fc2e 	bl	8008f7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	460b      	mov	r3, r1
 8005740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	f003 0207 	and.w	r2, r3, #7
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2200      	movs	r2, #0
 800576a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	b2da      	uxtb	r2, r3
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6979      	ldr	r1, [r7, #20]
 8005784:	4618      	mov	r0, r3
 8005786:	f003 fde5 	bl	8009354 <USB_EPStartXfer>

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	f003 0207 	and.w	r2, r3, #7
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	440b      	add	r3, r1
 80057b2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b086      	sub	sp, #24
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
 80057ce:	460b      	mov	r3, r1
 80057d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057d2:	7afb      	ldrb	r3, [r7, #11]
 80057d4:	f003 0207 	and.w	r2, r3, #7
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	3310      	adds	r3, #16
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2201      	movs	r2, #1
 800580c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	b2da      	uxtb	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	4618      	mov	r0, r3
 8005822:	f003 fd97 	bl	8009354 <USB_EPStartXfer>

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	7912      	ldrb	r2, [r2, #4]
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e04c      	b.n	80058e8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800584e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005852:	2b00      	cmp	r3, #0
 8005854:	da0e      	bge.n	8005874 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f003 0207 	and.w	r2, r3, #7
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	3310      	adds	r3, #16
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	705a      	strb	r2, [r3, #1]
 8005872:	e00c      	b.n	800588e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4413      	add	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	b2da      	uxtb	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_PCD_EP_SetStall+0x7e>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e01c      	b.n	80058e8 <HAL_PCD_EP_SetStall+0xb8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	4618      	mov	r0, r3
 80058be:	f005 f8fa 	bl	800aab6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f005 fa1f 	bl	800ad1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	7912      	ldrb	r2, [r2, #4]
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e040      	b.n	8005990 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800590e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005912:	2b00      	cmp	r3, #0
 8005914:	da0e      	bge.n	8005934 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	f003 0207 	and.w	r2, r3, #7
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	3310      	adds	r3, #16
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	705a      	strb	r2, [r3, #1]
 8005932:	e00e      	b.n	8005952 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	f003 0207 	and.w	r2, r3, #7
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	b2da      	uxtb	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_PCD_EP_ClrStall+0x82>
 800596e:	2302      	movs	r3, #2
 8005970:	e00e      	b.n	8005990 <HAL_PCD_EP_ClrStall+0xa0>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	4618      	mov	r0, r3
 8005982:	f005 f8e8 	bl	800ab56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b096      	sub	sp, #88	@ 0x58
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059a0:	e3bb      	b.n	800611a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80059ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80059bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 8175 	bne.w	8005cb0 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80059c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d14e      	bne.n	8005a70 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80059de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e2:	81fb      	strh	r3, [r7, #14]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	89fb      	ldrh	r3, [r7, #14]
 80059ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3310      	adds	r3, #16
 80059fa:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	3302      	adds	r3, #2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	441a      	add	r2, r3
 8005a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005a36:	2100      	movs	r1, #0
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f006 ffd4 	bl	800c9e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	7b5b      	ldrb	r3, [r3, #13]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8368 	beq.w	800611a <PCD_EP_ISR_Handler+0x782>
 8005a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 8363 	bne.w	800611a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7b5b      	ldrb	r3, [r3, #13]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	735a      	strb	r2, [r3, #13]
 8005a6e:	e354      	b.n	800611a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a76:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d034      	beq.n	8005af8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3306      	adds	r3, #6
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f005 f975 	bl	800adbc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ade:	4013      	ands	r3, r2
 8005ae0:	823b      	strh	r3, [r7, #16]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	8a3a      	ldrh	r2, [r7, #16]
 8005ae8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005aec:	b292      	uxth	r2, r2
 8005aee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f006 ff4b 	bl	800c98c <HAL_PCD_SetupStageCallback>
 8005af6:	e310      	b.n	800611a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005af8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f280 830c 	bge.w	800611a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005b0e:	4013      	ands	r3, r2
 8005b10:	83fb      	strh	r3, [r7, #30]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	8bfa      	ldrh	r2, [r7, #30]
 8005b18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	4413      	add	r3, r2
 8005b34:	3306      	adds	r3, #6
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d019      	beq.n	8005b88 <PCD_EP_ISR_Handler+0x1f0>
 8005b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b62:	6959      	ldr	r1, [r3, #20]
 8005b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f005 f925 	bl	800adbc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	441a      	add	r2, r3
 8005b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b80:	2100      	movs	r1, #0
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f006 ff14 	bl	800c9b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005b92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f040 82bd 	bne.w	800611a <PCD_EP_ISR_Handler+0x782>
 8005ba0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005ba4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005ba8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bac:	f000 82b5 	beq.w	800611a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005be6:	d91d      	bls.n	8005c24 <PCD_EP_ISR_Handler+0x28c>
 8005be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <PCD_EP_ISR_Handler+0x26a>
 8005bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	029b      	lsls	r3, r3, #10
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4313      	orrs	r3, r2
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	801a      	strh	r2, [r3, #0]
 8005c22:	e026      	b.n	8005c72 <PCD_EP_ISR_Handler+0x2da>
 8005c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <PCD_EP_ISR_Handler+0x2aa>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e017      	b.n	8005c72 <PCD_EP_ISR_Handler+0x2da>
 8005c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <PCD_EP_ISR_Handler+0x2c4>
 8005c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c58:	3301      	adds	r3, #1
 8005c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	029b      	lsls	r3, r3, #10
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c82:	827b      	strh	r3, [r7, #18]
 8005c84:	8a7b      	ldrh	r3, [r7, #18]
 8005c86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c8a:	827b      	strh	r3, [r7, #18]
 8005c8c:	8a7b      	ldrh	r3, [r7, #18]
 8005c8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c92:	827b      	strh	r3, [r7, #18]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	8a7b      	ldrh	r3, [r7, #18]
 8005c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	8013      	strh	r3, [r2, #0]
 8005cae:	e234      	b.n	800611a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005cc4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f280 80fc 	bge.w	8005ec6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005cfc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d00:	b292      	uxth	r2, r2
 8005d02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005d04:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d1c:	7b1b      	ldrb	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d125      	bne.n	8005d6e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4413      	add	r3, r2
 8005d36:	3306      	adds	r3, #6
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d4a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005d4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 8092 	beq.w	8005e7c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d5e:	6959      	ldr	r1, [r3, #20]
 8005d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d62:	88da      	ldrh	r2, [r3, #6]
 8005d64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005d68:	f005 f828 	bl	800adbc <USB_ReadPMA>
 8005d6c:	e086      	b.n	8005e7c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d70:	78db      	ldrb	r3, [r3, #3]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d10a      	bne.n	8005d8c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9d9 	bl	8006136 <HAL_PCD_EP_DB_Receive>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005d8a:	e077      	b.n	8005e7c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d024      	beq.n	8005e34 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	3302      	adds	r3, #2
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e12:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005e16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d02e      	beq.n	8005e7c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e24:	6959      	ldr	r1, [r3, #20]
 8005e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e28:	891a      	ldrh	r2, [r3, #8]
 8005e2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005e2e:	f004 ffc5 	bl	800adbc <USB_ReadPMA>
 8005e32:	e023      	b.n	8005e7c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	4413      	add	r3, r2
 8005e48:	3306      	adds	r3, #6
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005e60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e6e:	6959      	ldr	r1, [r3, #20]
 8005e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e72:	895a      	ldrh	r2, [r3, #10]
 8005e74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005e78:	f004 ffa0 	bl	800adbc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005e84:	441a      	add	r2, r3
 8005e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005e92:	441a      	add	r2, r3
 8005e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e96:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <PCD_EP_ISR_Handler+0x514>
 8005ea0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d206      	bcs.n	8005eba <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f006 fd7c 	bl	800c9b0 <HAL_PCD_DataOutStageCallback>
 8005eb8:	e005      	b.n	8005ec6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f003 fa47 	bl	8009354 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ec6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8123 	beq.w	800611a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8005ed4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	3310      	adds	r3, #16
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f26:	78db      	ldrb	r3, [r3, #3]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f040 80a2 	bne.w	8006072 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8005f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f30:	2200      	movs	r2, #0
 8005f32:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f36:	7b1b      	ldrb	r3, [r3, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8093 	beq.w	8006064 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d046      	beq.n	8005fd8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d126      	bne.n	8005fa0 <PCD_EP_ISR_Handler+0x608>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	4413      	add	r3, r2
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	011a      	lsls	r2, r3, #4
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	4413      	add	r3, r2
 8005f74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f78:	623b      	str	r3, [r7, #32]
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	e061      	b.n	8006064 <PCD_EP_ISR_Handler+0x6cc>
 8005fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d15d      	bne.n	8006064 <PCD_EP_ISR_Handler+0x6cc>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	4413      	add	r3, r2
 8005fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	011a      	lsls	r2, r3, #4
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	4413      	add	r3, r2
 8005fca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	e045      	b.n	8006064 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d126      	bne.n	8006034 <PCD_EP_ISR_Handler+0x69c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffa:	4413      	add	r3, r2
 8005ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	011a      	lsls	r2, r3, #4
 8006004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006006:	4413      	add	r3, r2
 8006008:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800600c:	633b      	str	r3, [r7, #48]	@ 0x30
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006018:	b29a      	uxth	r2, r3
 800601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602c:	b29a      	uxth	r2, r3
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	e017      	b.n	8006064 <PCD_EP_ISR_Handler+0x6cc>
 8006034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d113      	bne.n	8006064 <PCD_EP_ISR_Handler+0x6cc>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800604a:	4413      	add	r3, r2
 800604c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800604e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	011a      	lsls	r2, r3, #4
 8006054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006056:	4413      	add	r3, r2
 8006058:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800605c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	2200      	movs	r2, #0
 8006062:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f006 fcbb 	bl	800c9e6 <HAL_PCD_DataInStageCallback>
 8006070:	e053      	b.n	800611a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006072:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d146      	bne.n	800610c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006086:	b29b      	uxth	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	3302      	adds	r3, #2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80060aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d907      	bls.n	80060c6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80060b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c2:	619a      	str	r2, [r3, #24]
 80060c4:	e002      	b.n	80060cc <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80060c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c8:	2200      	movs	r2, #0
 80060ca:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80060cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f006 fc83 	bl	800c9e6 <HAL_PCD_DataInStageCallback>
 80060e0:	e01b      	b.n	800611a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80060e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80060ea:	441a      	add	r2, r3
 80060ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ee:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80060f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80060f8:	441a      	add	r2, r3
 80060fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060fc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006104:	4618      	mov	r0, r3
 8006106:	f003 f925 	bl	8009354 <USB_EPStartXfer>
 800610a:	e006      	b.n	800611a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800610c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006110:	461a      	mov	r2, r3
 8006112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f91b 	bl	8006350 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006122:	b29b      	uxth	r3, r3
 8006124:	b21b      	sxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	f6ff ac3b 	blt.w	80059a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3758      	adds	r7, #88	@ 0x58
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b088      	sub	sp, #32
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	4613      	mov	r3, r2
 8006142:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d07e      	beq.n	800624c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006156:	b29b      	uxth	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4413      	add	r3, r2
 8006162:	3302      	adds	r3, #2
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006176:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	699a      	ldr	r2, [r3, #24]
 800617c:	8b7b      	ldrh	r3, [r7, #26]
 800617e:	429a      	cmp	r2, r3
 8006180:	d306      	bcc.n	8006190 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	8b7b      	ldrh	r3, [r7, #26]
 8006188:	1ad2      	subs	r2, r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	619a      	str	r2, [r3, #24]
 800618e:	e002      	b.n	8006196 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2200      	movs	r2, #0
 8006194:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d123      	bne.n	80061e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b8:	833b      	strh	r3, [r7, #24]
 80061ba:	8b3b      	ldrh	r3, [r7, #24]
 80061bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061c0:	833b      	strh	r3, [r7, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	8b3b      	ldrh	r3, [r7, #24]
 80061d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01f      	beq.n	8006230 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620a:	82fb      	strh	r3, [r7, #22]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	8afb      	ldrh	r3, [r7, #22]
 800621c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006228:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800622c:	b29b      	uxth	r3, r3
 800622e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006230:	8b7b      	ldrh	r3, [r7, #26]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8087 	beq.w	8006346 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	6959      	ldr	r1, [r3, #20]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	891a      	ldrh	r2, [r3, #8]
 8006244:	8b7b      	ldrh	r3, [r7, #26]
 8006246:	f004 fdb9 	bl	800adbc <USB_ReadPMA>
 800624a:	e07c      	b.n	8006346 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006254:	b29b      	uxth	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	4413      	add	r3, r2
 8006260:	3306      	adds	r3, #6
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006274:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	8b7b      	ldrh	r3, [r7, #26]
 800627c:	429a      	cmp	r2, r3
 800627e:	d306      	bcc.n	800628e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	8b7b      	ldrh	r3, [r7, #26]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	619a      	str	r2, [r3, #24]
 800628c:	e002      	b.n	8006294 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d123      	bne.n	80062e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b6:	83fb      	strh	r3, [r7, #30]
 80062b8:	8bfb      	ldrh	r3, [r7, #30]
 80062ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062be:	83fb      	strh	r3, [r7, #30]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	8bfb      	ldrh	r3, [r7, #30]
 80062d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80062e4:	88fb      	ldrh	r3, [r7, #6]
 80062e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d11f      	bne.n	800632e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006308:	83bb      	strh	r3, [r7, #28]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	441a      	add	r2, r3
 8006318:	8bbb      	ldrh	r3, [r7, #28]
 800631a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006326:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800632a:	b29b      	uxth	r3, r3
 800632c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800632e:	8b7b      	ldrh	r3, [r7, #26]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6959      	ldr	r1, [r3, #20]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	895a      	ldrh	r2, [r3, #10]
 8006340:	8b7b      	ldrh	r3, [r7, #26]
 8006342:	f004 fd3b 	bl	800adbc <USB_ReadPMA>
    }
  }

  return count;
 8006346:	8b7b      	ldrh	r3, [r7, #26]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b0a4      	sub	sp, #144	@ 0x90
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 81dd 	beq.w	8006724 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006372:	b29b      	uxth	r3, r3
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4413      	add	r3, r2
 800637e:	3302      	adds	r3, #2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006392:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800639e:	429a      	cmp	r2, r3
 80063a0:	d907      	bls.n	80063b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	619a      	str	r2, [r3, #24]
 80063b0:	e002      	b.n	80063b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 80b9 	bne.w	8006534 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	785b      	ldrb	r3, [r3, #1]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d126      	bne.n	8006418 <HAL_PCD_EP_DB_Transmit+0xc8>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	4413      	add	r3, r2
 80063e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	011a      	lsls	r2, r3, #4
 80063e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006410:	b29a      	uxth	r2, r3
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	e01a      	b.n	800644e <HAL_PCD_EP_DB_Transmit+0xfe>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d116      	bne.n	800644e <HAL_PCD_EP_DB_Transmit+0xfe>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	637b      	str	r3, [r7, #52]	@ 0x34
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006434:	4413      	add	r3, r2
 8006436:	637b      	str	r3, [r7, #52]	@ 0x34
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	011a      	lsls	r2, r3, #4
 800643e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006440:	4413      	add	r3, r2
 8006442:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006446:	633b      	str	r3, [r7, #48]	@ 0x30
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	2200      	movs	r2, #0
 800644c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d126      	bne.n	80064aa <HAL_PCD_EP_DB_Transmit+0x15a>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	011a      	lsls	r2, r3, #4
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800648e:	b29a      	uxth	r2, r3
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e017      	b.n	80064da <HAL_PCD_EP_DB_Transmit+0x18a>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d113      	bne.n	80064da <HAL_PCD_EP_DB_Transmit+0x18a>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	4413      	add	r3, r2
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	011a      	lsls	r2, r3, #4
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	4413      	add	r3, r2
 80064ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064d2:	623b      	str	r3, [r7, #32]
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	2200      	movs	r2, #0
 80064d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	4619      	mov	r1, r3
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f006 fa80 	bl	800c9e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 82fc 	beq.w	8006aea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650c:	82fb      	strh	r3, [r7, #22]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8afb      	ldrh	r3, [r7, #22]
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006526:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800652a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]
 8006532:	e2da      	b.n	8006aea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006534:	88fb      	ldrh	r3, [r7, #6]
 8006536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d021      	beq.n	8006582 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006558:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800656e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006576:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800657a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657e:	b29b      	uxth	r3, r3
 8006580:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006588:	2b01      	cmp	r3, #1
 800658a:	f040 82ae 	bne.w	8006aea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006596:	441a      	add	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065a4:	441a      	add	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d30b      	bcc.n	80065ce <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	621a      	str	r2, [r3, #32]
 80065cc:	e017      	b.n	80065fe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d108      	bne.n	80065e8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80065d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80065e6:	e00a      	b.n	80065fe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2200      	movs	r2, #0
 80065fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d165      	bne.n	80066d2 <HAL_PCD_EP_DB_Transmit+0x382>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006614:	b29b      	uxth	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800661a:	4413      	add	r3, r2
 800661c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	011a      	lsls	r2, r3, #4
 8006624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006626:	4413      	add	r3, r2
 8006628:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800662c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006638:	b29a      	uxth	r2, r3
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006642:	2b3e      	cmp	r3, #62	@ 0x3e
 8006644:	d91d      	bls.n	8006682 <HAL_PCD_EP_DB_Transmit+0x332>
 8006646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800664e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <HAL_PCD_EP_DB_Transmit+0x310>
 800665a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800665c:	3b01      	subs	r3, #1
 800665e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29a      	uxth	r2, r3
 8006666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006668:	b29b      	uxth	r3, r3
 800666a:	029b      	lsls	r3, r3, #10
 800666c:	b29b      	uxth	r3, r3
 800666e:	4313      	orrs	r3, r2
 8006670:	b29b      	uxth	r3, r3
 8006672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667a:	b29a      	uxth	r2, r3
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	e044      	b.n	800670c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x350>
 800668a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006698:	b29a      	uxth	r2, r3
 800669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	e035      	b.n	800670c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80066a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a4:	085b      	lsrs	r3, r3, #1
 80066a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_PCD_EP_DB_Transmit+0x36a>
 80066b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066b6:	3301      	adds	r3, #1
 80066b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e01c      	b.n	800670c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d118      	bne.n	800670c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ee:	4413      	add	r3, r2
 80066f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	011a      	lsls	r2, r3, #4
 80066f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066fa:	4413      	add	r3, r2
 80066fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006700:	643b      	str	r3, [r7, #64]	@ 0x40
 8006702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006706:	b29a      	uxth	r2, r3
 8006708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800670a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6959      	ldr	r1, [r3, #20]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	891a      	ldrh	r2, [r3, #8]
 8006718:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800671c:	b29b      	uxth	r3, r3
 800671e:	f004 fb08 	bl	800ad32 <USB_WritePMA>
 8006722:	e1e2      	b.n	8006aea <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	3306      	adds	r3, #6
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800674c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006758:	429a      	cmp	r2, r3
 800675a:	d307      	bcc.n	800676c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006764:	1ad2      	subs	r2, r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	619a      	str	r2, [r3, #24]
 800676a:	e002      	b.n	8006772 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 80c0 	bne.w	80068fc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d126      	bne.n	80067d2 <HAL_PCD_EP_DB_Transmit+0x482>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006792:	b29b      	uxth	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006798:	4413      	add	r3, r2
 800679a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067a4:	4413      	add	r3, r2
 80067a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	e01a      	b.n	8006808 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	785b      	ldrb	r3, [r3, #1]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d116      	bne.n	8006808 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	667b      	str	r3, [r7, #100]	@ 0x64
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ee:	4413      	add	r3, r2
 80067f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	011a      	lsls	r2, r3, #4
 80067f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067fa:	4413      	add	r3, r2
 80067fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006800:	663b      	str	r3, [r7, #96]	@ 0x60
 8006802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006804:	2200      	movs	r2, #0
 8006806:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	677b      	str	r3, [r7, #116]	@ 0x74
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d12b      	bne.n	800686e <HAL_PCD_EP_DB_Transmit+0x51e>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006824:	b29b      	uxth	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800682a:	4413      	add	r3, r2
 800682c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	011a      	lsls	r2, r3, #4
 8006834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006836:	4413      	add	r3, r2
 8006838:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800683c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006840:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800684c:	b29a      	uxth	r2, r3
 800684e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006864:	b29a      	uxth	r2, r3
 8006866:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	e017      	b.n	800689e <HAL_PCD_EP_DB_Transmit+0x54e>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d113      	bne.n	800689e <HAL_PCD_EP_DB_Transmit+0x54e>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800687e:	b29b      	uxth	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006884:	4413      	add	r3, r2
 8006886:	677b      	str	r3, [r7, #116]	@ 0x74
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	011a      	lsls	r2, r3, #4
 800688e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006890:	4413      	add	r3, r2
 8006892:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006896:	673b      	str	r3, [r7, #112]	@ 0x70
 8006898:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800689a:	2200      	movs	r2, #0
 800689c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	4619      	mov	r1, r3
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f006 f89e 	bl	800c9e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f040 811a 	bne.w	8006aea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80068e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	8013      	strh	r3, [r2, #0]
 80068fa:	e0f6      	b.n	8006aea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068fc:	88fb      	ldrh	r3, [r7, #6]
 80068fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d121      	bne.n	800694a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800691c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006920:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006946:	b29b      	uxth	r3, r3
 8006948:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006950:	2b01      	cmp	r3, #1
 8006952:	f040 80ca 	bne.w	8006aea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800695e:	441a      	add	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800696c:	441a      	add	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	429a      	cmp	r2, r3
 800697c:	d30b      	bcc.n	8006996 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6a1a      	ldr	r2, [r3, #32]
 800698a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	621a      	str	r2, [r3, #32]
 8006994:	e017      	b.n	80069c6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800699e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80069a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80069ae:	e00a      	b.n	80069c6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2200      	movs	r2, #0
 80069bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d165      	bne.n	8006aa0 <HAL_PCD_EP_DB_Transmit+0x750>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069e8:	4413      	add	r3, r2
 80069ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	011a      	lsls	r2, r3, #4
 80069f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a10:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a12:	d91d      	bls.n	8006a50 <HAL_PCD_EP_DB_Transmit+0x700>
 8006a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <HAL_PCD_EP_DB_Transmit+0x6de>
 8006a28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	029b      	lsls	r3, r3, #10
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a4c:	801a      	strh	r2, [r3, #0]
 8006a4e:	e041      	b.n	8006ad4 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <HAL_PCD_EP_DB_Transmit+0x71e>
 8006a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e032      	b.n	8006ad4 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_PCD_EP_DB_Transmit+0x738>
 8006a82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a84:	3301      	adds	r3, #1
 8006a86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4313      	orrs	r3, r2
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e019      	b.n	8006ad4 <HAL_PCD_EP_DB_Transmit+0x784>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d115      	bne.n	8006ad4 <HAL_PCD_EP_DB_Transmit+0x784>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab6:	4413      	add	r3, r2
 8006ab8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	011a      	lsls	r2, r3, #4
 8006ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ad2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6959      	ldr	r1, [r3, #20]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	895a      	ldrh	r2, [r3, #10]
 8006ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f004 f924 	bl	800ad32 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b04:	82bb      	strh	r3, [r7, #20]
 8006b06:	8abb      	ldrh	r3, [r7, #20]
 8006b08:	f083 0310 	eor.w	r3, r3, #16
 8006b0c:	82bb      	strh	r3, [r7, #20]
 8006b0e:	8abb      	ldrh	r3, [r7, #20]
 8006b10:	f083 0320 	eor.w	r3, r3, #32
 8006b14:	82bb      	strh	r3, [r7, #20]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	8abb      	ldrh	r3, [r7, #20]
 8006b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3790      	adds	r7, #144	@ 0x90
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	607b      	str	r3, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	817b      	strh	r3, [r7, #10]
 8006b52:	4613      	mov	r3, r2
 8006b54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b56:	897b      	ldrh	r3, [r7, #10]
 8006b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00b      	beq.n	8006b7a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b62:	897b      	ldrh	r3, [r7, #10]
 8006b64:	f003 0207 	and.w	r2, r3, #7
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	3310      	adds	r3, #16
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e009      	b.n	8006b8e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b7a:	897a      	ldrh	r2, [r7, #10]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b8e:	893b      	ldrh	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d107      	bne.n	8006ba4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2200      	movs	r2, #0
 8006b98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	80da      	strh	r2, [r3, #6]
 8006ba2:	e00b      	b.n	8006bbc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e272      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8087 	beq.w	8006cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006be8:	4b92      	ldr	r3, [pc, #584]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d00c      	beq.n	8006c0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006bf4:	4b8f      	ldr	r3, [pc, #572]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f003 030c 	and.w	r3, r3, #12
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d112      	bne.n	8006c26 <HAL_RCC_OscConfig+0x5e>
 8006c00:	4b8c      	ldr	r3, [pc, #560]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0c:	d10b      	bne.n	8006c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c0e:	4b89      	ldr	r3, [pc, #548]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d06c      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x12c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d168      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e24c      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c2e:	d106      	bne.n	8006c3e <HAL_RCC_OscConfig+0x76>
 8006c30:	4b80      	ldr	r3, [pc, #512]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a7f      	ldr	r2, [pc, #508]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	e02e      	b.n	8006c9c <HAL_RCC_OscConfig+0xd4>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x98>
 8006c46:	4b7b      	ldr	r3, [pc, #492]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a7a      	ldr	r2, [pc, #488]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	4b78      	ldr	r3, [pc, #480]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a77      	ldr	r2, [pc, #476]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	e01d      	b.n	8006c9c <HAL_RCC_OscConfig+0xd4>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c68:	d10c      	bne.n	8006c84 <HAL_RCC_OscConfig+0xbc>
 8006c6a:	4b72      	ldr	r3, [pc, #456]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a71      	ldr	r2, [pc, #452]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	4b6f      	ldr	r3, [pc, #444]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	e00b      	b.n	8006c9c <HAL_RCC_OscConfig+0xd4>
 8006c84:	4b6b      	ldr	r3, [pc, #428]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a6a      	ldr	r2, [pc, #424]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	4b68      	ldr	r3, [pc, #416]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a67      	ldr	r2, [pc, #412]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d013      	beq.n	8006ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca4:	f7fb fffc 	bl	8002ca0 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cac:	f7fb fff8 	bl	8002ca0 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b64      	cmp	r3, #100	@ 0x64
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e200      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f0      	beq.n	8006cac <HAL_RCC_OscConfig+0xe4>
 8006cca:	e014      	b.n	8006cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ccc:	f7fb ffe8 	bl	8002ca0 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd4:	f7fb ffe4 	bl	8002ca0 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b64      	cmp	r3, #100	@ 0x64
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e1ec      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ce6:	4b53      	ldr	r3, [pc, #332]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x10c>
 8006cf2:	e000      	b.n	8006cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d063      	beq.n	8006dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d02:	4b4c      	ldr	r3, [pc, #304]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f003 030c 	and.w	r3, r3, #12
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d0e:	4b49      	ldr	r3, [pc, #292]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d11c      	bne.n	8006d54 <HAL_RCC_OscConfig+0x18c>
 8006d1a:	4b46      	ldr	r3, [pc, #280]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d116      	bne.n	8006d54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d26:	4b43      	ldr	r3, [pc, #268]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_RCC_OscConfig+0x176>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d001      	beq.n	8006d3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e1c0      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	4939      	ldr	r1, [pc, #228]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d52:	e03a      	b.n	8006dca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d020      	beq.n	8006d9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d5c:	4b36      	ldr	r3, [pc, #216]	@ (8006e38 <HAL_RCC_OscConfig+0x270>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d62:	f7fb ff9d 	bl	8002ca0 <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d68:	e008      	b.n	8006d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d6a:	f7fb ff99 	bl	8002ca0 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e1a1      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0f0      	beq.n	8006d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d88:	4b2a      	ldr	r3, [pc, #168]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4927      	ldr	r1, [pc, #156]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	600b      	str	r3, [r1, #0]
 8006d9c:	e015      	b.n	8006dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d9e:	4b26      	ldr	r3, [pc, #152]	@ (8006e38 <HAL_RCC_OscConfig+0x270>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da4:	f7fb ff7c 	bl	8002ca0 <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dac:	f7fb ff78 	bl	8002ca0 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e180      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f0      	bne.n	8006dac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d03a      	beq.n	8006e4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d019      	beq.n	8006e12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dde:	4b17      	ldr	r3, [pc, #92]	@ (8006e3c <HAL_RCC_OscConfig+0x274>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006de4:	f7fb ff5c 	bl	8002ca0 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dec:	f7fb ff58 	bl	8002ca0 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e160      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <HAL_RCC_OscConfig+0x26c>)
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	f000 face 	bl	80073ac <RCC_Delay>
 8006e10:	e01c      	b.n	8006e4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e12:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <HAL_RCC_OscConfig+0x274>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e18:	f7fb ff42 	bl	8002ca0 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e1e:	e00f      	b.n	8006e40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e20:	f7fb ff3e 	bl	8002ca0 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d908      	bls.n	8006e40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e146      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000
 8006e38:	42420000 	.word	0x42420000
 8006e3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e40:	4b92      	ldr	r3, [pc, #584]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e9      	bne.n	8006e20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80a6 	beq.w	8006fa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e6a:	4b88      	ldr	r3, [pc, #544]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	4a87      	ldr	r2, [pc, #540]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e74:	61d3      	str	r3, [r2, #28]
 8006e76:	4b85      	ldr	r3, [pc, #532]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e7e:	60bb      	str	r3, [r7, #8]
 8006e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e82:	2301      	movs	r3, #1
 8006e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e86:	4b82      	ldr	r3, [pc, #520]	@ (8007090 <HAL_RCC_OscConfig+0x4c8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d118      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e92:	4b7f      	ldr	r3, [pc, #508]	@ (8007090 <HAL_RCC_OscConfig+0x4c8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a7e      	ldr	r2, [pc, #504]	@ (8007090 <HAL_RCC_OscConfig+0x4c8>)
 8006e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e9e:	f7fb feff 	bl	8002ca0 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea6:	f7fb fefb 	bl	8002ca0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b64      	cmp	r3, #100	@ 0x64
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e103      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb8:	4b75      	ldr	r3, [pc, #468]	@ (8007090 <HAL_RCC_OscConfig+0x4c8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d106      	bne.n	8006eda <HAL_RCC_OscConfig+0x312>
 8006ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	6213      	str	r3, [r2, #32]
 8006ed8:	e02d      	b.n	8006f36 <HAL_RCC_OscConfig+0x36e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCC_OscConfig+0x334>
 8006ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	4a69      	ldr	r2, [pc, #420]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	6213      	str	r3, [r2, #32]
 8006eee:	4b67      	ldr	r3, [pc, #412]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	4a66      	ldr	r2, [pc, #408]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006ef4:	f023 0304 	bic.w	r3, r3, #4
 8006ef8:	6213      	str	r3, [r2, #32]
 8006efa:	e01c      	b.n	8006f36 <HAL_RCC_OscConfig+0x36e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	d10c      	bne.n	8006f1e <HAL_RCC_OscConfig+0x356>
 8006f04:	4b61      	ldr	r3, [pc, #388]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	4a60      	ldr	r2, [pc, #384]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f0a:	f043 0304 	orr.w	r3, r3, #4
 8006f0e:	6213      	str	r3, [r2, #32]
 8006f10:	4b5e      	ldr	r3, [pc, #376]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	4a5d      	ldr	r2, [pc, #372]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	6213      	str	r3, [r2, #32]
 8006f1c:	e00b      	b.n	8006f36 <HAL_RCC_OscConfig+0x36e>
 8006f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	4a5a      	ldr	r2, [pc, #360]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f24:	f023 0301 	bic.w	r3, r3, #1
 8006f28:	6213      	str	r3, [r2, #32]
 8006f2a:	4b58      	ldr	r3, [pc, #352]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	4a57      	ldr	r2, [pc, #348]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f30:	f023 0304 	bic.w	r3, r3, #4
 8006f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d015      	beq.n	8006f6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f3e:	f7fb feaf 	bl	8002ca0 <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f44:	e00a      	b.n	8006f5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f46:	f7fb feab 	bl	8002ca0 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e0b1      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0ee      	beq.n	8006f46 <HAL_RCC_OscConfig+0x37e>
 8006f68:	e014      	b.n	8006f94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6a:	f7fb fe99 	bl	8002ca0 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f70:	e00a      	b.n	8006f88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f72:	f7fb fe95 	bl	8002ca0 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e09b      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f88:	4b40      	ldr	r3, [pc, #256]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1ee      	bne.n	8006f72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d105      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	4a3b      	ldr	r2, [pc, #236]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 8087 	beq.w	80070be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fb0:	4b36      	ldr	r3, [pc, #216]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f003 030c 	and.w	r3, r3, #12
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d061      	beq.n	8007080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d146      	bne.n	8007052 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc4:	4b33      	ldr	r3, [pc, #204]	@ (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fca:	f7fb fe69 	bl	8002ca0 <HAL_GetTick>
 8006fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd2:	f7fb fe65 	bl	8002ca0 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e06d      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fe4:	4b29      	ldr	r3, [pc, #164]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f0      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff8:	d108      	bne.n	800700c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ffa:	4b24      	ldr	r3, [pc, #144]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	4921      	ldr	r1, [pc, #132]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8007008:	4313      	orrs	r3, r2
 800700a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800700c:	4b1f      	ldr	r3, [pc, #124]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a19      	ldr	r1, [r3, #32]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701c:	430b      	orrs	r3, r1
 800701e:	491b      	ldr	r1, [pc, #108]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8007020:	4313      	orrs	r3, r2
 8007022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007024:	4b1b      	ldr	r3, [pc, #108]	@ (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800702a:	f7fb fe39 	bl	8002ca0 <HAL_GetTick>
 800702e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007030:	e008      	b.n	8007044 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007032:	f7fb fe35 	bl	8002ca0 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e03d      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007044:	4b11      	ldr	r3, [pc, #68]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f0      	beq.n	8007032 <HAL_RCC_OscConfig+0x46a>
 8007050:	e035      	b.n	80070be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007052:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007058:	f7fb fe22 	bl	8002ca0 <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007060:	f7fb fe1e 	bl	8002ca0 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e026      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007072:	4b06      	ldr	r3, [pc, #24]	@ (800708c <HAL_RCC_OscConfig+0x4c4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0x498>
 800707e:	e01e      	b.n	80070be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d107      	bne.n	8007098 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e019      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
 800708c:	40021000 	.word	0x40021000
 8007090:	40007000 	.word	0x40007000
 8007094:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007098:	4b0b      	ldr	r3, [pc, #44]	@ (80070c8 <HAL_RCC_OscConfig+0x500>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d106      	bne.n	80070ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d001      	beq.n	80070be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40021000 	.word	0x40021000

080070cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0d0      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070e0:	4b6a      	ldr	r3, [pc, #424]	@ (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d910      	bls.n	8007110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ee:	4b67      	ldr	r3, [pc, #412]	@ (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f023 0207 	bic.w	r2, r3, #7
 80070f6:	4965      	ldr	r1, [pc, #404]	@ (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fe:	4b63      	ldr	r3, [pc, #396]	@ (800728c <HAL_RCC_ClockConfig+0x1c0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d001      	beq.n	8007110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e0b8      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d020      	beq.n	800715e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007128:	4b59      	ldr	r3, [pc, #356]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a58      	ldr	r2, [pc, #352]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800712e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007140:	4b53      	ldr	r3, [pc, #332]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4a52      	ldr	r2, [pc, #328]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007146:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800714a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800714c:	4b50      	ldr	r3, [pc, #320]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	494d      	ldr	r1, [pc, #308]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800715a:	4313      	orrs	r3, r2
 800715c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d040      	beq.n	80071ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d107      	bne.n	8007182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007172:	4b47      	ldr	r3, [pc, #284]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d115      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e07f      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d107      	bne.n	800719a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800718a:	4b41      	ldr	r3, [pc, #260]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e073      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800719a:	4b3d      	ldr	r3, [pc, #244]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e06b      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071aa:	4b39      	ldr	r3, [pc, #228]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f023 0203 	bic.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	4936      	ldr	r1, [pc, #216]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071bc:	f7fb fd70 	bl	8002ca0 <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071c2:	e00a      	b.n	80071da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c4:	f7fb fd6c 	bl	8002ca0 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e053      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071da:	4b2d      	ldr	r3, [pc, #180]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f003 020c 	and.w	r2, r3, #12
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d1eb      	bne.n	80071c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071ec:	4b27      	ldr	r3, [pc, #156]	@ (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d210      	bcs.n	800721c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b24      	ldr	r3, [pc, #144]	@ (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 0207 	bic.w	r2, r3, #7
 8007202:	4922      	ldr	r1, [pc, #136]	@ (800728c <HAL_RCC_ClockConfig+0x1c0>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b20      	ldr	r3, [pc, #128]	@ (800728c <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e032      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007228:	4b19      	ldr	r3, [pc, #100]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4916      	ldr	r1, [pc, #88]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0308 	and.w	r3, r3, #8
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007246:	4b12      	ldr	r3, [pc, #72]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	490e      	ldr	r1, [pc, #56]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007256:	4313      	orrs	r3, r2
 8007258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800725a:	f000 f821 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 800725e:	4602      	mov	r2, r0
 8007260:	4b0b      	ldr	r3, [pc, #44]	@ (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	490a      	ldr	r1, [pc, #40]	@ (8007294 <HAL_RCC_ClockConfig+0x1c8>)
 800726c:	5ccb      	ldrb	r3, [r1, r3]
 800726e:	fa22 f303 	lsr.w	r3, r2, r3
 8007272:	4a09      	ldr	r2, [pc, #36]	@ (8007298 <HAL_RCC_ClockConfig+0x1cc>)
 8007274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007276:	4b09      	ldr	r3, [pc, #36]	@ (800729c <HAL_RCC_ClockConfig+0x1d0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f7fb fcce 	bl	8002c1c <HAL_InitTick>

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40022000 	.word	0x40022000
 8007290:	40021000 	.word	0x40021000
 8007294:	0800e020 	.word	0x0800e020
 8007298:	20000000 	.word	0x20000000
 800729c:	20000004 	.word	0x20000004

080072a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	2300      	movs	r3, #0
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	2300      	movs	r3, #0
 80072b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x94>)
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 030c 	and.w	r3, r3, #12
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d002      	beq.n	80072d0 <HAL_RCC_GetSysClockFreq+0x30>
 80072ca:	2b08      	cmp	r3, #8
 80072cc:	d003      	beq.n	80072d6 <HAL_RCC_GetSysClockFreq+0x36>
 80072ce:	e027      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072d0:	4b19      	ldr	r3, [pc, #100]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x98>)
 80072d2:	613b      	str	r3, [r7, #16]
      break;
 80072d4:	e027      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0c9b      	lsrs	r3, r3, #18
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	4a17      	ldr	r2, [pc, #92]	@ (800733c <HAL_RCC_GetSysClockFreq+0x9c>)
 80072e0:	5cd3      	ldrb	r3, [r2, r3]
 80072e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d010      	beq.n	8007310 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072ee:	4b11      	ldr	r3, [pc, #68]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x94>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	0c5b      	lsrs	r3, r3, #17
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	4a11      	ldr	r2, [pc, #68]	@ (8007340 <HAL_RCC_GetSysClockFreq+0xa0>)
 80072fa:	5cd3      	ldrb	r3, [r2, r3]
 80072fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a0d      	ldr	r2, [pc, #52]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x98>)
 8007302:	fb03 f202 	mul.w	r2, r3, r2
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e004      	b.n	800731a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a0c      	ldr	r2, [pc, #48]	@ (8007344 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007314:	fb02 f303 	mul.w	r3, r2, r3
 8007318:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	613b      	str	r3, [r7, #16]
      break;
 800731e:	e002      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007320:	4b05      	ldr	r3, [pc, #20]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x98>)
 8007322:	613b      	str	r3, [r7, #16]
      break;
 8007324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007326:	693b      	ldr	r3, [r7, #16]
}
 8007328:	4618      	mov	r0, r3
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40021000 	.word	0x40021000
 8007338:	007a1200 	.word	0x007a1200
 800733c:	0800e038 	.word	0x0800e038
 8007340:	0800e048 	.word	0x0800e048
 8007344:	003d0900 	.word	0x003d0900

08007348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800734c:	4b02      	ldr	r3, [pc, #8]	@ (8007358 <HAL_RCC_GetHCLKFreq+0x10>)
 800734e:	681b      	ldr	r3, [r3, #0]
}
 8007350:	4618      	mov	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr
 8007358:	20000000 	.word	0x20000000

0800735c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007360:	f7ff fff2 	bl	8007348 <HAL_RCC_GetHCLKFreq>
 8007364:	4602      	mov	r2, r0
 8007366:	4b05      	ldr	r3, [pc, #20]	@ (800737c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	0a1b      	lsrs	r3, r3, #8
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	4903      	ldr	r1, [pc, #12]	@ (8007380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007372:	5ccb      	ldrb	r3, [r1, r3]
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007378:	4618      	mov	r0, r3
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40021000 	.word	0x40021000
 8007380:	0800e030 	.word	0x0800e030

08007384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007388:	f7ff ffde 	bl	8007348 <HAL_RCC_GetHCLKFreq>
 800738c:	4602      	mov	r2, r0
 800738e:	4b05      	ldr	r3, [pc, #20]	@ (80073a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	0adb      	lsrs	r3, r3, #11
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	4903      	ldr	r1, [pc, #12]	@ (80073a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800739a:	5ccb      	ldrb	r3, [r1, r3]
 800739c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40021000 	.word	0x40021000
 80073a8:	0800e030 	.word	0x0800e030

080073ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073b4:	4b0a      	ldr	r3, [pc, #40]	@ (80073e0 <RCC_Delay+0x34>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a0a      	ldr	r2, [pc, #40]	@ (80073e4 <RCC_Delay+0x38>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	0a5b      	lsrs	r3, r3, #9
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80073c8:	bf00      	nop
  }
  while (Delay --);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	1e5a      	subs	r2, r3, #1
 80073ce:	60fa      	str	r2, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f9      	bne.n	80073c8 <RCC_Delay+0x1c>
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr
 80073e0:	20000000 	.word	0x20000000
 80073e4:	10624dd3 	.word	0x10624dd3

080073e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d07d      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007404:	2300      	movs	r3, #0
 8007406:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007408:	4b4f      	ldr	r3, [pc, #316]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10d      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007414:	4b4c      	ldr	r3, [pc, #304]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	4a4b      	ldr	r2, [pc, #300]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800741a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800741e:	61d3      	str	r3, [r2, #28]
 8007420:	4b49      	ldr	r3, [pc, #292]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007430:	4b46      	ldr	r3, [pc, #280]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d118      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800743c:	4b43      	ldr	r3, [pc, #268]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a42      	ldr	r2, [pc, #264]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007446:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007448:	f7fb fc2a 	bl	8002ca0 <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800744e:	e008      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007450:	f7fb fc26 	bl	8002ca0 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b64      	cmp	r3, #100	@ 0x64
 800745c:	d901      	bls.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e06d      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007462:	4b3a      	ldr	r3, [pc, #232]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f0      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800746e:	4b36      	ldr	r3, [pc, #216]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007476:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d02e      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	429a      	cmp	r2, r3
 800748a:	d027      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800748c:	4b2e      	ldr	r3, [pc, #184]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007494:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007496:	4b2e      	ldr	r3, [pc, #184]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800749c:	4b2c      	ldr	r3, [pc, #176]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80074a2:	4a29      	ldr	r2, [pc, #164]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d014      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b2:	f7fb fbf5 	bl	8002ca0 <HAL_GetTick>
 80074b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b8:	e00a      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ba:	f7fb fbf1 	bl	8002ca0 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e036      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0ee      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	4917      	ldr	r1, [pc, #92]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d105      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074f4:	4b14      	ldr	r3, [pc, #80]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	4a13      	ldr	r2, [pc, #76]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800750c:	4b0e      	ldr	r3, [pc, #56]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	490b      	ldr	r1, [pc, #44]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800751a:	4313      	orrs	r3, r2
 800751c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b00      	cmp	r3, #0
 8007528:	d008      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800752a:	4b07      	ldr	r3, [pc, #28]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4904      	ldr	r1, [pc, #16]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007538:	4313      	orrs	r3, r2
 800753a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40021000 	.word	0x40021000
 800754c:	40007000 	.word	0x40007000
 8007550:	42420440 	.word	0x42420440

08007554 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	2300      	movs	r3, #0
 800756e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b10      	cmp	r3, #16
 8007574:	d00a      	beq.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b10      	cmp	r3, #16
 800757a:	f200 808a 	bhi.w	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d045      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d075      	beq.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800758a:	e082      	b.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800758c:	4b46      	ldr	r3, [pc, #280]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007592:	4b45      	ldr	r3, [pc, #276]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d07b      	beq.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	0c9b      	lsrs	r3, r3, #18
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	4a41      	ldr	r2, [pc, #260]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80075a8:	5cd3      	ldrb	r3, [r2, r3]
 80075aa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d015      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80075b6:	4b3c      	ldr	r3, [pc, #240]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	0c5b      	lsrs	r3, r3, #17
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	4a3b      	ldr	r2, [pc, #236]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80075c2:	5cd3      	ldrb	r3, [r2, r3]
 80075c4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00d      	beq.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80075d0:	4a38      	ldr	r2, [pc, #224]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	fb02 f303 	mul.w	r3, r2, r3
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	e004      	b.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	4a34      	ldr	r2, [pc, #208]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
 80075ea:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80075ec:	4b2e      	ldr	r3, [pc, #184]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075f8:	d102      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	61bb      	str	r3, [r7, #24]
      break;
 80075fe:	e04a      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4a2d      	ldr	r2, [pc, #180]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007606:	fba2 2303 	umull	r2, r3, r2, r3
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	61bb      	str	r3, [r7, #24]
      break;
 800760e:	e042      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007610:	4b25      	ldr	r3, [pc, #148]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800761c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007620:	d108      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800762c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	e01f      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800763e:	d109      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007640:	4b19      	ldr	r3, [pc, #100]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800764c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e00f      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800765a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800765e:	d11c      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007660:	4b11      	ldr	r3, [pc, #68]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d016      	beq.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800766c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007670:	61bb      	str	r3, [r7, #24]
      break;
 8007672:	e012      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007674:	e011      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007676:	f7ff fe85 	bl	8007384 <HAL_RCC_GetPCLK2Freq>
 800767a:	4602      	mov	r2, r0
 800767c:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	0b9b      	lsrs	r3, r3, #14
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	3301      	adds	r3, #1
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	fbb2 f3f3 	udiv	r3, r2, r3
 800768e:	61bb      	str	r3, [r7, #24]
      break;
 8007690:	e004      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007692:	bf00      	nop
 8007694:	e002      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007696:	bf00      	nop
 8007698:	e000      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800769a:	bf00      	nop
    }
  }
  return (frequency);
 800769c:	69bb      	ldr	r3, [r7, #24]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3720      	adds	r7, #32
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40021000 	.word	0x40021000
 80076ac:	0800e04c 	.word	0x0800e04c
 80076b0:	0800e05c 	.word	0x0800e05c
 80076b4:	007a1200 	.word	0x007a1200
 80076b8:	003d0900 	.word	0x003d0900
 80076bc:	aaaaaaab 	.word	0xaaaaaaab

080076c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e076      	b.n	80077c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d108      	bne.n	80076ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076e2:	d009      	beq.n	80076f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	61da      	str	r2, [r3, #28]
 80076ea:	e005      	b.n	80076f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fb f908 	bl	8002928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800772e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800777c:	ea42 0103 	orr.w	r1, r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007784:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	0c1a      	lsrs	r2, r3, #16
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f002 0204 	and.w	r2, r2, #4
 800779e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69da      	ldr	r2, [r3, #28]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e041      	b.n	800785e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fb f8e6 	bl	80029c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f000 fc20 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d001      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e03a      	b.n	80078f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a18      	ldr	r2, [pc, #96]	@ (8007900 <HAL_TIM_Base_Start_IT+0x98>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00e      	beq.n	80078c0 <HAL_TIM_Base_Start_IT+0x58>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078aa:	d009      	beq.n	80078c0 <HAL_TIM_Base_Start_IT+0x58>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a14      	ldr	r2, [pc, #80]	@ (8007904 <HAL_TIM_Base_Start_IT+0x9c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d004      	beq.n	80078c0 <HAL_TIM_Base_Start_IT+0x58>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a13      	ldr	r2, [pc, #76]	@ (8007908 <HAL_TIM_Base_Start_IT+0xa0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d111      	bne.n	80078e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b06      	cmp	r3, #6
 80078d0:	d010      	beq.n	80078f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0201 	orr.w	r2, r2, #1
 80078e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e2:	e007      	b.n	80078f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0201 	orr.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr
 8007900:	40012c00 	.word	0x40012c00
 8007904:	40000400 	.word	0x40000400
 8007908:	40000800 	.word	0x40000800

0800790c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e041      	b.n	80079a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f839 	bl	80079aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f000 fb7e 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr

080079bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d109      	bne.n	80079e0 <HAL_TIM_PWM_Start+0x24>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	bf14      	ite	ne
 80079d8:	2301      	movne	r3, #1
 80079da:	2300      	moveq	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	e022      	b.n	8007a26 <HAL_TIM_PWM_Start+0x6a>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d109      	bne.n	80079fa <HAL_TIM_PWM_Start+0x3e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	bf14      	ite	ne
 80079f2:	2301      	movne	r3, #1
 80079f4:	2300      	moveq	r3, #0
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	e015      	b.n	8007a26 <HAL_TIM_PWM_Start+0x6a>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d109      	bne.n	8007a14 <HAL_TIM_PWM_Start+0x58>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	bf14      	ite	ne
 8007a0c:	2301      	movne	r3, #1
 8007a0e:	2300      	moveq	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	e008      	b.n	8007a26 <HAL_TIM_PWM_Start+0x6a>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	bf14      	ite	ne
 8007a20:	2301      	movne	r3, #1
 8007a22:	2300      	moveq	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e05e      	b.n	8007aec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <HAL_TIM_PWM_Start+0x82>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a3c:	e013      	b.n	8007a66 <HAL_TIM_PWM_Start+0xaa>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d104      	bne.n	8007a4e <HAL_TIM_PWM_Start+0x92>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a4c:	e00b      	b.n	8007a66 <HAL_TIM_PWM_Start+0xaa>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d104      	bne.n	8007a5e <HAL_TIM_PWM_Start+0xa2>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a5c:	e003      	b.n	8007a66 <HAL_TIM_PWM_Start+0xaa>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fd78 	bl	8008564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1e      	ldr	r2, [pc, #120]	@ (8007af4 <HAL_TIM_PWM_Start+0x138>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d107      	bne.n	8007a8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a18      	ldr	r2, [pc, #96]	@ (8007af4 <HAL_TIM_PWM_Start+0x138>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00e      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0xfa>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa0:	d009      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0xfa>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a14      	ldr	r2, [pc, #80]	@ (8007af8 <HAL_TIM_PWM_Start+0x13c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d004      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0xfa>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a12      	ldr	r2, [pc, #72]	@ (8007afc <HAL_TIM_PWM_Start+0x140>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d111      	bne.n	8007ada <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b06      	cmp	r3, #6
 8007ac6:	d010      	beq.n	8007aea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad8:	e007      	b.n	8007aea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40012c00 	.word	0x40012c00
 8007af8:	40000400 	.word	0x40000400
 8007afc:	40000800 	.word	0x40000800

08007b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d020      	beq.n	8007b64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01b      	beq.n	8007b64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0202 	mvn.w	r2, #2
 8007b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa63 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007b50:	e005      	b.n	8007b5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa56 	bl	8008004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fa65 	bl	8008028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f003 0304 	and.w	r3, r3, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d020      	beq.n	8007bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01b      	beq.n	8007bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0204 	mvn.w	r2, #4
 8007b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2202      	movs	r2, #2
 8007b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa3d 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007b9c:	e005      	b.n	8007baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa30 	bl	8008004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fa3f 	bl	8008028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d020      	beq.n	8007bfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01b      	beq.n	8007bfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0208 	mvn.w	r2, #8
 8007bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa17 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007be8:	e005      	b.n	8007bf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa0a 	bl	8008004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fa19 	bl	8008028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d020      	beq.n	8007c48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01b      	beq.n	8007c48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0210 	mvn.w	r2, #16
 8007c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f9f1 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007c34:	e005      	b.n	8007c42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f9e4 	bl	8008004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f9f3 	bl	8008028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00c      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f06f 0201 	mvn.w	r2, #1
 8007c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f9c3 	bl	8007ff2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00c      	beq.n	8007c90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fd46 	bl	800871c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f9c3 	bl	800803a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0220 	mvn.w	r2, #32
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fd19 	bl	800870a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d101      	bne.n	8007cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e0ae      	b.n	8007e5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	f200 809f 	bhi.w	8007e4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007d49 	.word	0x08007d49
 8007d18:	08007e4d 	.word	0x08007e4d
 8007d1c:	08007e4d 	.word	0x08007e4d
 8007d20:	08007e4d 	.word	0x08007e4d
 8007d24:	08007d89 	.word	0x08007d89
 8007d28:	08007e4d 	.word	0x08007e4d
 8007d2c:	08007e4d 	.word	0x08007e4d
 8007d30:	08007e4d 	.word	0x08007e4d
 8007d34:	08007dcb 	.word	0x08007dcb
 8007d38:	08007e4d 	.word	0x08007e4d
 8007d3c:	08007e4d 	.word	0x08007e4d
 8007d40:	08007e4d 	.word	0x08007e4d
 8007d44:	08007e0b 	.word	0x08007e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f9ea 	bl	8008128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699a      	ldr	r2, [r3, #24]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0208 	orr.w	r2, r2, #8
 8007d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0204 	bic.w	r2, r2, #4
 8007d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6999      	ldr	r1, [r3, #24]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	619a      	str	r2, [r3, #24]
      break;
 8007d86:	e064      	b.n	8007e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fa30 	bl	80081f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699a      	ldr	r2, [r3, #24]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6999      	ldr	r1, [r3, #24]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	021a      	lsls	r2, r3, #8
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	619a      	str	r2, [r3, #24]
      break;
 8007dc8:	e043      	b.n	8007e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fa79 	bl	80082c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69da      	ldr	r2, [r3, #28]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0208 	orr.w	r2, r2, #8
 8007de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69da      	ldr	r2, [r3, #28]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0204 	bic.w	r2, r2, #4
 8007df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69d9      	ldr	r1, [r3, #28]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	61da      	str	r2, [r3, #28]
      break;
 8007e08:	e023      	b.n	8007e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fac3 	bl	800839c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69da      	ldr	r2, [r3, #28]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69d9      	ldr	r1, [r3, #28]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	021a      	lsls	r2, r3, #8
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	61da      	str	r2, [r3, #28]
      break;
 8007e4a:	e002      	b.n	8007e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIM_ConfigClockSource+0x1c>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e0b4      	b.n	8007fea <HAL_TIM_ConfigClockSource+0x186>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb8:	d03e      	beq.n	8007f38 <HAL_TIM_ConfigClockSource+0xd4>
 8007eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ebe:	f200 8087 	bhi.w	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec6:	f000 8086 	beq.w	8007fd6 <HAL_TIM_ConfigClockSource+0x172>
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ece:	d87f      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed0:	2b70      	cmp	r3, #112	@ 0x70
 8007ed2:	d01a      	beq.n	8007f0a <HAL_TIM_ConfigClockSource+0xa6>
 8007ed4:	2b70      	cmp	r3, #112	@ 0x70
 8007ed6:	d87b      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed8:	2b60      	cmp	r3, #96	@ 0x60
 8007eda:	d050      	beq.n	8007f7e <HAL_TIM_ConfigClockSource+0x11a>
 8007edc:	2b60      	cmp	r3, #96	@ 0x60
 8007ede:	d877      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee0:	2b50      	cmp	r3, #80	@ 0x50
 8007ee2:	d03c      	beq.n	8007f5e <HAL_TIM_ConfigClockSource+0xfa>
 8007ee4:	2b50      	cmp	r3, #80	@ 0x50
 8007ee6:	d873      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee8:	2b40      	cmp	r3, #64	@ 0x40
 8007eea:	d058      	beq.n	8007f9e <HAL_TIM_ConfigClockSource+0x13a>
 8007eec:	2b40      	cmp	r3, #64	@ 0x40
 8007eee:	d86f      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef0:	2b30      	cmp	r3, #48	@ 0x30
 8007ef2:	d064      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x15a>
 8007ef4:	2b30      	cmp	r3, #48	@ 0x30
 8007ef6:	d86b      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	d060      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x15a>
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d867      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d05c      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x15a>
 8007f04:	2b10      	cmp	r3, #16
 8007f06:	d05a      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x15a>
 8007f08:	e062      	b.n	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f1a:	f000 fb04 	bl	8008526 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	609a      	str	r2, [r3, #8]
      break;
 8007f36:	e04f      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f48:	f000 faed 	bl	8008526 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f5a:	609a      	str	r2, [r3, #8]
      break;
 8007f5c:	e03c      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f000 fa64 	bl	8008438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2150      	movs	r1, #80	@ 0x50
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fabb 	bl	80084f2 <TIM_ITRx_SetConfig>
      break;
 8007f7c:	e02c      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f000 fa82 	bl	8008494 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2160      	movs	r1, #96	@ 0x60
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 faab 	bl	80084f2 <TIM_ITRx_SetConfig>
      break;
 8007f9c:	e01c      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007faa:	461a      	mov	r2, r3
 8007fac:	f000 fa44 	bl	8008438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2140      	movs	r1, #64	@ 0x40
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fa9b 	bl	80084f2 <TIM_ITRx_SetConfig>
      break;
 8007fbc:	e00c      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f000 fa92 	bl	80084f2 <TIM_ITRx_SetConfig>
      break;
 8007fce:	e003      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd4:	e000      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr

08008016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a2f      	ldr	r2, [pc, #188]	@ (800811c <TIM_Base_SetConfig+0xd0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00b      	beq.n	800807c <TIM_Base_SetConfig+0x30>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806a:	d007      	beq.n	800807c <TIM_Base_SetConfig+0x30>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a2c      	ldr	r2, [pc, #176]	@ (8008120 <TIM_Base_SetConfig+0xd4>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <TIM_Base_SetConfig+0x30>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a2b      	ldr	r2, [pc, #172]	@ (8008124 <TIM_Base_SetConfig+0xd8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d108      	bne.n	800808e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a22      	ldr	r2, [pc, #136]	@ (800811c <TIM_Base_SetConfig+0xd0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00b      	beq.n	80080ae <TIM_Base_SetConfig+0x62>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800809c:	d007      	beq.n	80080ae <TIM_Base_SetConfig+0x62>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008120 <TIM_Base_SetConfig+0xd4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d003      	beq.n	80080ae <TIM_Base_SetConfig+0x62>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008124 <TIM_Base_SetConfig+0xd8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d108      	bne.n	80080c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a0d      	ldr	r2, [pc, #52]	@ (800811c <TIM_Base_SetConfig+0xd0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d103      	bne.n	80080f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	611a      	str	r2, [r3, #16]
  }
}
 8008112:	bf00      	nop
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr
 800811c:	40012c00 	.word	0x40012c00
 8008120:	40000400 	.word	0x40000400
 8008124:	40000800 	.word	0x40000800

08008128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	f023 0201 	bic.w	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0303 	bic.w	r3, r3, #3
 800815e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f023 0302 	bic.w	r3, r3, #2
 8008170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	4313      	orrs	r3, r2
 800817a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a1c      	ldr	r2, [pc, #112]	@ (80081f0 <TIM_OC1_SetConfig+0xc8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d10c      	bne.n	800819e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f023 0308 	bic.w	r3, r3, #8
 800818a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f023 0304 	bic.w	r3, r3, #4
 800819c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a13      	ldr	r2, [pc, #76]	@ (80081f0 <TIM_OC1_SetConfig+0xc8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d111      	bne.n	80081ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	621a      	str	r2, [r3, #32]
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	40012c00 	.word	0x40012c00

080081f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f023 0210 	bic.w	r2, r3, #16
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800822a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	021b      	lsls	r3, r3, #8
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f023 0320 	bic.w	r3, r3, #32
 800823e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	011b      	lsls	r3, r3, #4
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a1d      	ldr	r2, [pc, #116]	@ (80082c4 <TIM_OC2_SetConfig+0xd0>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d10d      	bne.n	8008270 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800825a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	011b      	lsls	r3, r3, #4
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800826e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a14      	ldr	r2, [pc, #80]	@ (80082c4 <TIM_OC2_SetConfig+0xd0>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d113      	bne.n	80082a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800827e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr
 80082c4:	40012c00 	.word	0x40012c00

080082c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a1d      	ldr	r2, [pc, #116]	@ (8008398 <TIM_OC3_SetConfig+0xd0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d10d      	bne.n	8008342 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800832c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a14      	ldr	r2, [pc, #80]	@ (8008398 <TIM_OC3_SetConfig+0xd0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d113      	bne.n	8008372 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	621a      	str	r2, [r3, #32]
}
 800838c:	bf00      	nop
 800838e:	371c      	adds	r7, #28
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40012c00 	.word	0x40012c00

0800839c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	031b      	lsls	r3, r3, #12
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008434 <TIM_OC4_SetConfig+0x98>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d109      	bne.n	8008410 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	019b      	lsls	r3, r3, #6
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	621a      	str	r2, [r3, #32]
}
 800842a:	bf00      	nop
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr
 8008434:	40012c00 	.word	0x40012c00

08008438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	f023 0201 	bic.w	r2, r3, #1
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f023 030a 	bic.w	r3, r3, #10
 8008474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	4313      	orrs	r3, r2
 800847c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	621a      	str	r2, [r3, #32]
}
 800848a:	bf00      	nop
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	bc80      	pop	{r7}
 8008492:	4770      	bx	lr

08008494 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	f023 0210 	bic.w	r2, r3, #16
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	031b      	lsls	r3, r3, #12
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	621a      	str	r2, [r3, #32]
}
 80084e8:	bf00      	nop
 80084ea:	371c      	adds	r7, #28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b085      	sub	sp, #20
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4313      	orrs	r3, r2
 8008510:	f043 0307 	orr.w	r3, r3, #7
 8008514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	609a      	str	r2, [r3, #8]
}
 800851c:	bf00      	nop
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr

08008526 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008526:	b480      	push	{r7}
 8008528:	b087      	sub	sp, #28
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	607a      	str	r2, [r7, #4]
 8008532:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008540:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	021a      	lsls	r2, r3, #8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	431a      	orrs	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4313      	orrs	r3, r2
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4313      	orrs	r3, r2
 8008552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	609a      	str	r2, [r3, #8]
}
 800855a:	bf00      	nop
 800855c:	371c      	adds	r7, #28
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f003 031f 	and.w	r3, r3, #31
 8008576:	2201      	movs	r2, #1
 8008578:	fa02 f303 	lsl.w	r3, r2, r3
 800857c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a1a      	ldr	r2, [r3, #32]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	43db      	mvns	r3, r3
 8008586:	401a      	ands	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a1a      	ldr	r2, [r3, #32]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f003 031f 	and.w	r3, r3, #31
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	fa01 f303 	lsl.w	r3, r1, r3
 800859c:	431a      	orrs	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	621a      	str	r2, [r3, #32]
}
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr

080085ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e046      	b.n	8008652 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a16      	ldr	r2, [pc, #88]	@ (800865c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00e      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008610:	d009      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a12      	ldr	r2, [pc, #72]	@ (8008660 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d004      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a10      	ldr	r2, [pc, #64]	@ (8008664 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d10c      	bne.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800862c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	4313      	orrs	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr
 800865c:	40012c00 	.word	0x40012c00
 8008660:	40000400 	.word	0x40000400
 8008664:	40000800 	.word	0x40000800

08008668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008680:	2302      	movs	r3, #2
 8008682:	e03d      	b.n	8008700 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr

0800870a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr

0800872e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	4638      	mov	r0, r7
 8008738:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr

08008748 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008758:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800875c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800877c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008780:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008788:	b29a      	uxth	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	b29b      	uxth	r3, r3
 800878e:	43db      	mvns	r3, r3
 8008790:	b29b      	uxth	r3, r3
 8008792:	4013      	ands	r3, r2
 8008794:	b29a      	uxth	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr

080087c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	4638      	mov	r0, r7
 80087ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr
	...

080087fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b09d      	sub	sp, #116	@ 0x74
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	b29b      	uxth	r3, r3
 800881a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800881e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008822:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	78db      	ldrb	r3, [r3, #3]
 800882a:	2b03      	cmp	r3, #3
 800882c:	d81f      	bhi.n	800886e <USB_ActivateEndpoint+0x72>
 800882e:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <USB_ActivateEndpoint+0x38>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	08008845 	.word	0x08008845
 8008838:	08008861 	.word	0x08008861
 800883c:	08008877 	.word	0x08008877
 8008840:	08008853 	.word	0x08008853
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008844:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008848:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800884c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008850:	e012      	b.n	8008878 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008852:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008856:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800885a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800885e:	e00b      	b.n	8008878 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008860:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008864:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008868:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800886c:	e004      	b.n	8008878 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008874:	e000      	b.n	8008878 <USB_ActivateEndpoint+0x7c>
      break;
 8008876:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	441a      	add	r2, r3
 8008882:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800888a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800888e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008896:	b29b      	uxth	r3, r3
 8008898:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	441a      	add	r2, r3
 80088c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80088ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088da:	b29b      	uxth	r3, r3
 80088dc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	7b1b      	ldrb	r3, [r3, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 8178 	bne.w	8008bd8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	785b      	ldrb	r3, [r3, #1]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8084 	beq.w	80089fa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	61bb      	str	r3, [r7, #24]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	4413      	add	r3, r2
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	011a      	lsls	r2, r3, #4
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008914:	617b      	str	r3, [r7, #20]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	b29b      	uxth	r3, r3
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	827b      	strh	r3, [r7, #18]
 8008934:	8a7b      	ldrh	r3, [r7, #18]
 8008936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01b      	beq.n	8008976 <USB_ActivateEndpoint+0x17a>
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008954:	823b      	strh	r3, [r7, #16]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	441a      	add	r2, r3
 8008960:	8a3b      	ldrh	r3, [r7, #16]
 8008962:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800896a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800896e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008972:	b29b      	uxth	r3, r3
 8008974:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	78db      	ldrb	r3, [r3, #3]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d020      	beq.n	80089c0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	b29b      	uxth	r3, r3
 800898c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008994:	81bb      	strh	r3, [r7, #12]
 8008996:	89bb      	ldrh	r3, [r7, #12]
 8008998:	f083 0320 	eor.w	r3, r3, #32
 800899c:	81bb      	strh	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	441a      	add	r2, r3
 80089a8:	89bb      	ldrh	r3, [r7, #12]
 80089aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	8013      	strh	r3, [r2, #0]
 80089be:	e2d5      	b.n	8008f6c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089d6:	81fb      	strh	r3, [r7, #14]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	441a      	add	r2, r3
 80089e2:	89fb      	ldrh	r3, [r7, #14]
 80089e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	8013      	strh	r3, [r2, #0]
 80089f8:	e2b8      	b.n	8008f6c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	461a      	mov	r2, r3
 8008a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0a:	4413      	add	r3, r2
 8008a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	011a      	lsls	r2, r3, #4
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88db      	ldrh	r3, [r3, #6]
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3e:	4413      	add	r3, r2
 8008a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	011a      	lsls	r2, r3, #4
 8008a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	801a      	strh	r2, [r3, #0]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a68:	d91d      	bls.n	8008aa6 <USB_ActivateEndpoint+0x2aa>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	095b      	lsrs	r3, r3, #5
 8008a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <USB_ActivateEndpoint+0x288>
 8008a7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a80:	3b01      	subs	r3, #1
 8008a82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	029b      	lsls	r3, r3, #10
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	4313      	orrs	r3, r2
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	e026      	b.n	8008af4 <USB_ActivateEndpoint+0x2f8>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <USB_ActivateEndpoint+0x2c8>
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	801a      	strh	r2, [r3, #0]
 8008ac2:	e017      	b.n	8008af4 <USB_ActivateEndpoint+0x2f8>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	085b      	lsrs	r3, r3, #1
 8008aca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <USB_ActivateEndpoint+0x2e2>
 8008ad8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ada:	3301      	adds	r3, #1
 8008adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	029b      	lsls	r3, r3, #10
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	4313      	orrs	r3, r2
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008b02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01b      	beq.n	8008b44 <USB_ActivateEndpoint+0x348>
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b22:	843b      	strh	r3, [r7, #32]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	8c3b      	ldrh	r3, [r7, #32]
 8008b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d124      	bne.n	8008b96 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b62:	83bb      	strh	r3, [r7, #28]
 8008b64:	8bbb      	ldrh	r3, [r7, #28]
 8008b66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b6a:	83bb      	strh	r3, [r7, #28]
 8008b6c:	8bbb      	ldrh	r3, [r7, #28]
 8008b6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b72:	83bb      	strh	r3, [r7, #28]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	441a      	add	r2, r3
 8008b7e:	8bbb      	ldrh	r3, [r7, #28]
 8008b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	8013      	strh	r3, [r2, #0]
 8008b94:	e1ea      	b.n	8008f6c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bac:	83fb      	strh	r3, [r7, #30]
 8008bae:	8bfb      	ldrh	r3, [r7, #30]
 8008bb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008bb4:	83fb      	strh	r3, [r7, #30]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	441a      	add	r2, r3
 8008bc0:	8bfb      	ldrh	r3, [r7, #30]
 8008bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	8013      	strh	r3, [r2, #0]
 8008bd6:	e1c9      	b.n	8008f6c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	78db      	ldrb	r3, [r3, #3]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d11e      	bne.n	8008c1e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	441a      	add	r2, r3
 8008c04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c10:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	8013      	strh	r3, [r2, #0]
 8008c1c:	e01d      	b.n	8008c5a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c34:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	441a      	add	r2, r3
 8008c42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	461a      	mov	r2, r3
 8008c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c6a:	4413      	add	r3, r2
 8008c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	011a      	lsls	r2, r3, #4
 8008c74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	891b      	ldrh	r3, [r3, #8]
 8008c82:	085b      	lsrs	r3, r3, #1
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c8c:	801a      	strh	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c9e:	4413      	add	r3, r2
 8008ca0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	011a      	lsls	r2, r3, #4
 8008ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008cb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	895b      	ldrh	r3, [r3, #10]
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8093 	bne.w	8008df2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008cdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01b      	beq.n	8008d20 <USB_ActivateEndpoint+0x524>
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cfe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	441a      	add	r2, r3
 8008d0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008d2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01b      	beq.n	8008d70 <USB_ActivateEndpoint+0x574>
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d4e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	441a      	add	r2, r3
 8008d5a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d86:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008d88:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d8e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008d90:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d96:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	441a      	add	r2, r3
 8008da2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	441a      	add	r2, r3
 8008dda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	8013      	strh	r3, [r2, #0]
 8008df0:	e0bc      	b.n	8008f6c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d01d      	beq.n	8008e4a <USB_ActivateEndpoint+0x64e>
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e24:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	441a      	add	r2, r3
 8008e32:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008e36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008e5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d01d      	beq.n	8008ea2 <USB_ActivateEndpoint+0x6a6>
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	441a      	add	r2, r3
 8008e8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	78db      	ldrb	r3, [r3, #3]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d024      	beq.n	8008ef4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ec0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008ec4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008ec8:	f083 0320 	eor.w	r3, r3, #32
 8008ecc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	441a      	add	r2, r3
 8008eda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	8013      	strh	r3, [r2, #0]
 8008ef2:	e01d      	b.n	8008f30 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	441a      	add	r2, r3
 8008f18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008f1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	441a      	add	r2, r3
 8008f54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008f58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008f6c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3774      	adds	r7, #116	@ 0x74
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bc80      	pop	{r7}
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop

08008f7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b08d      	sub	sp, #52	@ 0x34
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	7b1b      	ldrb	r3, [r3, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f040 808e 	bne.w	80090ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	785b      	ldrb	r3, [r3, #1]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d044      	beq.n	8009022 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	81bb      	strh	r3, [r7, #12]
 8008fa6:	89bb      	ldrh	r3, [r7, #12]
 8008fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01b      	beq.n	8008fe8 <USB_DeactivateEndpoint+0x6c>
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc6:	817b      	strh	r3, [r7, #10]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	441a      	add	r2, r3
 8008fd2:	897b      	ldrh	r3, [r7, #10]
 8008fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fe0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ffe:	813b      	strh	r3, [r7, #8]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	441a      	add	r2, r3
 800900a:	893b      	ldrh	r3, [r7, #8]
 800900c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800901c:	b29b      	uxth	r3, r3
 800901e:	8013      	strh	r3, [r2, #0]
 8009020:	e192      	b.n	8009348 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	827b      	strh	r3, [r7, #18]
 8009030:	8a7b      	ldrh	r3, [r7, #18]
 8009032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01b      	beq.n	8009072 <USB_DeactivateEndpoint+0xf6>
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800904c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009050:	823b      	strh	r3, [r7, #16]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	441a      	add	r2, r3
 800905c:	8a3b      	ldrh	r3, [r7, #16]
 800905e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009066:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800906a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906e:	b29b      	uxth	r3, r3
 8009070:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009088:	81fb      	strh	r3, [r7, #14]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	441a      	add	r2, r3
 8009094:	89fb      	ldrh	r3, [r7, #14]
 8009096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800909a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800909e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	8013      	strh	r3, [r2, #0]
 80090aa:	e14d      	b.n	8009348 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f040 80a5 	bne.w	8009200 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	843b      	strh	r3, [r7, #32]
 80090c4:	8c3b      	ldrh	r3, [r7, #32]
 80090c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01b      	beq.n	8009106 <USB_DeactivateEndpoint+0x18a>
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090e4:	83fb      	strh	r3, [r7, #30]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	441a      	add	r2, r3
 80090f0:	8bfb      	ldrh	r3, [r7, #30]
 80090f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009102:	b29b      	uxth	r3, r3
 8009104:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	83bb      	strh	r3, [r7, #28]
 8009114:	8bbb      	ldrh	r3, [r7, #28]
 8009116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	d01b      	beq.n	8009156 <USB_DeactivateEndpoint+0x1da>
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	b29b      	uxth	r3, r3
 800912c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009134:	837b      	strh	r3, [r7, #26]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	441a      	add	r2, r3
 8009140:	8b7b      	ldrh	r3, [r7, #26]
 8009142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800914a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800914e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009152:	b29b      	uxth	r3, r3
 8009154:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800916c:	833b      	strh	r3, [r7, #24]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	441a      	add	r2, r3
 8009178:	8b3b      	ldrh	r3, [r7, #24]
 800917a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800917e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009186:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800918a:	b29b      	uxth	r3, r3
 800918c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a4:	82fb      	strh	r3, [r7, #22]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	441a      	add	r2, r3
 80091b0:	8afb      	ldrh	r3, [r7, #22]
 80091b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091dc:	82bb      	strh	r3, [r7, #20]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	441a      	add	r2, r3
 80091e8:	8abb      	ldrh	r3, [r7, #20]
 80091ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	8013      	strh	r3, [r2, #0]
 80091fe:	e0a3      	b.n	8009348 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800920e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01b      	beq.n	8009250 <USB_DeactivateEndpoint+0x2d4>
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800922a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	441a      	add	r2, r3
 800923a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800923c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800924c:	b29b      	uxth	r3, r3
 800924e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800925e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01b      	beq.n	80092a0 <USB_DeactivateEndpoint+0x324>
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800927a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800927e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800928c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009290:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009298:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800929c:	b29b      	uxth	r3, r3
 800929e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	441a      	add	r2, r3
 80092c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80092c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	441a      	add	r2, r3
 80092fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800930c:	b29b      	uxth	r3, r3
 800930e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009326:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	441a      	add	r2, r3
 8009332:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800933c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009344:	b29b      	uxth	r3, r3
 8009346:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3734      	adds	r7, #52	@ 0x34
 800934e:	46bd      	mov	sp, r7
 8009350:	bc80      	pop	{r7}
 8009352:	4770      	bx	lr

08009354 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b0c2      	sub	sp, #264	@ 0x108
 8009358:	af00      	add	r7, sp, #0
 800935a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800935e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009362:	6018      	str	r0, [r3, #0]
 8009364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800936c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800936e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	785b      	ldrb	r3, [r3, #1]
 800937a:	2b01      	cmp	r3, #1
 800937c:	f040 86b7 	bne.w	800a0ee <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699a      	ldr	r2, [r3, #24]
 800938c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	429a      	cmp	r2, r3
 800939a:	d908      	bls.n	80093ae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800939c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80093ac:	e007      	b.n	80093be <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80093ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80093be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	7b1b      	ldrb	r3, [r3, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d13a      	bne.n	8009444 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80093ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6959      	ldr	r1, [r3, #20]
 80093da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	88da      	ldrh	r2, [r3, #6]
 80093e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80093f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80093f4:	6800      	ldr	r0, [r0, #0]
 80093f6:	f001 fc9c 	bl	800ad32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	613b      	str	r3, [r7, #16]
 8009406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009414:	b29b      	uxth	r3, r3
 8009416:	461a      	mov	r2, r3
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	4413      	add	r3, r2
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	011a      	lsls	r2, r3, #4
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4413      	add	r3, r2
 8009430:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943a:	b29a      	uxth	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	801a      	strh	r2, [r3, #0]
 8009440:	f000 be1f 	b.w	800a082 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	78db      	ldrb	r3, [r3, #3]
 8009450:	2b02      	cmp	r3, #2
 8009452:	f040 8462 	bne.w	8009d1a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6a1a      	ldr	r2, [r3, #32]
 8009462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	429a      	cmp	r2, r3
 8009470:	f240 83df 	bls.w	8009c32 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800949a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800949e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	441a      	add	r2, r3
 80094b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80094bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094c4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80094c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80094d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6a1a      	ldr	r2, [r3, #32]
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e0:	1ad2      	subs	r2, r2, r3
 80094e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	b29b      	uxth	r3, r3
 800950c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 81c7 	beq.w	80098a4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	633b      	str	r3, [r7, #48]	@ 0x30
 8009522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	785b      	ldrb	r3, [r3, #1]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d177      	bne.n	8009622 <USB_EPStartXfer+0x2ce>
 8009532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800953e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800954c:	b29b      	uxth	r3, r3
 800954e:	461a      	mov	r2, r3
 8009550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009552:	4413      	add	r3, r2
 8009554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800955a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	011a      	lsls	r2, r3, #4
 8009564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009566:	4413      	add	r3, r2
 8009568:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800956c:	627b      	str	r3, [r7, #36]	@ 0x24
 800956e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	b29b      	uxth	r3, r3
 8009574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009578:	b29a      	uxth	r2, r3
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009582:	2b3e      	cmp	r3, #62	@ 0x3e
 8009584:	d921      	bls.n	80095ca <USB_EPStartXfer+0x276>
 8009586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009594:	f003 031f 	and.w	r3, r3, #31
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <USB_EPStartXfer+0x252>
 800959c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095a0:	3b01      	subs	r3, #1
 80095a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	029b      	lsls	r3, r3, #10
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	4313      	orrs	r3, r2
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c6:	801a      	strh	r2, [r3, #0]
 80095c8:	e050      	b.n	800966c <USB_EPStartXfer+0x318>
 80095ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <USB_EPStartXfer+0x294>
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e4:	801a      	strh	r2, [r3, #0]
 80095e6:	e041      	b.n	800966c <USB_EPStartXfer+0x318>
 80095e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ec:	085b      	lsrs	r3, r3, #1
 80095ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <USB_EPStartXfer+0x2b4>
 80095fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009602:	3301      	adds	r3, #1
 8009604:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29a      	uxth	r2, r3
 800960e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009612:	b29b      	uxth	r3, r3
 8009614:	029b      	lsls	r3, r3, #10
 8009616:	b29b      	uxth	r3, r3
 8009618:	4313      	orrs	r3, r2
 800961a:	b29a      	uxth	r2, r3
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	801a      	strh	r2, [r3, #0]
 8009620:	e024      	b.n	800966c <USB_EPStartXfer+0x318>
 8009622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d11c      	bne.n	800966c <USB_EPStartXfer+0x318>
 8009632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009640:	b29b      	uxth	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	4413      	add	r3, r2
 8009648:	633b      	str	r3, [r7, #48]	@ 0x30
 800964a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	011a      	lsls	r2, r3, #4
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	4413      	add	r3, r2
 800965c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009666:	b29a      	uxth	r2, r3
 8009668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800966c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	895b      	ldrh	r3, [r3, #10]
 8009678:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800967c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6959      	ldr	r1, [r3, #20]
 8009688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968c:	b29b      	uxth	r3, r3
 800968e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009692:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009696:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	f001 fb49 	bl	800ad32 <USB_WritePMA>
            ep->xfer_buff += len;
 80096a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695a      	ldr	r2, [r3, #20]
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b0:	441a      	add	r2, r3
 80096b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80096be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6a1a      	ldr	r2, [r3, #32]
 80096ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d90f      	bls.n	80096fa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80096da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ea:	1ad2      	subs	r2, r2, r3
 80096ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	621a      	str	r2, [r3, #32]
 80096f8:	e00e      	b.n	8009718 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80096fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800970a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2200      	movs	r2, #0
 8009716:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	785b      	ldrb	r3, [r3, #1]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d177      	bne.n	8009818 <USB_EPStartXfer+0x4c4>
 8009728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009742:	b29b      	uxth	r3, r3
 8009744:	461a      	mov	r2, r3
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	4413      	add	r3, r2
 800974a:	61bb      	str	r3, [r7, #24]
 800974c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	011a      	lsls	r2, r3, #4
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	4413      	add	r3, r2
 800975e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	b29b      	uxth	r3, r3
 800976a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800976e:	b29a      	uxth	r2, r3
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	801a      	strh	r2, [r3, #0]
 8009774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009778:	2b3e      	cmp	r3, #62	@ 0x3e
 800977a:	d921      	bls.n	80097c0 <USB_EPStartXfer+0x46c>
 800977c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009780:	095b      	lsrs	r3, r3, #5
 8009782:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978a:	f003 031f 	and.w	r3, r3, #31
 800978e:	2b00      	cmp	r3, #0
 8009790:	d104      	bne.n	800979c <USB_EPStartXfer+0x448>
 8009792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009796:	3b01      	subs	r3, #1
 8009798:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	029b      	lsls	r3, r3, #10
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	4313      	orrs	r3, r2
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	e056      	b.n	800986e <USB_EPStartXfer+0x51a>
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <USB_EPStartXfer+0x48a>
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	801a      	strh	r2, [r3, #0]
 80097dc:	e047      	b.n	800986e <USB_EPStartXfer+0x51a>
 80097de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e2:	085b      	lsrs	r3, r3, #1
 80097e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d004      	beq.n	80097fe <USB_EPStartXfer+0x4aa>
 80097f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097f8:	3301      	adds	r3, #1
 80097fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	b29a      	uxth	r2, r3
 8009804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009808:	b29b      	uxth	r3, r3
 800980a:	029b      	lsls	r3, r3, #10
 800980c:	b29b      	uxth	r3, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	b29a      	uxth	r2, r3
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	801a      	strh	r2, [r3, #0]
 8009816:	e02a      	b.n	800986e <USB_EPStartXfer+0x51a>
 8009818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	785b      	ldrb	r3, [r3, #1]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d122      	bne.n	800986e <USB_EPStartXfer+0x51a>
 8009828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	623b      	str	r3, [r7, #32]
 8009834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009842:	b29b      	uxth	r3, r3
 8009844:	461a      	mov	r2, r3
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	4413      	add	r3, r2
 800984a:	623b      	str	r3, [r7, #32]
 800984c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	011a      	lsls	r2, r3, #4
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	4413      	add	r3, r2
 800985e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009862:	61fb      	str	r3, [r7, #28]
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009868:	b29a      	uxth	r2, r3
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800986e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	891b      	ldrh	r3, [r3, #8]
 800987a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800987e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6959      	ldr	r1, [r3, #20]
 800988a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800988e:	b29b      	uxth	r3, r3
 8009890:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009894:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009898:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800989c:	6800      	ldr	r0, [r0, #0]
 800989e:	f001 fa48 	bl	800ad32 <USB_WritePMA>
 80098a2:	e3ee      	b.n	800a082 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	785b      	ldrb	r3, [r3, #1]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d177      	bne.n	80099a4 <USB_EPStartXfer+0x650>
 80098b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	461a      	mov	r2, r3
 80098d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098d4:	4413      	add	r3, r2
 80098d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	011a      	lsls	r2, r3, #4
 80098e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098e8:	4413      	add	r3, r2
 80098ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80098ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80098f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098fe:	801a      	strh	r2, [r3, #0]
 8009900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009904:	2b3e      	cmp	r3, #62	@ 0x3e
 8009906:	d921      	bls.n	800994c <USB_EPStartXfer+0x5f8>
 8009908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800990c:	095b      	lsrs	r3, r3, #5
 800990e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009916:	f003 031f 	and.w	r3, r3, #31
 800991a:	2b00      	cmp	r3, #0
 800991c:	d104      	bne.n	8009928 <USB_EPStartXfer+0x5d4>
 800991e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009922:	3b01      	subs	r3, #1
 8009924:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29a      	uxth	r2, r3
 800992e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009932:	b29b      	uxth	r3, r3
 8009934:	029b      	lsls	r3, r3, #10
 8009936:	b29b      	uxth	r3, r3
 8009938:	4313      	orrs	r3, r2
 800993a:	b29b      	uxth	r3, r3
 800993c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009944:	b29a      	uxth	r2, r3
 8009946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	e056      	b.n	80099fa <USB_EPStartXfer+0x6a6>
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <USB_EPStartXfer+0x616>
 8009954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	b29b      	uxth	r3, r3
 800995a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800995e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009962:	b29a      	uxth	r2, r3
 8009964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	e047      	b.n	80099fa <USB_EPStartXfer+0x6a6>
 800996a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <USB_EPStartXfer+0x636>
 8009980:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009984:	3301      	adds	r3, #1
 8009986:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800998a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	b29a      	uxth	r2, r3
 8009990:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009994:	b29b      	uxth	r3, r3
 8009996:	029b      	lsls	r3, r3, #10
 8009998:	b29b      	uxth	r3, r3
 800999a:	4313      	orrs	r3, r2
 800999c:	b29a      	uxth	r2, r3
 800999e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099a0:	801a      	strh	r2, [r3, #0]
 80099a2:	e02a      	b.n	80099fa <USB_EPStartXfer+0x6a6>
 80099a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d122      	bne.n	80099fa <USB_EPStartXfer+0x6a6>
 80099b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	653b      	str	r3, [r7, #80]	@ 0x50
 80099c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	461a      	mov	r2, r3
 80099d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099d4:	4413      	add	r3, r2
 80099d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80099d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	011a      	lsls	r2, r3, #4
 80099e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099e8:	4413      	add	r3, r2
 80099ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	891b      	ldrh	r3, [r3, #8]
 8009a06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6959      	ldr	r1, [r3, #20]
 8009a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a20:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a24:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a28:	6800      	ldr	r0, [r0, #0]
 8009a2a:	f001 f982 	bl	800ad32 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	695a      	ldr	r2, [r3, #20]
 8009a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3e:	441a      	add	r2, r3
 8009a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6a1a      	ldr	r2, [r3, #32]
 8009a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d90f      	bls.n	8009a88 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6a1a      	ldr	r2, [r3, #32]
 8009a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a78:	1ad2      	subs	r2, r2, r3
 8009a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	621a      	str	r2, [r3, #32]
 8009a86:	e00e      	b.n	8009aa6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	785b      	ldrb	r3, [r3, #1]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d177      	bne.n	8009bb2 <USB_EPStartXfer+0x85e>
 8009ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	461a      	mov	r2, r3
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	4413      	add	r3, r2
 8009ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	011a      	lsls	r2, r3, #4
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	4413      	add	r3, r2
 8009af8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b0c:	801a      	strh	r2, [r3, #0]
 8009b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b12:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b14:	d921      	bls.n	8009b5a <USB_EPStartXfer+0x806>
 8009b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1a:	095b      	lsrs	r3, r3, #5
 8009b1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b24:	f003 031f 	and.w	r3, r3, #31
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d104      	bne.n	8009b36 <USB_EPStartXfer+0x7e2>
 8009b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b30:	3b01      	subs	r3, #1
 8009b32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	029b      	lsls	r3, r3, #10
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	4313      	orrs	r3, r2
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b56:	801a      	strh	r2, [r3, #0]
 8009b58:	e050      	b.n	8009bfc <USB_EPStartXfer+0x8a8>
 8009b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <USB_EPStartXfer+0x824>
 8009b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b74:	801a      	strh	r2, [r3, #0]
 8009b76:	e041      	b.n	8009bfc <USB_EPStartXfer+0x8a8>
 8009b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7c:	085b      	lsrs	r3, r3, #1
 8009b7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <USB_EPStartXfer+0x844>
 8009b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b92:	3301      	adds	r3, #1
 8009b94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	029b      	lsls	r3, r3, #10
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bae:	801a      	strh	r2, [r3, #0]
 8009bb0:	e024      	b.n	8009bfc <USB_EPStartXfer+0x8a8>
 8009bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d11c      	bne.n	8009bfc <USB_EPStartXfer+0x8a8>
 8009bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bd6:	4413      	add	r3, r2
 8009bd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	011a      	lsls	r2, r3, #4
 8009be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bea:	4413      	add	r3, r2
 8009bec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	895b      	ldrh	r3, [r3, #10]
 8009c08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6959      	ldr	r1, [r3, #20]
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c2a:	6800      	ldr	r0, [r0, #0]
 8009c2c:	f001 f881 	bl	800ad32 <USB_WritePMA>
 8009c30:	e227      	b.n	800a082 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c68:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	441a      	add	r2, r3
 8009c86:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	461a      	mov	r2, r3
 8009cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cbe:	4413      	add	r3, r2
 8009cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	011a      	lsls	r2, r3, #4
 8009cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ce2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	891b      	ldrh	r3, [r3, #8]
 8009cf0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6959      	ldr	r1, [r3, #20]
 8009d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009d12:	6800      	ldr	r0, [r0, #0]
 8009d14:	f001 f80d 	bl	800ad32 <USB_WritePMA>
 8009d18:	e1b3      	b.n	800a082 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6a1a      	ldr	r2, [r3, #32]
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2a:	1ad2      	subs	r2, r2, r3
 8009d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 80c6 	beq.w	8009eec <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	785b      	ldrb	r3, [r3, #1]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d177      	bne.n	8009e6c <USB_EPStartXfer+0xb18>
 8009d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d9c:	4413      	add	r3, r2
 8009d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	011a      	lsls	r2, r3, #4
 8009dae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009db0:	4413      	add	r3, r2
 8009db2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009db6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dc6:	801a      	strh	r2, [r3, #0]
 8009dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dcc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dce:	d921      	bls.n	8009e14 <USB_EPStartXfer+0xac0>
 8009dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd4:	095b      	lsrs	r3, r3, #5
 8009dd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dde:	f003 031f 	and.w	r3, r3, #31
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d104      	bne.n	8009df0 <USB_EPStartXfer+0xa9c>
 8009de6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009dea:	3b01      	subs	r3, #1
 8009dec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e10:	801a      	strh	r2, [r3, #0]
 8009e12:	e050      	b.n	8009eb6 <USB_EPStartXfer+0xb62>
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10a      	bne.n	8009e32 <USB_EPStartXfer+0xade>
 8009e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e2e:	801a      	strh	r2, [r3, #0]
 8009e30:	e041      	b.n	8009eb6 <USB_EPStartXfer+0xb62>
 8009e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e36:	085b      	lsrs	r3, r3, #1
 8009e38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e40:	f003 0301 	and.w	r3, r3, #1
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d004      	beq.n	8009e52 <USB_EPStartXfer+0xafe>
 8009e48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	029b      	lsls	r3, r3, #10
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	4313      	orrs	r3, r2
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e68:	801a      	strh	r2, [r3, #0]
 8009e6a:	e024      	b.n	8009eb6 <USB_EPStartXfer+0xb62>
 8009e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d11c      	bne.n	8009eb6 <USB_EPStartXfer+0xb62>
 8009e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e90:	4413      	add	r3, r2
 8009e92:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	011a      	lsls	r2, r3, #4
 8009ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009eaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	895b      	ldrh	r3, [r3, #10]
 8009ec2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6959      	ldr	r1, [r3, #20]
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009edc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009ee0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ee4:	6800      	ldr	r0, [r0, #0]
 8009ee6:	f000 ff24 	bl	800ad32 <USB_WritePMA>
 8009eea:	e0ca      	b.n	800a082 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	785b      	ldrb	r3, [r3, #1]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d177      	bne.n	8009fec <USB_EPStartXfer+0xc98>
 8009efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	461a      	mov	r2, r3
 8009f1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f1c:	4413      	add	r3, r2
 8009f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	011a      	lsls	r2, r3, #4
 8009f2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f30:	4413      	add	r3, r2
 8009f32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009f36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f46:	801a      	strh	r2, [r3, #0]
 8009f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f4e:	d921      	bls.n	8009f94 <USB_EPStartXfer+0xc40>
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f54:	095b      	lsrs	r3, r3, #5
 8009f56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5e:	f003 031f 	and.w	r3, r3, #31
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d104      	bne.n	8009f70 <USB_EPStartXfer+0xc1c>
 8009f66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	029b      	lsls	r3, r3, #10
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	4313      	orrs	r3, r2
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f90:	801a      	strh	r2, [r3, #0]
 8009f92:	e05c      	b.n	800a04e <USB_EPStartXfer+0xcfa>
 8009f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <USB_EPStartXfer+0xc5e>
 8009f9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fae:	801a      	strh	r2, [r3, #0]
 8009fb0:	e04d      	b.n	800a04e <USB_EPStartXfer+0xcfa>
 8009fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb6:	085b      	lsrs	r3, r3, #1
 8009fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d004      	beq.n	8009fd2 <USB_EPStartXfer+0xc7e>
 8009fc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009fcc:	3301      	adds	r3, #1
 8009fce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	029b      	lsls	r3, r3, #10
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fe8:	801a      	strh	r2, [r3, #0]
 8009fea:	e030      	b.n	800a04e <USB_EPStartXfer+0xcfa>
 8009fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	785b      	ldrb	r3, [r3, #1]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d128      	bne.n	800a04e <USB_EPStartXfer+0xcfa>
 8009ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a00e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a018:	b29b      	uxth	r3, r3
 800a01a:	461a      	mov	r2, r3
 800a01c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a020:	4413      	add	r3, r2
 800a022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	011a      	lsls	r2, r3, #4
 800a034:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a038:	4413      	add	r3, r2
 800a03a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a03e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a046:	b29a      	uxth	r2, r3
 800a048:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a04c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	891b      	ldrh	r3, [r3, #8]
 800a05a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a05e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6959      	ldr	r1, [r3, #20]
 800a06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a06e:	b29b      	uxth	r3, r3
 800a070:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a074:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a078:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a07c:	6800      	ldr	r0, [r0, #0]
 800a07e:	f000 fe58 	bl	800ad32 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a086:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0a8:	817b      	strh	r3, [r7, #10]
 800a0aa:	897b      	ldrh	r3, [r7, #10]
 800a0ac:	f083 0310 	eor.w	r3, r3, #16
 800a0b0:	817b      	strh	r3, [r7, #10]
 800a0b2:	897b      	ldrh	r3, [r7, #10]
 800a0b4:	f083 0320 	eor.w	r3, r3, #32
 800a0b8:	817b      	strh	r3, [r7, #10]
 800a0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	441a      	add	r2, r3
 800a0d4:	897b      	ldrh	r3, [r7, #10]
 800a0d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	8013      	strh	r3, [r2, #0]
 800a0ea:	f000 bcde 	b.w	800aaaa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	7b1b      	ldrb	r3, [r3, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f040 80bb 	bne.w	800a276 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699a      	ldr	r2, [r3, #24]
 800a10c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d917      	bls.n	800a14c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	699a      	ldr	r2, [r3, #24]
 800a138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a13c:	1ad2      	subs	r2, r2, r3
 800a13e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	619a      	str	r2, [r3, #24]
 800a14a:	e00e      	b.n	800a16a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a15c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2200      	movs	r2, #0
 800a168:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a16a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a16e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a17c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a186:	b29b      	uxth	r3, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a18e:	4413      	add	r3, r2
 800a190:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	011a      	lsls	r2, r3, #4
 800a1a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a1ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a1b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1c2:	801a      	strh	r2, [r3, #0]
 800a1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1ca:	d924      	bls.n	800a216 <USB_EPStartXfer+0xec2>
 800a1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d0:	095b      	lsrs	r3, r3, #5
 800a1d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1da:	f003 031f 	and.w	r3, r3, #31
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d104      	bne.n	800a1ec <USB_EPStartXfer+0xe98>
 800a1e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	029b      	lsls	r3, r3, #10
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	4313      	orrs	r3, r2
 800a200:	b29b      	uxth	r3, r3
 800a202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a210:	801a      	strh	r2, [r3, #0]
 800a212:	f000 bc10 	b.w	800aa36 <USB_EPStartXfer+0x16e2>
 800a216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10c      	bne.n	800a238 <USB_EPStartXfer+0xee4>
 800a21e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	b29b      	uxth	r3, r3
 800a226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a22a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a22e:	b29a      	uxth	r2, r3
 800a230:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a234:	801a      	strh	r2, [r3, #0]
 800a236:	e3fe      	b.n	800aa36 <USB_EPStartXfer+0x16e2>
 800a238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a23c:	085b      	lsrs	r3, r3, #1
 800a23e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d004      	beq.n	800a258 <USB_EPStartXfer+0xf04>
 800a24e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a252:	3301      	adds	r3, #1
 800a254:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	b29a      	uxth	r2, r3
 800a260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a264:	b29b      	uxth	r3, r3
 800a266:	029b      	lsls	r3, r3, #10
 800a268:	b29b      	uxth	r3, r3
 800a26a:	4313      	orrs	r3, r2
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a272:	801a      	strh	r2, [r3, #0]
 800a274:	e3df      	b.n	800aa36 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a27a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	78db      	ldrb	r3, [r3, #3]
 800a282:	2b02      	cmp	r3, #2
 800a284:	f040 8218 	bne.w	800a6b8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f040 809d 	bne.w	800a3d4 <USB_EPStartXfer+0x1080>
 800a29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a29e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2be:	4413      	add	r3, r2
 800a2c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	011a      	lsls	r2, r3, #4
 800a2d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a2dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a2e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2f2:	801a      	strh	r2, [r3, #0]
 800a2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	2b3e      	cmp	r3, #62	@ 0x3e
 800a302:	d92b      	bls.n	800a35c <USB_EPStartXfer+0x1008>
 800a304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	095b      	lsrs	r3, r3, #5
 800a312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f003 031f 	and.w	r3, r3, #31
 800a326:	2b00      	cmp	r3, #0
 800a328:	d104      	bne.n	800a334 <USB_EPStartXfer+0xfe0>
 800a32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a32e:	3b01      	subs	r3, #1
 800a330:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a340:	b29b      	uxth	r3, r3
 800a342:	029b      	lsls	r3, r3, #10
 800a344:	b29b      	uxth	r3, r3
 800a346:	4313      	orrs	r3, r2
 800a348:	b29b      	uxth	r3, r3
 800a34a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a34e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a352:	b29a      	uxth	r2, r3
 800a354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a358:	801a      	strh	r2, [r3, #0]
 800a35a:	e070      	b.n	800a43e <USB_EPStartXfer+0x10ea>
 800a35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10c      	bne.n	800a386 <USB_EPStartXfer+0x1032>
 800a36c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	b29b      	uxth	r3, r3
 800a374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a382:	801a      	strh	r2, [r3, #0]
 800a384:	e05b      	b.n	800a43e <USB_EPStartXfer+0x10ea>
 800a386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	085b      	lsrs	r3, r3, #1
 800a394:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a39c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d004      	beq.n	800a3b6 <USB_EPStartXfer+0x1062>
 800a3ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	029b      	lsls	r3, r3, #10
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3d0:	801a      	strh	r2, [r3, #0]
 800a3d2:	e034      	b.n	800a43e <USB_EPStartXfer+0x10ea>
 800a3d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	785b      	ldrb	r3, [r3, #1]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d12c      	bne.n	800a43e <USB_EPStartXfer+0x10ea>
 800a3e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a400:	b29b      	uxth	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a408:	4413      	add	r3, r2
 800a40a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	011a      	lsls	r2, r3, #4
 800a41c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a420:	4413      	add	r3, r2
 800a422:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a42e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	b29a      	uxth	r2, r3
 800a438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a43c:	801a      	strh	r2, [r3, #0]
 800a43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a44c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	785b      	ldrb	r3, [r3, #1]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f040 809d 	bne.w	800a598 <USB_EPStartXfer+0x1244>
 800a45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	461a      	mov	r2, r3
 800a47e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a482:	4413      	add	r3, r2
 800a484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	011a      	lsls	r2, r3, #4
 800a496:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a49a:	4413      	add	r3, r2
 800a49c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a4a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4b6:	801a      	strh	r2, [r3, #0]
 800a4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4c6:	d92b      	bls.n	800a520 <USB_EPStartXfer+0x11cc>
 800a4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	095b      	lsrs	r3, r3, #5
 800a4d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	f003 031f 	and.w	r3, r3, #31
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d104      	bne.n	800a4f8 <USB_EPStartXfer+0x11a4>
 800a4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a504:	b29b      	uxth	r3, r3
 800a506:	029b      	lsls	r3, r3, #10
 800a508:	b29b      	uxth	r3, r3
 800a50a:	4313      	orrs	r3, r2
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a516:	b29a      	uxth	r2, r3
 800a518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a51c:	801a      	strh	r2, [r3, #0]
 800a51e:	e069      	b.n	800a5f4 <USB_EPStartXfer+0x12a0>
 800a520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10c      	bne.n	800a54a <USB_EPStartXfer+0x11f6>
 800a530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	b29b      	uxth	r3, r3
 800a538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a53c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a540:	b29a      	uxth	r2, r3
 800a542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a546:	801a      	strh	r2, [r3, #0]
 800a548:	e054      	b.n	800a5f4 <USB_EPStartXfer+0x12a0>
 800a54a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a54e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	085b      	lsrs	r3, r3, #1
 800a558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a55c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d004      	beq.n	800a57a <USB_EPStartXfer+0x1226>
 800a570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a574:	3301      	adds	r3, #1
 800a576:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a57a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a57e:	881b      	ldrh	r3, [r3, #0]
 800a580:	b29a      	uxth	r2, r3
 800a582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a586:	b29b      	uxth	r3, r3
 800a588:	029b      	lsls	r3, r3, #10
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4313      	orrs	r3, r2
 800a58e:	b29a      	uxth	r2, r3
 800a590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a594:	801a      	strh	r2, [r3, #0]
 800a596:	e02d      	b.n	800a5f4 <USB_EPStartXfer+0x12a0>
 800a598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a59c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d125      	bne.n	800a5f4 <USB_EPStartXfer+0x12a0>
 800a5a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a5be:	4413      	add	r3, r2
 800a5c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a5c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	011a      	lsls	r2, r3, #4
 800a5d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a5dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a5e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5f2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a5f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69db      	ldr	r3, [r3, #28]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 8218 	beq.w	800aa36 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a60a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a626:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a62a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d005      	beq.n	800a63e <USB_EPStartXfer+0x12ea>
 800a632:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10d      	bne.n	800a65a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a63e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a646:	2b00      	cmp	r3, #0
 800a648:	f040 81f5 	bne.w	800aa36 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a64c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a654:	2b00      	cmp	r3, #0
 800a656:	f040 81ee 	bne.w	800aa36 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a67c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a680:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	441a      	add	r2, r3
 800a69e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a6a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	8013      	strh	r3, [r2, #0]
 800a6b6:	e1be      	b.n	800aa36 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	78db      	ldrb	r3, [r3, #3]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	f040 81b4 	bne.w	800aa32 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	699a      	ldr	r2, [r3, #24]
 800a6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d917      	bls.n	800a716 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	699a      	ldr	r2, [r3, #24]
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a706:	1ad2      	subs	r2, r2, r3
 800a708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	619a      	str	r2, [r3, #24]
 800a714:	e00e      	b.n	800a734 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a71a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2200      	movs	r2, #0
 800a732:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	785b      	ldrb	r3, [r3, #1]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f040 8085 	bne.w	800a850 <USB_EPStartXfer+0x14fc>
 800a746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a74a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a762:	b29b      	uxth	r3, r3
 800a764:	461a      	mov	r2, r3
 800a766:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a76a:	4413      	add	r3, r2
 800a76c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	011a      	lsls	r2, r3, #4
 800a77e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a782:	4413      	add	r3, r2
 800a784:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a788:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a78c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a798:	b29a      	uxth	r2, r3
 800a79a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a79e:	801a      	strh	r2, [r3, #0]
 800a7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7a6:	d923      	bls.n	800a7f0 <USB_EPStartXfer+0x149c>
 800a7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ac:	095b      	lsrs	r3, r3, #5
 800a7ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b6:	f003 031f 	and.w	r3, r3, #31
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d104      	bne.n	800a7c8 <USB_EPStartXfer+0x1474>
 800a7be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a7c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	029b      	lsls	r3, r3, #10
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7ec:	801a      	strh	r2, [r3, #0]
 800a7ee:	e060      	b.n	800a8b2 <USB_EPStartXfer+0x155e>
 800a7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10c      	bne.n	800a812 <USB_EPStartXfer+0x14be>
 800a7f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a808:	b29a      	uxth	r2, r3
 800a80a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a80e:	801a      	strh	r2, [r3, #0]
 800a810:	e04f      	b.n	800a8b2 <USB_EPStartXfer+0x155e>
 800a812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a816:	085b      	lsrs	r3, r3, #1
 800a818:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b00      	cmp	r3, #0
 800a826:	d004      	beq.n	800a832 <USB_EPStartXfer+0x14de>
 800a828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a82c:	3301      	adds	r3, #1
 800a82e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a836:	881b      	ldrh	r3, [r3, #0]
 800a838:	b29a      	uxth	r2, r3
 800a83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a83e:	b29b      	uxth	r3, r3
 800a840:	029b      	lsls	r3, r3, #10
 800a842:	b29b      	uxth	r3, r3
 800a844:	4313      	orrs	r3, r2
 800a846:	b29a      	uxth	r2, r3
 800a848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a84c:	801a      	strh	r2, [r3, #0]
 800a84e:	e030      	b.n	800a8b2 <USB_EPStartXfer+0x155e>
 800a850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	785b      	ldrb	r3, [r3, #1]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d128      	bne.n	800a8b2 <USB_EPStartXfer+0x155e>
 800a860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	461a      	mov	r2, r3
 800a880:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a884:	4413      	add	r3, r2
 800a886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a88a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a88e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	011a      	lsls	r2, r3, #4
 800a898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a89c:	4413      	add	r3, r2
 800a89e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a8a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a8b0:	801a      	strh	r2, [r3, #0]
 800a8b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	785b      	ldrb	r3, [r3, #1]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f040 8085 	bne.w	800a9dc <USB_EPStartXfer+0x1688>
 800a8d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	011a      	lsls	r2, r3, #4
 800a90a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a90e:	4413      	add	r3, r2
 800a910:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a918:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b29b      	uxth	r3, r3
 800a920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a924:	b29a      	uxth	r2, r3
 800a926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a92a:	801a      	strh	r2, [r3, #0]
 800a92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a930:	2b3e      	cmp	r3, #62	@ 0x3e
 800a932:	d923      	bls.n	800a97c <USB_EPStartXfer+0x1628>
 800a934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a938:	095b      	lsrs	r3, r3, #5
 800a93a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a942:	f003 031f 	and.w	r3, r3, #31
 800a946:	2b00      	cmp	r3, #0
 800a948:	d104      	bne.n	800a954 <USB_EPStartXfer+0x1600>
 800a94a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a94e:	3b01      	subs	r3, #1
 800a950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a960:	b29b      	uxth	r3, r3
 800a962:	029b      	lsls	r3, r3, #10
 800a964:	b29b      	uxth	r3, r3
 800a966:	4313      	orrs	r3, r2
 800a968:	b29b      	uxth	r3, r3
 800a96a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a96e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a972:	b29a      	uxth	r2, r3
 800a974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a978:	801a      	strh	r2, [r3, #0]
 800a97a:	e05c      	b.n	800aa36 <USB_EPStartXfer+0x16e2>
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10c      	bne.n	800a99e <USB_EPStartXfer+0x164a>
 800a984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a994:	b29a      	uxth	r2, r3
 800a996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a99a:	801a      	strh	r2, [r3, #0]
 800a99c:	e04b      	b.n	800aa36 <USB_EPStartXfer+0x16e2>
 800a99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9a2:	085b      	lsrs	r3, r3, #1
 800a9a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d004      	beq.n	800a9be <USB_EPStartXfer+0x166a>
 800a9b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	029b      	lsls	r3, r3, #10
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9d8:	801a      	strh	r2, [r3, #0]
 800a9da:	e02c      	b.n	800aa36 <USB_EPStartXfer+0x16e2>
 800a9dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d124      	bne.n	800aa36 <USB_EPStartXfer+0x16e2>
 800a9ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa02:	4413      	add	r3, r2
 800aa04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	011a      	lsls	r2, r3, #4
 800aa16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aa20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa2e:	801a      	strh	r2, [r3, #0]
 800aa30:	e001      	b.n	800aa36 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e03a      	b.n	800aaac <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aa60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aa6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aa78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	441a      	add	r2, r3
 800aa92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	785b      	ldrb	r3, [r3, #1]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d020      	beq.n	800ab0a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4413      	add	r3, r2
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aade:	81bb      	strh	r3, [r7, #12]
 800aae0:	89bb      	ldrh	r3, [r7, #12]
 800aae2:	f083 0310 	eor.w	r3, r3, #16
 800aae6:	81bb      	strh	r3, [r7, #12]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	441a      	add	r2, r3
 800aaf2:	89bb      	ldrh	r3, [r7, #12]
 800aaf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aafc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	8013      	strh	r3, [r2, #0]
 800ab08:	e01f      	b.n	800ab4a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab20:	81fb      	strh	r3, [r7, #14]
 800ab22:	89fb      	ldrh	r3, [r7, #14]
 800ab24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab28:	81fb      	strh	r3, [r7, #14]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	441a      	add	r2, r3
 800ab34:	89fb      	ldrh	r3, [r7, #14]
 800ab36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bc80      	pop	{r7}
 800ab54:	4770      	bx	lr

0800ab56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b087      	sub	sp, #28
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	7b1b      	ldrb	r3, [r3, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f040 809d 	bne.w	800aca4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d04c      	beq.n	800ac0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	823b      	strh	r3, [r7, #16]
 800ab80:	8a3b      	ldrh	r3, [r7, #16]
 800ab82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d01b      	beq.n	800abc2 <USB_EPClearStall+0x6c>
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba0:	81fb      	strh	r3, [r7, #14]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	441a      	add	r2, r3
 800abac:	89fb      	ldrh	r3, [r7, #14]
 800abae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	78db      	ldrb	r3, [r3, #3]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d06c      	beq.n	800aca4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abe0:	81bb      	strh	r3, [r7, #12]
 800abe2:	89bb      	ldrh	r3, [r7, #12]
 800abe4:	f083 0320 	eor.w	r3, r3, #32
 800abe8:	81bb      	strh	r3, [r7, #12]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	441a      	add	r2, r3
 800abf4:	89bb      	ldrh	r3, [r7, #12]
 800abf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	8013      	strh	r3, [r2, #0]
 800ac0a:	e04b      	b.n	800aca4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	82fb      	strh	r3, [r7, #22]
 800ac1a:	8afb      	ldrh	r3, [r7, #22]
 800ac1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01b      	beq.n	800ac5c <USB_EPClearStall+0x106>
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac3a:	82bb      	strh	r3, [r7, #20]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	441a      	add	r2, r3
 800ac46:	8abb      	ldrh	r3, [r7, #20]
 800ac48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac72:	827b      	strh	r3, [r7, #18]
 800ac74:	8a7b      	ldrh	r3, [r7, #18]
 800ac76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac7a:	827b      	strh	r3, [r7, #18]
 800ac7c:	8a7b      	ldrh	r3, [r7, #18]
 800ac7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac82:	827b      	strh	r3, [r7, #18]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	441a      	add	r2, r3
 800ac8e:	8a7b      	ldrh	r3, [r7, #18]
 800ac90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	bc80      	pop	{r7}
 800acae:	4770      	bx	lr

0800acb0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d103      	bne.n	800acca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2280      	movs	r2, #128	@ 0x80
 800acc6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bc80      	pop	{r7}
 800acd4:	4770      	bx	lr

0800acd6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b083      	sub	sp, #12
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bc80      	pop	{r7}
 800ace8:	4770      	bx	lr

0800acea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bc80      	pop	{r7}
 800acfc:	4770      	bx	lr

0800acfe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b085      	sub	sp, #20
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad10:	68fb      	ldr	r3, [r7, #12]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bc80      	pop	{r7}
 800ad1a:	4770      	bx	lr

0800ad1c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr

0800ad32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b08b      	sub	sp, #44	@ 0x2c
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	461a      	mov	r2, r3
 800ad40:	460b      	mov	r3, r1
 800ad42:	80fb      	strh	r3, [r7, #6]
 800ad44:	4613      	mov	r3, r2
 800ad46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad48:	88bb      	ldrh	r3, [r7, #4]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	085b      	lsrs	r3, r3, #1
 800ad4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad58:	88fb      	ldrh	r3, [r7, #6]
 800ad5a:	005a      	lsls	r2, r3, #1
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad64:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad6a:	e01e      	b.n	800adaa <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	3301      	adds	r3, #1
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	b21a      	sxth	r2, r3
 800ad7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	b21b      	sxth	r3, r3
 800ad84:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	8a7a      	ldrh	r2, [r7, #18]
 800ad8a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	3302      	adds	r3, #2
 800ad90:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	3302      	adds	r3, #2
 800ad96:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	3301      	adds	r3, #1
 800ada2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ada4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada6:	3b01      	subs	r3, #1
 800ada8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1dd      	bne.n	800ad6c <USB_WritePMA+0x3a>
  }
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	372c      	adds	r7, #44	@ 0x2c
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bc80      	pop	{r7}
 800adba:	4770      	bx	lr

0800adbc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b08b      	sub	sp, #44	@ 0x2c
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4611      	mov	r1, r2
 800adc8:	461a      	mov	r2, r3
 800adca:	460b      	mov	r3, r1
 800adcc:	80fb      	strh	r3, [r7, #6]
 800adce:	4613      	mov	r3, r2
 800add0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800add2:	88bb      	ldrh	r3, [r7, #4]
 800add4:	085b      	lsrs	r3, r3, #1
 800add6:	b29b      	uxth	r3, r3
 800add8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ade2:	88fb      	ldrh	r3, [r7, #6]
 800ade4:	005a      	lsls	r2, r3, #1
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800adf4:	e01b      	b.n	800ae2e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	3302      	adds	r3, #2
 800ae02:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	0a1b      	lsrs	r3, r3, #8
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	3302      	adds	r3, #2
 800ae26:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800ae28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1e0      	bne.n	800adf6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ae34:	88bb      	ldrh	r3, [r7, #4]
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d007      	beq.n	800ae50 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	701a      	strb	r2, [r3, #0]
  }
}
 800ae50:	bf00      	nop
 800ae52:	372c      	adds	r7, #44	@ 0x2c
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bc80      	pop	{r7}
 800ae58:	4770      	bx	lr

0800ae5a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	460b      	mov	r3, r1
 800ae64:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	7c1b      	ldrb	r3, [r3, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d115      	bne.n	800ae9e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae76:	2202      	movs	r2, #2
 800ae78:	2181      	movs	r1, #129	@ 0x81
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f001 fe97 	bl	800cbae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f001 fe8d 	bl	800cbae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800ae9c:	e012      	b.n	800aec4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae9e:	2340      	movs	r3, #64	@ 0x40
 800aea0:	2202      	movs	r2, #2
 800aea2:	2181      	movs	r1, #129	@ 0x81
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 fe82 	bl	800cbae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aeb0:	2340      	movs	r3, #64	@ 0x40
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f001 fe79 	bl	800cbae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aec4:	2308      	movs	r3, #8
 800aec6:	2203      	movs	r2, #3
 800aec8:	2182      	movs	r1, #130	@ 0x82
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f001 fe6f 	bl	800cbae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aed6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aeda:	f001 ff8f 	bl	800cdfc <USBD_static_malloc>
 800aede:	4602      	mov	r2, r0
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d102      	bne.n	800aef6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
 800aef4:	e026      	b.n	800af44 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aefc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	7c1b      	ldrb	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d109      	bne.n	800af34 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af2a:	2101      	movs	r1, #1
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 ff2e 	bl	800cd8e <USBD_LL_PrepareReceive>
 800af32:	e007      	b.n	800af44 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af3a:	2340      	movs	r3, #64	@ 0x40
 800af3c:	2101      	movs	r1, #1
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f001 ff25 	bl	800cd8e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800af44:	7bfb      	ldrb	r3, [r7, #15]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	460b      	mov	r3, r1
 800af58:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af5e:	2181      	movs	r1, #129	@ 0x81
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f001 fe4a 	bl	800cbfa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800af6c:	2101      	movs	r1, #1
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f001 fe43 	bl	800cbfa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800af7c:	2182      	movs	r1, #130	@ 0x82
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f001 fe3b 	bl	800cbfa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00e      	beq.n	800afb2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afa4:	4618      	mov	r0, r3
 800afa6:	f001 ff35 	bl	800ce14 <USBD_static_free>
    pdev->pClassData = NULL;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afcc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800afce:	2300      	movs	r3, #0
 800afd0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800afd2:	2300      	movs	r3, #0
 800afd4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800afd6:	2300      	movs	r3, #0
 800afd8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d039      	beq.n	800b05a <USBD_CDC_Setup+0x9e>
 800afe6:	2b20      	cmp	r3, #32
 800afe8:	d17f      	bne.n	800b0ea <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	88db      	ldrh	r3, [r3, #6]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d029      	beq.n	800b046 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	b25b      	sxtb	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	da11      	bge.n	800b020 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b008:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	88d2      	ldrh	r2, [r2, #6]
 800b00e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b010:	6939      	ldr	r1, [r7, #16]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	88db      	ldrh	r3, [r3, #6]
 800b016:	461a      	mov	r2, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 fa05 	bl	800c428 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b01e:	e06b      	b.n	800b0f8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	785a      	ldrb	r2, [r3, #1]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	88db      	ldrh	r3, [r3, #6]
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b036:	6939      	ldr	r1, [r7, #16]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	88db      	ldrh	r3, [r3, #6]
 800b03c:	461a      	mov	r2, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 fa20 	bl	800c484 <USBD_CtlPrepareRx>
      break;
 800b044:	e058      	b.n	800b0f8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	7850      	ldrb	r0, [r2, #1]
 800b052:	2200      	movs	r2, #0
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	4798      	blx	r3
      break;
 800b058:	e04e      	b.n	800b0f8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	785b      	ldrb	r3, [r3, #1]
 800b05e:	2b0b      	cmp	r3, #11
 800b060:	d02e      	beq.n	800b0c0 <USBD_CDC_Setup+0x104>
 800b062:	2b0b      	cmp	r3, #11
 800b064:	dc38      	bgt.n	800b0d8 <USBD_CDC_Setup+0x11c>
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <USBD_CDC_Setup+0xb4>
 800b06a:	2b0a      	cmp	r3, #10
 800b06c:	d014      	beq.n	800b098 <USBD_CDC_Setup+0xdc>
 800b06e:	e033      	b.n	800b0d8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b076:	2b03      	cmp	r3, #3
 800b078:	d107      	bne.n	800b08a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b07a:	f107 030c 	add.w	r3, r7, #12
 800b07e:	2202      	movs	r2, #2
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f001 f9d0 	bl	800c428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b088:	e02e      	b.n	800b0e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 f961 	bl	800c354 <USBD_CtlError>
            ret = USBD_FAIL;
 800b092:	2302      	movs	r3, #2
 800b094:	75fb      	strb	r3, [r7, #23]
          break;
 800b096:	e027      	b.n	800b0e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d107      	bne.n	800b0b2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0a2:	f107 030f 	add.w	r3, r7, #15
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f001 f9bc 	bl	800c428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0b0:	e01a      	b.n	800b0e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 f94d 	bl	800c354 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	75fb      	strb	r3, [r7, #23]
          break;
 800b0be:	e013      	b.n	800b0e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d00d      	beq.n	800b0e6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 f941 	bl	800c354 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b0d6:	e006      	b.n	800b0e6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f001 f93a 	bl	800c354 <USBD_CtlError>
          ret = USBD_FAIL;
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	75fb      	strb	r3, [r7, #23]
          break;
 800b0e4:	e000      	b.n	800b0e8 <USBD_CDC_Setup+0x12c>
          break;
 800b0e6:	bf00      	nop
      }
      break;
 800b0e8:	e006      	b.n	800b0f8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 f931 	bl	800c354 <USBD_CtlError>
      ret = USBD_FAIL;
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0f6:	bf00      	nop
  }

  return ret;
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b114:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b11c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b124:	2b00      	cmp	r3, #0
 800b126:	d03a      	beq.n	800b19e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b128:	78fa      	ldrb	r2, [r7, #3]
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	4613      	mov	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	331c      	adds	r3, #28
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d029      	beq.n	800b192 <USBD_CDC_DataIn+0x90>
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	440b      	add	r3, r1
 800b14c:	331c      	adds	r3, #28
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	78f9      	ldrb	r1, [r7, #3]
 800b152:	68b8      	ldr	r0, [r7, #8]
 800b154:	460b      	mov	r3, r1
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	440b      	add	r3, r1
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	4403      	add	r3, r0
 800b15e:	3320      	adds	r3, #32
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	fbb2 f1f3 	udiv	r1, r2, r3
 800b166:	fb01 f303 	mul.w	r3, r1, r3
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d110      	bne.n	800b192 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b170:	78fa      	ldrb	r2, [r7, #3]
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	440b      	add	r3, r1
 800b17e:	331c      	adds	r3, #28
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b184:	78f9      	ldrb	r1, [r7, #3]
 800b186:	2300      	movs	r3, #0
 800b188:	2200      	movs	r2, #0
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f001 fddc 	bl	800cd48 <USBD_LL_Transmit>
 800b190:	e003      	b.n	800b19a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	e000      	b.n	800b1a0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b19e:	2302      	movs	r3, #2
  }
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f001 fe07 	bl	800cdd4 <USBD_LL_GetRxDataSize>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00d      	beq.n	800b1f4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	4798      	blx	r3

    return USBD_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e000      	b.n	800b1f6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b1f4:	2302      	movs	r3, #2
  }
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b20c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b214:	2b00      	cmp	r3, #0
 800b216:	d014      	beq.n	800b242 <USBD_CDC_EP0_RxReady+0x44>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b21e:	2bff      	cmp	r3, #255	@ 0xff
 800b220:	d00f      	beq.n	800b242 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b230:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b238:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	22ff      	movs	r2, #255	@ 0xff
 800b23e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2243      	movs	r2, #67	@ 0x43
 800b258:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b25a:	4b03      	ldr	r3, [pc, #12]	@ (800b268 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	bc80      	pop	{r7}
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20000094 	.word	0x20000094

0800b26c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2243      	movs	r2, #67	@ 0x43
 800b278:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b27a:	4b03      	ldr	r3, [pc, #12]	@ (800b288 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	bc80      	pop	{r7}
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	20000050 	.word	0x20000050

0800b28c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2243      	movs	r2, #67	@ 0x43
 800b298:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b29a:	4b03      	ldr	r3, [pc, #12]	@ (800b2a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bc80      	pop	{r7}
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	200000d8 	.word	0x200000d8

0800b2ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	220a      	movs	r2, #10
 800b2b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b2ba:	4b03      	ldr	r3, [pc, #12]	@ (800b2c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bc80      	pop	{r7}
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	2000000c 	.word	0x2000000c

0800b2cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d005      	beq.n	800b2ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bc80      	pop	{r7}
 800b2f6:	4770      	bx	lr

0800b2f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	4613      	mov	r3, r2
 800b304:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b30c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b316:	88fa      	ldrh	r2, [r7, #6]
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	371c      	adds	r7, #28
 800b324:	46bd      	mov	sp, r7
 800b326:	bc80      	pop	{r7}
 800b328:	4770      	bx	lr

0800b32a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b085      	sub	sp, #20
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b33a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bc80      	pop	{r7}
 800b34e:	4770      	bx	lr

0800b350 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b35e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b366:	2b00      	cmp	r3, #0
 800b368:	d01c      	beq.n	800b3a4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b370:	2b00      	cmp	r3, #0
 800b372:	d115      	bne.n	800b3a0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2201      	movs	r2, #1
 800b378:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b392:	b29b      	uxth	r3, r3
 800b394:	2181      	movs	r1, #129	@ 0x81
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f001 fcd6 	bl	800cd48 <USBD_LL_Transmit>

      return USBD_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	e002      	b.n	800b3a6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e000      	b.n	800b3a6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b3a4:	2302      	movs	r3, #2
  }
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b084      	sub	sp, #16
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d017      	beq.n	800b3f8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	7c1b      	ldrb	r3, [r3, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d109      	bne.n	800b3e4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3da:	2101      	movs	r1, #1
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f001 fcd6 	bl	800cd8e <USBD_LL_PrepareReceive>
 800b3e2:	e007      	b.n	800b3f4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3ea:	2340      	movs	r3, #64	@ 0x40
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f001 fccd 	bl	800cd8e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e000      	b.n	800b3fa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b3f8:	2302      	movs	r3, #2
  }
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	60b9      	str	r1, [r7, #8]
 800b40c:	4613      	mov	r3, r2
 800b40e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b416:	2302      	movs	r3, #2
 800b418:	e01a      	b.n	800b450 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	79fa      	ldrb	r2, [r7, #7]
 800b446:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f001 fb3b 	bl	800cac4 <USBD_LL_Init>

  return USBD_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d006      	beq.n	800b47a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73fb      	strb	r3, [r7, #15]
 800b478:	e001      	b.n	800b47e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b47a:	2302      	movs	r3, #2
 800b47c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	bc80      	pop	{r7}
 800b488:	4770      	bx	lr

0800b48a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 fb70 	bl	800cb78 <USBD_LL_Start>

  return USBD_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bc80      	pop	{r7}
 800b4b4:	4770      	bx	lr

0800b4b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b084      	sub	sp, #16
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00c      	beq.n	800b4ea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	78fa      	ldrb	r2, [r7, #3]
 800b4da:	4611      	mov	r1, r2
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	4798      	blx	r3
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	78fa      	ldrb	r2, [r7, #3]
 800b50a:	4611      	mov	r1, r2
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	4798      	blx	r3

  return USBD_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fed8 	bl	800c2e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b540:	461a      	mov	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b54e:	f003 031f 	and.w	r3, r3, #31
 800b552:	2b02      	cmp	r3, #2
 800b554:	d016      	beq.n	800b584 <USBD_LL_SetupStage+0x6a>
 800b556:	2b02      	cmp	r3, #2
 800b558:	d81c      	bhi.n	800b594 <USBD_LL_SetupStage+0x7a>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <USBD_LL_SetupStage+0x4a>
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d008      	beq.n	800b574 <USBD_LL_SetupStage+0x5a>
 800b562:	e017      	b.n	800b594 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f9cb 	bl	800b908 <USBD_StdDevReq>
      break;
 800b572:	e01a      	b.n	800b5aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fa2d 	bl	800b9dc <USBD_StdItfReq>
      break;
 800b582:	e012      	b.n	800b5aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fa6d 	bl	800ba6c <USBD_StdEPReq>
      break;
 800b592:	e00a      	b.n	800b5aa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b59a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f001 fb48 	bl	800cc38 <USBD_LL_StallEP>
      break;
 800b5a8:	bf00      	nop
  }

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b5c2:	7afb      	ldrb	r3, [r7, #11]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d14b      	bne.n	800b660 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b5ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d134      	bne.n	800b644 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	68da      	ldr	r2, [r3, #12]
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d919      	bls.n	800b61a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	68da      	ldr	r2, [r3, #12]
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	1ad2      	subs	r2, r2, r3
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	68da      	ldr	r2, [r3, #12]
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d203      	bcs.n	800b608 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b604:	b29b      	uxth	r3, r3
 800b606:	e002      	b.n	800b60e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	461a      	mov	r2, r3
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 ff54 	bl	800c4c0 <USBD_CtlContinueRx>
 800b618:	e038      	b.n	800b68c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d105      	bne.n	800b63c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 ff51 	bl	800c4e4 <USBD_CtlSendStatus>
 800b642:	e023      	b.n	800b68c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b64a:	2b05      	cmp	r3, #5
 800b64c:	d11e      	bne.n	800b68c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b656:	2100      	movs	r1, #0
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f001 faed 	bl	800cc38 <USBD_LL_StallEP>
 800b65e:	e015      	b.n	800b68c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00d      	beq.n	800b688 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b672:	2b03      	cmp	r3, #3
 800b674:	d108      	bne.n	800b688 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	7afa      	ldrb	r2, [r7, #11]
 800b680:	4611      	mov	r1, r2
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	4798      	blx	r3
 800b686:	e001      	b.n	800b68c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b688:	2302      	movs	r3, #2
 800b68a:	e000      	b.n	800b68e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b086      	sub	sp, #24
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	607a      	str	r2, [r7, #4]
 800b6a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b6a4:	7afb      	ldrb	r3, [r7, #11]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d17f      	bne.n	800b7aa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3314      	adds	r3, #20
 800b6ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d15c      	bne.n	800b774 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	68da      	ldr	r2, [r3, #12]
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d915      	bls.n	800b6f2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	68da      	ldr	r2, [r3, #12]
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	1ad2      	subs	r2, r2, r3
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	6879      	ldr	r1, [r7, #4]
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 febe 	bl	800c460 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f001 fb4f 	bl	800cd8e <USBD_LL_PrepareReceive>
 800b6f0:	e04e      	b.n	800b790 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	6912      	ldr	r2, [r2, #16]
 800b6fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6fe:	fb01 f202 	mul.w	r2, r1, r2
 800b702:	1a9b      	subs	r3, r3, r2
 800b704:	2b00      	cmp	r3, #0
 800b706:	d11c      	bne.n	800b742 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	689a      	ldr	r2, [r3, #8]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b710:	429a      	cmp	r2, r3
 800b712:	d316      	bcc.n	800b742 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b71e:	429a      	cmp	r2, r3
 800b720:	d20f      	bcs.n	800b742 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b722:	2200      	movs	r2, #0
 800b724:	2100      	movs	r1, #0
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 fe9a 	bl	800c460 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b734:	2300      	movs	r3, #0
 800b736:	2200      	movs	r2, #0
 800b738:	2100      	movs	r1, #0
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f001 fb27 	bl	800cd8e <USBD_LL_PrepareReceive>
 800b740:	e026      	b.n	800b790 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00a      	beq.n	800b764 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b754:	2b03      	cmp	r3, #3
 800b756:	d105      	bne.n	800b764 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b764:	2180      	movs	r1, #128	@ 0x80
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f001 fa66 	bl	800cc38 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 fecc 	bl	800c50a <USBD_CtlReceiveStatus>
 800b772:	e00d      	b.n	800b790 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	d004      	beq.n	800b788 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b784:	2b00      	cmp	r3, #0
 800b786:	d103      	bne.n	800b790 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b788:	2180      	movs	r1, #128	@ 0x80
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f001 fa54 	bl	800cc38 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b796:	2b01      	cmp	r3, #1
 800b798:	d11d      	bne.n	800b7d6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff fe81 	bl	800b4a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b7a8:	e015      	b.n	800b7d6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00d      	beq.n	800b7d2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d108      	bne.n	800b7d2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7c6:	695b      	ldr	r3, [r3, #20]
 800b7c8:	7afa      	ldrb	r2, [r7, #11]
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	4798      	blx	r3
 800b7d0:	e001      	b.n	800b7d6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	e000      	b.n	800b7d8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7e8:	2340      	movs	r3, #64	@ 0x40
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f001 f9dd 	bl	800cbae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2240      	movs	r2, #64	@ 0x40
 800b800:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b804:	2340      	movs	r3, #64	@ 0x40
 800b806:	2200      	movs	r2, #0
 800b808:	2180      	movs	r1, #128	@ 0x80
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f001 f9cf 	bl	800cbae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2240      	movs	r2, #64	@ 0x40
 800b81a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b840:	2b00      	cmp	r3, #0
 800b842:	d009      	beq.n	800b858 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	6852      	ldr	r2, [r2, #4]
 800b850:	b2d2      	uxtb	r2, r2
 800b852:	4611      	mov	r1, r2
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	4798      	blx	r3
  }

  return USBD_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b862:	b480      	push	{r7}
 800b864:	b083      	sub	sp, #12
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	460b      	mov	r3, r1
 800b86c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	78fa      	ldrb	r2, [r7, #3]
 800b872:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr

0800b880 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2204      	movs	r2, #4
 800b898:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bc80      	pop	{r7}
 800b8a6:	4770      	bx	lr

0800b8a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8b6:	2b04      	cmp	r3, #4
 800b8b8:	d105      	bne.n	800b8c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bc80      	pop	{r7}
 800b8d0:	4770      	bx	lr

0800b8d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8e0:	2b03      	cmp	r3, #3
 800b8e2:	d10b      	bne.n	800b8fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d005      	beq.n	800b8fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
	...

0800b908 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b91e:	2b40      	cmp	r3, #64	@ 0x40
 800b920:	d005      	beq.n	800b92e <USBD_StdDevReq+0x26>
 800b922:	2b40      	cmp	r3, #64	@ 0x40
 800b924:	d84f      	bhi.n	800b9c6 <USBD_StdDevReq+0xbe>
 800b926:	2b00      	cmp	r3, #0
 800b928:	d009      	beq.n	800b93e <USBD_StdDevReq+0x36>
 800b92a:	2b20      	cmp	r3, #32
 800b92c:	d14b      	bne.n	800b9c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	4798      	blx	r3
      break;
 800b93c:	e048      	b.n	800b9d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	785b      	ldrb	r3, [r3, #1]
 800b942:	2b09      	cmp	r3, #9
 800b944:	d839      	bhi.n	800b9ba <USBD_StdDevReq+0xb2>
 800b946:	a201      	add	r2, pc, #4	@ (adr r2, 800b94c <USBD_StdDevReq+0x44>)
 800b948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94c:	0800b99d 	.word	0x0800b99d
 800b950:	0800b9b1 	.word	0x0800b9b1
 800b954:	0800b9bb 	.word	0x0800b9bb
 800b958:	0800b9a7 	.word	0x0800b9a7
 800b95c:	0800b9bb 	.word	0x0800b9bb
 800b960:	0800b97f 	.word	0x0800b97f
 800b964:	0800b975 	.word	0x0800b975
 800b968:	0800b9bb 	.word	0x0800b9bb
 800b96c:	0800b993 	.word	0x0800b993
 800b970:	0800b989 	.word	0x0800b989
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f9dc 	bl	800bd34 <USBD_GetDescriptor>
          break;
 800b97c:	e022      	b.n	800b9c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fb3f 	bl	800c004 <USBD_SetAddress>
          break;
 800b986:	e01d      	b.n	800b9c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fb7e 	bl	800c08c <USBD_SetConfig>
          break;
 800b990:	e018      	b.n	800b9c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fc07 	bl	800c1a8 <USBD_GetConfig>
          break;
 800b99a:	e013      	b.n	800b9c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fc37 	bl	800c212 <USBD_GetStatus>
          break;
 800b9a4:	e00e      	b.n	800b9c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9a6:	6839      	ldr	r1, [r7, #0]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fc65 	bl	800c278 <USBD_SetFeature>
          break;
 800b9ae:	e009      	b.n	800b9c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fc74 	bl	800c2a0 <USBD_ClrFeature>
          break;
 800b9b8:	e004      	b.n	800b9c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fcc9 	bl	800c354 <USBD_CtlError>
          break;
 800b9c2:	bf00      	nop
      }
      break;
 800b9c4:	e004      	b.n	800b9d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fcc3 	bl	800c354 <USBD_CtlError>
      break;
 800b9ce:	bf00      	nop
  }

  return ret;
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop

0800b9dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9f2:	2b40      	cmp	r3, #64	@ 0x40
 800b9f4:	d005      	beq.n	800ba02 <USBD_StdItfReq+0x26>
 800b9f6:	2b40      	cmp	r3, #64	@ 0x40
 800b9f8:	d82e      	bhi.n	800ba58 <USBD_StdItfReq+0x7c>
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <USBD_StdItfReq+0x26>
 800b9fe:	2b20      	cmp	r3, #32
 800ba00:	d12a      	bne.n	800ba58 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d81d      	bhi.n	800ba4a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	889b      	ldrh	r3, [r3, #4]
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d813      	bhi.n	800ba40 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	88db      	ldrh	r3, [r3, #6]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d110      	bne.n	800ba54 <USBD_StdItfReq+0x78>
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10d      	bne.n	800ba54 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fd53 	bl	800c4e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba3e:	e009      	b.n	800ba54 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fc86 	bl	800c354 <USBD_CtlError>
          break;
 800ba48:	e004      	b.n	800ba54 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fc81 	bl	800c354 <USBD_CtlError>
          break;
 800ba52:	e000      	b.n	800ba56 <USBD_StdItfReq+0x7a>
          break;
 800ba54:	bf00      	nop
      }
      break;
 800ba56:	e004      	b.n	800ba62 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fc7a 	bl	800c354 <USBD_CtlError>
      break;
 800ba60:	bf00      	nop
  }

  return USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	889b      	ldrh	r3, [r3, #4]
 800ba7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba88:	2b40      	cmp	r3, #64	@ 0x40
 800ba8a:	d007      	beq.n	800ba9c <USBD_StdEPReq+0x30>
 800ba8c:	2b40      	cmp	r3, #64	@ 0x40
 800ba8e:	f200 8146 	bhi.w	800bd1e <USBD_StdEPReq+0x2b2>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00a      	beq.n	800baac <USBD_StdEPReq+0x40>
 800ba96:	2b20      	cmp	r3, #32
 800ba98:	f040 8141 	bne.w	800bd1e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	4798      	blx	r3
      break;
 800baaa:	e13d      	b.n	800bd28 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d10a      	bne.n	800bace <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	4798      	blx	r3
 800bac6:	4603      	mov	r3, r0
 800bac8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800baca:	7bfb      	ldrb	r3, [r7, #15]
 800bacc:	e12d      	b.n	800bd2a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	785b      	ldrb	r3, [r3, #1]
 800bad2:	2b03      	cmp	r3, #3
 800bad4:	d007      	beq.n	800bae6 <USBD_StdEPReq+0x7a>
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	f300 811b 	bgt.w	800bd12 <USBD_StdEPReq+0x2a6>
 800badc:	2b00      	cmp	r3, #0
 800bade:	d072      	beq.n	800bbc6 <USBD_StdEPReq+0x15a>
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d03a      	beq.n	800bb5a <USBD_StdEPReq+0xee>
 800bae4:	e115      	b.n	800bd12 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baec:	2b02      	cmp	r3, #2
 800baee:	d002      	beq.n	800baf6 <USBD_StdEPReq+0x8a>
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d015      	beq.n	800bb20 <USBD_StdEPReq+0xb4>
 800baf4:	e02b      	b.n	800bb4e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00c      	beq.n	800bb16 <USBD_StdEPReq+0xaa>
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
 800bafe:	2b80      	cmp	r3, #128	@ 0x80
 800bb00:	d009      	beq.n	800bb16 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bb02:	7bbb      	ldrb	r3, [r7, #14]
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 f896 	bl	800cc38 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bb0c:	2180      	movs	r1, #128	@ 0x80
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f001 f892 	bl	800cc38 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb14:	e020      	b.n	800bb58 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fc1b 	bl	800c354 <USBD_CtlError>
              break;
 800bb1e:	e01b      	b.n	800bb58 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	885b      	ldrh	r3, [r3, #2]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10e      	bne.n	800bb46 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bb28:	7bbb      	ldrb	r3, [r7, #14]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00b      	beq.n	800bb46 <USBD_StdEPReq+0xda>
 800bb2e:	7bbb      	ldrb	r3, [r7, #14]
 800bb30:	2b80      	cmp	r3, #128	@ 0x80
 800bb32:	d008      	beq.n	800bb46 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	88db      	ldrh	r3, [r3, #6]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d104      	bne.n	800bb46 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f001 f879 	bl	800cc38 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 fccc 	bl	800c4e4 <USBD_CtlSendStatus>

              break;
 800bb4c:	e004      	b.n	800bb58 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fbff 	bl	800c354 <USBD_CtlError>
              break;
 800bb56:	bf00      	nop
          }
          break;
 800bb58:	e0e0      	b.n	800bd1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d002      	beq.n	800bb6a <USBD_StdEPReq+0xfe>
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d015      	beq.n	800bb94 <USBD_StdEPReq+0x128>
 800bb68:	e026      	b.n	800bbb8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb6a:	7bbb      	ldrb	r3, [r7, #14]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00c      	beq.n	800bb8a <USBD_StdEPReq+0x11e>
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	2b80      	cmp	r3, #128	@ 0x80
 800bb74:	d009      	beq.n	800bb8a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bb76:	7bbb      	ldrb	r3, [r7, #14]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 f85c 	bl	800cc38 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bb80:	2180      	movs	r1, #128	@ 0x80
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 f858 	bl	800cc38 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb88:	e01c      	b.n	800bbc4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fbe1 	bl	800c354 <USBD_CtlError>
              break;
 800bb92:	e017      	b.n	800bbc4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	885b      	ldrh	r3, [r3, #2]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d112      	bne.n	800bbc2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
 800bb9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d004      	beq.n	800bbb0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f001 f863 	bl	800cc76 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fc97 	bl	800c4e4 <USBD_CtlSendStatus>
              }
              break;
 800bbb6:	e004      	b.n	800bbc2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fbca 	bl	800c354 <USBD_CtlError>
              break;
 800bbc0:	e000      	b.n	800bbc4 <USBD_StdEPReq+0x158>
              break;
 800bbc2:	bf00      	nop
          }
          break;
 800bbc4:	e0aa      	b.n	800bd1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d002      	beq.n	800bbd6 <USBD_StdEPReq+0x16a>
 800bbd0:	2b03      	cmp	r3, #3
 800bbd2:	d032      	beq.n	800bc3a <USBD_StdEPReq+0x1ce>
 800bbd4:	e097      	b.n	800bd06 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd6:	7bbb      	ldrb	r3, [r7, #14]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <USBD_StdEPReq+0x180>
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	2b80      	cmp	r3, #128	@ 0x80
 800bbe0:	d004      	beq.n	800bbec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fbb5 	bl	800c354 <USBD_CtlError>
                break;
 800bbea:	e091      	b.n	800bd10 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da0b      	bge.n	800bc0c <USBD_StdEPReq+0x1a0>
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	3310      	adds	r3, #16
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	4413      	add	r3, r2
 800bc08:	3304      	adds	r3, #4
 800bc0a:	e00b      	b.n	800bc24 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	4413      	add	r3, r2
 800bc22:	3304      	adds	r3, #4
 800bc24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	4619      	mov	r1, r3
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fbf8 	bl	800c428 <USBD_CtlSendData>
              break;
 800bc38:	e06a      	b.n	800bd10 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	da11      	bge.n	800bc66 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	f003 020f 	and.w	r2, r3, #15
 800bc48:	6879      	ldr	r1, [r7, #4]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	4413      	add	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	440b      	add	r3, r1
 800bc54:	3318      	adds	r3, #24
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d117      	bne.n	800bc8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fb78 	bl	800c354 <USBD_CtlError>
                  break;
 800bc64:	e054      	b.n	800bd10 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	f003 020f 	and.w	r2, r3, #15
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	440b      	add	r3, r1
 800bc78:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d104      	bne.n	800bc8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 fb65 	bl	800c354 <USBD_CtlError>
                  break;
 800bc8a:	e041      	b.n	800bd10 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	da0b      	bge.n	800bcac <USBD_StdEPReq+0x240>
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	3310      	adds	r3, #16
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	4413      	add	r3, r2
 800bca8:	3304      	adds	r3, #4
 800bcaa:	e00b      	b.n	800bcc4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <USBD_StdEPReq+0x266>
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	2b80      	cmp	r3, #128	@ 0x80
 800bcd0:	d103      	bne.n	800bcda <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	e00e      	b.n	800bcf8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 ffe8 	bl	800ccb4 <USBD_LL_IsStallEP>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2201      	movs	r2, #1
 800bcee:	601a      	str	r2, [r3, #0]
 800bcf0:	e002      	b.n	800bcf8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fb92 	bl	800c428 <USBD_CtlSendData>
              break;
 800bd04:	e004      	b.n	800bd10 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fb23 	bl	800c354 <USBD_CtlError>
              break;
 800bd0e:	bf00      	nop
          }
          break;
 800bd10:	e004      	b.n	800bd1c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bd12:	6839      	ldr	r1, [r7, #0]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 fb1d 	bl	800c354 <USBD_CtlError>
          break;
 800bd1a:	bf00      	nop
      }
      break;
 800bd1c:	e004      	b.n	800bd28 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fb17 	bl	800c354 <USBD_CtlError>
      break;
 800bd26:	bf00      	nop
  }

  return ret;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	885b      	ldrh	r3, [r3, #2]
 800bd4e:	0a1b      	lsrs	r3, r3, #8
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	3b01      	subs	r3, #1
 800bd54:	2b06      	cmp	r3, #6
 800bd56:	f200 8128 	bhi.w	800bfaa <USBD_GetDescriptor+0x276>
 800bd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd60 <USBD_GetDescriptor+0x2c>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bd7d 	.word	0x0800bd7d
 800bd64:	0800bd95 	.word	0x0800bd95
 800bd68:	0800bdd5 	.word	0x0800bdd5
 800bd6c:	0800bfab 	.word	0x0800bfab
 800bd70:	0800bfab 	.word	0x0800bfab
 800bd74:	0800bf4b 	.word	0x0800bf4b
 800bd78:	0800bf77 	.word	0x0800bf77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	7c12      	ldrb	r2, [r2, #16]
 800bd88:	f107 0108 	add.w	r1, r7, #8
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	4798      	blx	r3
 800bd90:	60f8      	str	r0, [r7, #12]
      break;
 800bd92:	e112      	b.n	800bfba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	7c1b      	ldrb	r3, [r3, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10d      	bne.n	800bdb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda4:	f107 0208 	add.w	r2, r7, #8
 800bda8:	4610      	mov	r0, r2
 800bdaa:	4798      	blx	r3
 800bdac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bdb6:	e100      	b.n	800bfba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc0:	f107 0208 	add.w	r2, r7, #8
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4798      	blx	r3
 800bdc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	2202      	movs	r2, #2
 800bdd0:	701a      	strb	r2, [r3, #0]
      break;
 800bdd2:	e0f2      	b.n	800bfba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	885b      	ldrh	r3, [r3, #2]
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	2b05      	cmp	r3, #5
 800bddc:	f200 80ac 	bhi.w	800bf38 <USBD_GetDescriptor+0x204>
 800bde0:	a201      	add	r2, pc, #4	@ (adr r2, 800bde8 <USBD_GetDescriptor+0xb4>)
 800bde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde6:	bf00      	nop
 800bde8:	0800be01 	.word	0x0800be01
 800bdec:	0800be35 	.word	0x0800be35
 800bdf0:	0800be69 	.word	0x0800be69
 800bdf4:	0800be9d 	.word	0x0800be9d
 800bdf8:	0800bed1 	.word	0x0800bed1
 800bdfc:	0800bf05 	.word	0x0800bf05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00b      	beq.n	800be24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	7c12      	ldrb	r2, [r2, #16]
 800be18:	f107 0108 	add.w	r1, r7, #8
 800be1c:	4610      	mov	r0, r2
 800be1e:	4798      	blx	r3
 800be20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be22:	e091      	b.n	800bf48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fa94 	bl	800c354 <USBD_CtlError>
            err++;
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	3301      	adds	r3, #1
 800be30:	72fb      	strb	r3, [r7, #11]
          break;
 800be32:	e089      	b.n	800bf48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00b      	beq.n	800be58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	7c12      	ldrb	r2, [r2, #16]
 800be4c:	f107 0108 	add.w	r1, r7, #8
 800be50:	4610      	mov	r0, r2
 800be52:	4798      	blx	r3
 800be54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be56:	e077      	b.n	800bf48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fa7a 	bl	800c354 <USBD_CtlError>
            err++;
 800be60:	7afb      	ldrb	r3, [r7, #11]
 800be62:	3301      	adds	r3, #1
 800be64:	72fb      	strb	r3, [r7, #11]
          break;
 800be66:	e06f      	b.n	800bf48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00b      	beq.n	800be8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	7c12      	ldrb	r2, [r2, #16]
 800be80:	f107 0108 	add.w	r1, r7, #8
 800be84:	4610      	mov	r0, r2
 800be86:	4798      	blx	r3
 800be88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be8a:	e05d      	b.n	800bf48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fa60 	bl	800c354 <USBD_CtlError>
            err++;
 800be94:	7afb      	ldrb	r3, [r7, #11]
 800be96:	3301      	adds	r3, #1
 800be98:	72fb      	strb	r3, [r7, #11]
          break;
 800be9a:	e055      	b.n	800bf48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00b      	beq.n	800bec0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	7c12      	ldrb	r2, [r2, #16]
 800beb4:	f107 0108 	add.w	r1, r7, #8
 800beb8:	4610      	mov	r0, r2
 800beba:	4798      	blx	r3
 800bebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bebe:	e043      	b.n	800bf48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fa46 	bl	800c354 <USBD_CtlError>
            err++;
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	3301      	adds	r3, #1
 800becc:	72fb      	strb	r3, [r7, #11]
          break;
 800bece:	e03b      	b.n	800bf48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00b      	beq.n	800bef4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bee2:	695b      	ldr	r3, [r3, #20]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	7c12      	ldrb	r2, [r2, #16]
 800bee8:	f107 0108 	add.w	r1, r7, #8
 800beec:	4610      	mov	r0, r2
 800beee:	4798      	blx	r3
 800bef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bef2:	e029      	b.n	800bf48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fa2c 	bl	800c354 <USBD_CtlError>
            err++;
 800befc:	7afb      	ldrb	r3, [r7, #11]
 800befe:	3301      	adds	r3, #1
 800bf00:	72fb      	strb	r3, [r7, #11]
          break;
 800bf02:	e021      	b.n	800bf48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00b      	beq.n	800bf28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	7c12      	ldrb	r2, [r2, #16]
 800bf1c:	f107 0108 	add.w	r1, r7, #8
 800bf20:	4610      	mov	r0, r2
 800bf22:	4798      	blx	r3
 800bf24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf26:	e00f      	b.n	800bf48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fa12 	bl	800c354 <USBD_CtlError>
            err++;
 800bf30:	7afb      	ldrb	r3, [r7, #11]
 800bf32:	3301      	adds	r3, #1
 800bf34:	72fb      	strb	r3, [r7, #11]
          break;
 800bf36:	e007      	b.n	800bf48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa0a 	bl	800c354 <USBD_CtlError>
          err++;
 800bf40:	7afb      	ldrb	r3, [r7, #11]
 800bf42:	3301      	adds	r3, #1
 800bf44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bf46:	e038      	b.n	800bfba <USBD_GetDescriptor+0x286>
 800bf48:	e037      	b.n	800bfba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	7c1b      	ldrb	r3, [r3, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d109      	bne.n	800bf66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf5a:	f107 0208 	add.w	r2, r7, #8
 800bf5e:	4610      	mov	r0, r2
 800bf60:	4798      	blx	r3
 800bf62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf64:	e029      	b.n	800bfba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f9f3 	bl	800c354 <USBD_CtlError>
        err++;
 800bf6e:	7afb      	ldrb	r3, [r7, #11]
 800bf70:	3301      	adds	r3, #1
 800bf72:	72fb      	strb	r3, [r7, #11]
      break;
 800bf74:	e021      	b.n	800bfba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	7c1b      	ldrb	r3, [r3, #16]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10d      	bne.n	800bf9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf86:	f107 0208 	add.w	r2, r7, #8
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	4798      	blx	r3
 800bf8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	3301      	adds	r3, #1
 800bf94:	2207      	movs	r2, #7
 800bf96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf98:	e00f      	b.n	800bfba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 f9d9 	bl	800c354 <USBD_CtlError>
        err++;
 800bfa2:	7afb      	ldrb	r3, [r7, #11]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	72fb      	strb	r3, [r7, #11]
      break;
 800bfa8:	e007      	b.n	800bfba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f9d1 	bl	800c354 <USBD_CtlError>
      err++;
 800bfb2:	7afb      	ldrb	r3, [r7, #11]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	72fb      	strb	r3, [r7, #11]
      break;
 800bfb8:	bf00      	nop
  }

  if (err != 0U)
 800bfba:	7afb      	ldrb	r3, [r7, #11]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d11c      	bne.n	800bffa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bfc0:	893b      	ldrh	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d011      	beq.n	800bfea <USBD_GetDescriptor+0x2b6>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	88db      	ldrh	r3, [r3, #6]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00d      	beq.n	800bfea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	88da      	ldrh	r2, [r3, #6]
 800bfd2:	893b      	ldrh	r3, [r7, #8]
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	bf28      	it	cs
 800bfd8:	4613      	movcs	r3, r2
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bfde:	893b      	ldrh	r3, [r7, #8]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	68f9      	ldr	r1, [r7, #12]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fa1f 	bl	800c428 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	88db      	ldrh	r3, [r3, #6]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d104      	bne.n	800bffc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fa76 	bl	800c4e4 <USBD_CtlSendStatus>
 800bff8:	e000      	b.n	800bffc <USBD_GetDescriptor+0x2c8>
    return;
 800bffa:	bf00      	nop
    }
  }
}
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop

0800c004 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	889b      	ldrh	r3, [r3, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d130      	bne.n	800c078 <USBD_SetAddress+0x74>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	88db      	ldrh	r3, [r3, #6]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d12c      	bne.n	800c078 <USBD_SetAddress+0x74>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	885b      	ldrh	r3, [r3, #2]
 800c022:	2b7f      	cmp	r3, #127	@ 0x7f
 800c024:	d828      	bhi.n	800c078 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	885b      	ldrh	r3, [r3, #2]
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c030:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c038:	2b03      	cmp	r3, #3
 800c03a:	d104      	bne.n	800c046 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f988 	bl	800c354 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c044:	e01d      	b.n	800c082 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	7bfa      	ldrb	r2, [r7, #15]
 800c04a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fe59 	bl	800cd0a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fa43 	bl	800c4e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2202      	movs	r2, #2
 800c068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c06c:	e009      	b.n	800c082 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c076:	e004      	b.n	800c082 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 f96a 	bl	800c354 <USBD_CtlError>
  }
}
 800c080:	bf00      	nop
 800c082:	bf00      	nop
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	885b      	ldrh	r3, [r3, #2]
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	4b41      	ldr	r3, [pc, #260]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c09e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0a0:	4b40      	ldr	r3, [pc, #256]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d904      	bls.n	800c0b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f952 	bl	800c354 <USBD_CtlError>
 800c0b0:	e075      	b.n	800c19e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d002      	beq.n	800c0c2 <USBD_SetConfig+0x36>
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d023      	beq.n	800c108 <USBD_SetConfig+0x7c>
 800c0c0:	e062      	b.n	800c188 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c0c2:	4b38      	ldr	r3, [pc, #224]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d01a      	beq.n	800c100 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c0ca:	4b36      	ldr	r3, [pc, #216]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2203      	movs	r2, #3
 800c0d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c0dc:	4b31      	ldr	r3, [pc, #196]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff f9e7 	bl	800b4b6 <USBD_SetClassConfig>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d104      	bne.n	800c0f8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f92f 	bl	800c354 <USBD_CtlError>
            return;
 800c0f6:	e052      	b.n	800c19e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f9f3 	bl	800c4e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c0fe:	e04e      	b.n	800c19e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f9ef 	bl	800c4e4 <USBD_CtlSendStatus>
        break;
 800c106:	e04a      	b.n	800c19e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c108:	4b26      	ldr	r3, [pc, #152]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d112      	bne.n	800c136 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2202      	movs	r2, #2
 800c114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c118:	4b22      	ldr	r3, [pc, #136]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	461a      	mov	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c122:	4b20      	ldr	r3, [pc, #128]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f7ff f9e3 	bl	800b4f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f9d8 	bl	800c4e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c134:	e033      	b.n	800c19e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c136:	4b1b      	ldr	r3, [pc, #108]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	429a      	cmp	r2, r3
 800c142:	d01d      	beq.n	800c180 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff f9d1 	bl	800b4f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c152:	4b14      	ldr	r3, [pc, #80]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c15c:	4b11      	ldr	r3, [pc, #68]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff f9a7 	bl	800b4b6 <USBD_SetClassConfig>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d104      	bne.n	800c178 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f8ef 	bl	800c354 <USBD_CtlError>
            return;
 800c176:	e012      	b.n	800c19e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f9b3 	bl	800c4e4 <USBD_CtlSendStatus>
        break;
 800c17e:	e00e      	b.n	800c19e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f9af 	bl	800c4e4 <USBD_CtlSendStatus>
        break;
 800c186:	e00a      	b.n	800c19e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f8e2 	bl	800c354 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c190:	4b04      	ldr	r3, [pc, #16]	@ (800c1a4 <USBD_SetConfig+0x118>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff f9ac 	bl	800b4f4 <USBD_ClrClassConfig>
        break;
 800c19c:	bf00      	nop
    }
  }
}
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	2000052c 	.word	0x2000052c

0800c1a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	88db      	ldrh	r3, [r3, #6]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d004      	beq.n	800c1c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f8c9 	bl	800c354 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c1c2:	e022      	b.n	800c20a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	dc02      	bgt.n	800c1d4 <USBD_GetConfig+0x2c>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dc03      	bgt.n	800c1da <USBD_GetConfig+0x32>
 800c1d2:	e015      	b.n	800c200 <USBD_GetConfig+0x58>
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d00b      	beq.n	800c1f0 <USBD_GetConfig+0x48>
 800c1d8:	e012      	b.n	800c200 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f91d 	bl	800c428 <USBD_CtlSendData>
        break;
 800c1ee:	e00c      	b.n	800c20a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3304      	adds	r3, #4
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f915 	bl	800c428 <USBD_CtlSendData>
        break;
 800c1fe:	e004      	b.n	800c20a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f8a6 	bl	800c354 <USBD_CtlError>
        break;
 800c208:	bf00      	nop
}
 800c20a:	bf00      	nop
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b082      	sub	sp, #8
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c222:	3b01      	subs	r3, #1
 800c224:	2b02      	cmp	r3, #2
 800c226:	d81e      	bhi.n	800c266 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	88db      	ldrh	r3, [r3, #6]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d004      	beq.n	800c23a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f88e 	bl	800c354 <USBD_CtlError>
        break;
 800c238:	e01a      	b.n	800c270 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c246:	2b00      	cmp	r3, #0
 800c248:	d005      	beq.n	800c256 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f043 0202 	orr.w	r2, r3, #2
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	330c      	adds	r3, #12
 800c25a:	2202      	movs	r2, #2
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f8e2 	bl	800c428 <USBD_CtlSendData>
      break;
 800c264:	e004      	b.n	800c270 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f873 	bl	800c354 <USBD_CtlError>
      break;
 800c26e:	bf00      	nop
  }
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	885b      	ldrh	r3, [r3, #2]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d106      	bne.n	800c298 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f926 	bl	800c4e4 <USBD_CtlSendStatus>
  }
}
 800c298:	bf00      	nop
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d80b      	bhi.n	800c2ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	885b      	ldrh	r3, [r3, #2]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d10c      	bne.n	800c2d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f90c 	bl	800c4e4 <USBD_CtlSendStatus>
      }
      break;
 800c2cc:	e004      	b.n	800c2d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f83f 	bl	800c354 <USBD_CtlError>
      break;
 800c2d6:	e000      	b.n	800c2da <USBD_ClrFeature+0x3a>
      break;
 800c2d8:	bf00      	nop
  }
}
 800c2da:	bf00      	nop
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c2e2:	b480      	push	{r7}
 800c2e4:	b083      	sub	sp, #12
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	785a      	ldrb	r2, [r3, #1]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	3302      	adds	r3, #2
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	461a      	mov	r2, r3
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	3303      	adds	r3, #3
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	021b      	lsls	r3, r3, #8
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	4413      	add	r3, r2
 800c310:	b29a      	uxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	3304      	adds	r3, #4
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	461a      	mov	r2, r3
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	3305      	adds	r3, #5
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	021b      	lsls	r3, r3, #8
 800c326:	b29b      	uxth	r3, r3
 800c328:	4413      	add	r3, r2
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	3306      	adds	r3, #6
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	3307      	adds	r3, #7
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	021b      	lsls	r3, r3, #8
 800c340:	b29b      	uxth	r3, r3
 800c342:	4413      	add	r3, r2
 800c344:	b29a      	uxth	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	80da      	strh	r2, [r3, #6]

}
 800c34a:	bf00      	nop
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	bc80      	pop	{r7}
 800c352:	4770      	bx	lr

0800c354 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c35e:	2180      	movs	r1, #128	@ 0x80
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fc69 	bl	800cc38 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c366:	2100      	movs	r1, #0
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fc65 	bl	800cc38 <USBD_LL_StallEP>
}
 800c36e:	bf00      	nop
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c382:	2300      	movs	r3, #0
 800c384:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d032      	beq.n	800c3f2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 f834 	bl	800c3fa <USBD_GetLen>
 800c392:	4603      	mov	r3, r0
 800c394:	3301      	adds	r3, #1
 800c396:	b29b      	uxth	r3, r3
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c3a0:	7dfb      	ldrb	r3, [r7, #23]
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	75fa      	strb	r2, [r7, #23]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	7812      	ldrb	r2, [r2, #0]
 800c3b0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	75fa      	strb	r2, [r7, #23]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	4413      	add	r3, r2
 800c3be:	2203      	movs	r2, #3
 800c3c0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c3c2:	e012      	b.n	800c3ea <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	60fa      	str	r2, [r7, #12]
 800c3ca:	7dfa      	ldrb	r2, [r7, #23]
 800c3cc:	1c51      	adds	r1, r2, #1
 800c3ce:	75f9      	strb	r1, [r7, #23]
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	440a      	add	r2, r1
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c3da:	7dfb      	ldrb	r3, [r7, #23]
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	75fa      	strb	r2, [r7, #23]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e8      	bne.n	800c3c4 <USBD_GetString+0x4e>
    }
  }
}
 800c3f2:	bf00      	nop
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b085      	sub	sp, #20
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c402:	2300      	movs	r3, #0
 800c404:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c406:	e005      	b.n	800c414 <USBD_GetLen+0x1a>
  {
    len++;
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	3301      	adds	r3, #1
 800c40c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3301      	adds	r3, #1
 800c412:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1f5      	bne.n	800c408 <USBD_GetLen+0xe>
  }

  return len;
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	bc80      	pop	{r7}
 800c426:	4770      	bx	lr

0800c428 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	4613      	mov	r3, r2
 800c434:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2202      	movs	r2, #2
 800c43a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c43e:	88fa      	ldrh	r2, [r7, #6]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c444:	88fa      	ldrh	r2, [r7, #6]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c44a:	88fb      	ldrh	r3, [r7, #6]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	2100      	movs	r1, #0
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 fc79 	bl	800cd48 <USBD_LL_Transmit>

  return USBD_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	4613      	mov	r3, r2
 800c46c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c46e:	88fb      	ldrh	r3, [r7, #6]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	2100      	movs	r1, #0
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f000 fc67 	bl	800cd48 <USBD_LL_Transmit>

  return USBD_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	4613      	mov	r3, r2
 800c490:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2203      	movs	r2, #3
 800c496:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c49a:	88fa      	ldrh	r2, [r7, #6]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c4a2:	88fa      	ldrh	r2, [r7, #6]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4aa:	88fb      	ldrh	r3, [r7, #6]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f000 fc6c 	bl	800cd8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4ce:	88fb      	ldrh	r3, [r7, #6]
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f000 fc5a 	bl	800cd8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2204      	movs	r2, #4
 800c4f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fc24 	bl	800cd48 <USBD_LL_Transmit>

  return USBD_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2205      	movs	r2, #5
 800c516:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c51a:	2300      	movs	r3, #0
 800c51c:	2200      	movs	r2, #0
 800c51e:	2100      	movs	r1, #0
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fc34 	bl	800cd8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c534:	2200      	movs	r2, #0
 800c536:	4912      	ldr	r1, [pc, #72]	@ (800c580 <MX_USB_DEVICE_Init+0x50>)
 800c538:	4812      	ldr	r0, [pc, #72]	@ (800c584 <MX_USB_DEVICE_Init+0x54>)
 800c53a:	f7fe ff62 	bl	800b402 <USBD_Init>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c544:	f7f6 f8bc 	bl	80026c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c548:	490f      	ldr	r1, [pc, #60]	@ (800c588 <MX_USB_DEVICE_Init+0x58>)
 800c54a:	480e      	ldr	r0, [pc, #56]	@ (800c584 <MX_USB_DEVICE_Init+0x54>)
 800c54c:	f7fe ff84 	bl	800b458 <USBD_RegisterClass>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d001      	beq.n	800c55a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c556:	f7f6 f8b3 	bl	80026c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c55a:	490c      	ldr	r1, [pc, #48]	@ (800c58c <MX_USB_DEVICE_Init+0x5c>)
 800c55c:	4809      	ldr	r0, [pc, #36]	@ (800c584 <MX_USB_DEVICE_Init+0x54>)
 800c55e:	f7fe feb5 	bl	800b2cc <USBD_CDC_RegisterInterface>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d001      	beq.n	800c56c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c568:	f7f6 f8aa 	bl	80026c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c56c:	4805      	ldr	r0, [pc, #20]	@ (800c584 <MX_USB_DEVICE_Init+0x54>)
 800c56e:	f7fe ff8c 	bl	800b48a <USBD_Start>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c578:	f7f6 f8a2 	bl	80026c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c57c:	bf00      	nop
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	2000012c 	.word	0x2000012c
 800c584:	20000530 	.word	0x20000530
 800c588:	20000018 	.word	0x20000018
 800c58c:	2000011c 	.word	0x2000011c

0800c590 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c594:	2200      	movs	r2, #0
 800c596:	4905      	ldr	r1, [pc, #20]	@ (800c5ac <CDC_Init_FS+0x1c>)
 800c598:	4805      	ldr	r0, [pc, #20]	@ (800c5b0 <CDC_Init_FS+0x20>)
 800c59a:	f7fe fead 	bl	800b2f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c59e:	4905      	ldr	r1, [pc, #20]	@ (800c5b4 <CDC_Init_FS+0x24>)
 800c5a0:	4803      	ldr	r0, [pc, #12]	@ (800c5b0 <CDC_Init_FS+0x20>)
 800c5a2:	f7fe fec2 	bl	800b32a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20000bf4 	.word	0x20000bf4
 800c5b0:	20000530 	.word	0x20000530
 800c5b4:	200007f4 	.word	0x200007f4

0800c5b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c5bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bc80      	pop	{r7}
 800c5c4:	4770      	bx	lr
	...

0800c5c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	6039      	str	r1, [r7, #0]
 800c5d2:	71fb      	strb	r3, [r7, #7]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c5d8:	79fb      	ldrb	r3, [r7, #7]
 800c5da:	2b23      	cmp	r3, #35	@ 0x23
 800c5dc:	d84a      	bhi.n	800c674 <CDC_Control_FS+0xac>
 800c5de:	a201      	add	r2, pc, #4	@ (adr r2, 800c5e4 <CDC_Control_FS+0x1c>)
 800c5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e4:	0800c675 	.word	0x0800c675
 800c5e8:	0800c675 	.word	0x0800c675
 800c5ec:	0800c675 	.word	0x0800c675
 800c5f0:	0800c675 	.word	0x0800c675
 800c5f4:	0800c675 	.word	0x0800c675
 800c5f8:	0800c675 	.word	0x0800c675
 800c5fc:	0800c675 	.word	0x0800c675
 800c600:	0800c675 	.word	0x0800c675
 800c604:	0800c675 	.word	0x0800c675
 800c608:	0800c675 	.word	0x0800c675
 800c60c:	0800c675 	.word	0x0800c675
 800c610:	0800c675 	.word	0x0800c675
 800c614:	0800c675 	.word	0x0800c675
 800c618:	0800c675 	.word	0x0800c675
 800c61c:	0800c675 	.word	0x0800c675
 800c620:	0800c675 	.word	0x0800c675
 800c624:	0800c675 	.word	0x0800c675
 800c628:	0800c675 	.word	0x0800c675
 800c62c:	0800c675 	.word	0x0800c675
 800c630:	0800c675 	.word	0x0800c675
 800c634:	0800c675 	.word	0x0800c675
 800c638:	0800c675 	.word	0x0800c675
 800c63c:	0800c675 	.word	0x0800c675
 800c640:	0800c675 	.word	0x0800c675
 800c644:	0800c675 	.word	0x0800c675
 800c648:	0800c675 	.word	0x0800c675
 800c64c:	0800c675 	.word	0x0800c675
 800c650:	0800c675 	.word	0x0800c675
 800c654:	0800c675 	.word	0x0800c675
 800c658:	0800c675 	.word	0x0800c675
 800c65c:	0800c675 	.word	0x0800c675
 800c660:	0800c675 	.word	0x0800c675
 800c664:	0800c675 	.word	0x0800c675
 800c668:	0800c675 	.word	0x0800c675
 800c66c:	0800c675 	.word	0x0800c675
 800c670:	0800c675 	.word	0x0800c675
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c674:	bf00      	nop
  }

  return (USBD_OK);
 800c676:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c678:	4618      	mov	r0, r3
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bc80      	pop	{r7}
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop

0800c684 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(!strcmp(Buf, "display system"))
 800c68e:	490e      	ldr	r1, [pc, #56]	@ (800c6c8 <CDC_Receive_FS+0x44>)
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7f3 fd5d 	bl	8000150 <strcmp>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d102      	bne.n	800c6a2 <CDC_Receive_FS+0x1e>
	{
		USB_CDC_Transmit_SYS_Status();
 800c69c:	f7f5 fa8e 	bl	8001bbc <USB_CDC_Transmit_SYS_Status>
 800c6a0:	e00a      	b.n	800c6b8 <CDC_Receive_FS+0x34>
	}
	else if(!strcmp(Buf, "test"))
 800c6a2:	490a      	ldr	r1, [pc, #40]	@ (800c6cc <CDC_Receive_FS+0x48>)
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7f3 fd53 	bl	8000150 <strcmp>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d103      	bne.n	800c6b8 <CDC_Receive_FS+0x34>
	{
		CDC_Transmit_FS("aaa", 16);
 800c6b0:	2110      	movs	r1, #16
 800c6b2:	4807      	ldr	r0, [pc, #28]	@ (800c6d0 <CDC_Receive_FS+0x4c>)
 800c6b4:	f000 f810 	bl	800c6d8 <CDC_Transmit_FS>
	}
  // USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6b8:	4806      	ldr	r0, [pc, #24]	@ (800c6d4 <CDC_Receive_FS+0x50>)
 800c6ba:	f7fe fe78 	bl	800b3ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c6be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	0800cfb4 	.word	0x0800cfb4
 800c6cc:	0800cfc4 	.word	0x0800cfc4
 800c6d0:	0800cfcc 	.word	0x0800cfcc
 800c6d4:	20000530 	.word	0x20000530

0800c6d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c6e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c720 <CDC_Transmit_FS+0x48>)
 800c6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d001      	beq.n	800c6fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e00b      	b.n	800c716 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c6fe:	887b      	ldrh	r3, [r7, #2]
 800c700:	461a      	mov	r2, r3
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	4806      	ldr	r0, [pc, #24]	@ (800c720 <CDC_Transmit_FS+0x48>)
 800c706:	f7fe fdf7 	bl	800b2f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c70a:	4805      	ldr	r0, [pc, #20]	@ (800c720 <CDC_Transmit_FS+0x48>)
 800c70c:	f7fe fe20 	bl	800b350 <USBD_CDC_TransmitPacket>
 800c710:	4603      	mov	r3, r0
 800c712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c714:	7bfb      	ldrb	r3, [r7, #15]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20000530 	.word	0x20000530

0800c724 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	6039      	str	r1, [r7, #0]
 800c72e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	2212      	movs	r2, #18
 800c734:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c736:	4b03      	ldr	r3, [pc, #12]	@ (800c744 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c738:	4618      	mov	r0, r3
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bc80      	pop	{r7}
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	20000148 	.word	0x20000148

0800c748 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	4603      	mov	r3, r0
 800c750:	6039      	str	r1, [r7, #0]
 800c752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2204      	movs	r2, #4
 800c758:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c75a:	4b03      	ldr	r3, [pc, #12]	@ (800c768 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	bc80      	pop	{r7}
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	2000015c 	.word	0x2000015c

0800c76c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	4603      	mov	r3, r0
 800c774:	6039      	str	r1, [r7, #0]
 800c776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c778:	79fb      	ldrb	r3, [r7, #7]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d105      	bne.n	800c78a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	4907      	ldr	r1, [pc, #28]	@ (800c7a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c782:	4808      	ldr	r0, [pc, #32]	@ (800c7a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c784:	f7ff fdf7 	bl	800c376 <USBD_GetString>
 800c788:	e004      	b.n	800c794 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c78a:	683a      	ldr	r2, [r7, #0]
 800c78c:	4904      	ldr	r1, [pc, #16]	@ (800c7a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c78e:	4805      	ldr	r0, [pc, #20]	@ (800c7a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c790:	f7ff fdf1 	bl	800c376 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c794:	4b02      	ldr	r3, [pc, #8]	@ (800c7a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c796:	4618      	mov	r0, r3
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20000ff4 	.word	0x20000ff4
 800c7a4:	0800cfd0 	.word	0x0800cfd0

0800c7a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	6039      	str	r1, [r7, #0]
 800c7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	4904      	ldr	r1, [pc, #16]	@ (800c7c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c7b8:	4804      	ldr	r0, [pc, #16]	@ (800c7cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c7ba:	f7ff fddc 	bl	800c376 <USBD_GetString>
  return USBD_StrDesc;
 800c7be:	4b02      	ldr	r3, [pc, #8]	@ (800c7c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20000ff4 	.word	0x20000ff4
 800c7cc:	0800cfe8 	.word	0x0800cfe8

0800c7d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	6039      	str	r1, [r7, #0]
 800c7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	221a      	movs	r2, #26
 800c7e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7e2:	f000 f843 	bl	800c86c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c7e6:	4b02      	ldr	r3, [pc, #8]	@ (800c7f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20000160 	.word	0x20000160

0800c7f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	6039      	str	r1, [r7, #0]
 800c7fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d105      	bne.n	800c812 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	4907      	ldr	r1, [pc, #28]	@ (800c828 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c80a:	4808      	ldr	r0, [pc, #32]	@ (800c82c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c80c:	f7ff fdb3 	bl	800c376 <USBD_GetString>
 800c810:	e004      	b.n	800c81c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	4904      	ldr	r1, [pc, #16]	@ (800c828 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c816:	4805      	ldr	r0, [pc, #20]	@ (800c82c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c818:	f7ff fdad 	bl	800c376 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c81c:	4b02      	ldr	r3, [pc, #8]	@ (800c828 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20000ff4 	.word	0x20000ff4
 800c82c:	0800cffc 	.word	0x0800cffc

0800c830 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	6039      	str	r1, [r7, #0]
 800c83a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c83c:	79fb      	ldrb	r3, [r7, #7]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d105      	bne.n	800c84e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	4907      	ldr	r1, [pc, #28]	@ (800c864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c846:	4808      	ldr	r0, [pc, #32]	@ (800c868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c848:	f7ff fd95 	bl	800c376 <USBD_GetString>
 800c84c:	e004      	b.n	800c858 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	4904      	ldr	r1, [pc, #16]	@ (800c864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c852:	4805      	ldr	r0, [pc, #20]	@ (800c868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c854:	f7ff fd8f 	bl	800c376 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c858:	4b02      	ldr	r3, [pc, #8]	@ (800c864 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	20000ff4 	.word	0x20000ff4
 800c868:	0800d008 	.word	0x0800d008

0800c86c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c872:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b0 <Get_SerialNum+0x44>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c878:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b4 <Get_SerialNum+0x48>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c87e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b8 <Get_SerialNum+0x4c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4413      	add	r3, r2
 800c88a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d009      	beq.n	800c8a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c892:	2208      	movs	r2, #8
 800c894:	4909      	ldr	r1, [pc, #36]	@ (800c8bc <Get_SerialNum+0x50>)
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f000 f814 	bl	800c8c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c89c:	2204      	movs	r2, #4
 800c89e:	4908      	ldr	r1, [pc, #32]	@ (800c8c0 <Get_SerialNum+0x54>)
 800c8a0:	68b8      	ldr	r0, [r7, #8]
 800c8a2:	f000 f80f 	bl	800c8c4 <IntToUnicode>
  }
}
 800c8a6:	bf00      	nop
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	1ffff7e8 	.word	0x1ffff7e8
 800c8b4:	1ffff7ec 	.word	0x1ffff7ec
 800c8b8:	1ffff7f0 	.word	0x1ffff7f0
 800c8bc:	20000162 	.word	0x20000162
 800c8c0:	20000172 	.word	0x20000172

0800c8c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	75fb      	strb	r3, [r7, #23]
 800c8da:	e027      	b.n	800c92c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	0f1b      	lsrs	r3, r3, #28
 800c8e0:	2b09      	cmp	r3, #9
 800c8e2:	d80b      	bhi.n	800c8fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	0f1b      	lsrs	r3, r3, #28
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	440b      	add	r3, r1
 800c8f4:	3230      	adds	r2, #48	@ 0x30
 800c8f6:	b2d2      	uxtb	r2, r2
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	e00a      	b.n	800c912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	0f1b      	lsrs	r3, r3, #28
 800c900:	b2da      	uxtb	r2, r3
 800c902:	7dfb      	ldrb	r3, [r7, #23]
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	4619      	mov	r1, r3
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	440b      	add	r3, r1
 800c90c:	3237      	adds	r2, #55	@ 0x37
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	011b      	lsls	r3, r3, #4
 800c916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c918:	7dfb      	ldrb	r3, [r7, #23]
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	3301      	adds	r3, #1
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	4413      	add	r3, r2
 800c922:	2200      	movs	r2, #0
 800c924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c926:	7dfb      	ldrb	r3, [r7, #23]
 800c928:	3301      	adds	r3, #1
 800c92a:	75fb      	strb	r3, [r7, #23]
 800c92c:	7dfa      	ldrb	r2, [r7, #23]
 800c92e:	79fb      	ldrb	r3, [r7, #7]
 800c930:	429a      	cmp	r2, r3
 800c932:	d3d3      	bcc.n	800c8dc <IntToUnicode+0x18>
  }
}
 800c934:	bf00      	nop
 800c936:	bf00      	nop
 800c938:	371c      	adds	r7, #28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bc80      	pop	{r7}
 800c93e:	4770      	bx	lr

0800c940 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a0d      	ldr	r2, [pc, #52]	@ (800c984 <HAL_PCD_MspInit+0x44>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d113      	bne.n	800c97a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c952:	4b0d      	ldr	r3, [pc, #52]	@ (800c988 <HAL_PCD_MspInit+0x48>)
 800c954:	69db      	ldr	r3, [r3, #28]
 800c956:	4a0c      	ldr	r2, [pc, #48]	@ (800c988 <HAL_PCD_MspInit+0x48>)
 800c958:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c95c:	61d3      	str	r3, [r2, #28]
 800c95e:	4b0a      	ldr	r3, [pc, #40]	@ (800c988 <HAL_PCD_MspInit+0x48>)
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c96a:	2200      	movs	r2, #0
 800c96c:	2100      	movs	r1, #0
 800c96e:	2014      	movs	r0, #20
 800c970:	f7f6 ff15 	bl	800379e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c974:	2014      	movs	r0, #20
 800c976:	f7f6 ff2e 	bl	80037d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c97a:	bf00      	nop
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	40005c00 	.word	0x40005c00
 800c988:	40021000 	.word	0x40021000

0800c98c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	f7fe fdb9 	bl	800b51a <USBD_LL_SetupStage>
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800c9c2:	78fa      	ldrb	r2, [r7, #3]
 800c9c4:	6879      	ldr	r1, [r7, #4]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4413      	add	r3, r2
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	440b      	add	r3, r1
 800c9d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	4619      	mov	r1, r3
 800c9da:	f7fe fdeb 	bl	800b5b4 <USBD_LL_DataOutStage>
}
 800c9de:	bf00      	nop
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800c9f8:	78fa      	ldrb	r2, [r7, #3]
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	00db      	lsls	r3, r3, #3
 800ca04:	440b      	add	r3, r1
 800ca06:	3324      	adds	r3, #36	@ 0x24
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	78fb      	ldrb	r3, [r7, #3]
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	f7fe fe42 	bl	800b696 <USBD_LL_DataInStage>
}
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe ff52 	bl	800b8d2 <USBD_LL_SOF>
}
 800ca2e:	bf00      	nop
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b084      	sub	sp, #16
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	799b      	ldrb	r3, [r3, #6]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d001      	beq.n	800ca4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca4a:	f7f5 fe39 	bl	80026c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca54:	7bfa      	ldrb	r2, [r7, #15]
 800ca56:	4611      	mov	r1, r2
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe ff02 	bl	800b862 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fe febb 	bl	800b7e0 <USBD_LL_Reset>
}
 800ca6a:	bf00      	nop
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
	...

0800ca74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe fefc 	bl	800b880 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	7a9b      	ldrb	r3, [r3, #10]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d005      	beq.n	800ca9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca90:	4b04      	ldr	r3, [pc, #16]	@ (800caa4 <HAL_PCD_SuspendCallback+0x30>)
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	4a03      	ldr	r2, [pc, #12]	@ (800caa4 <HAL_PCD_SuspendCallback+0x30>)
 800ca96:	f043 0306 	orr.w	r3, r3, #6
 800ca9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca9c:	bf00      	nop
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	e000ed00 	.word	0xe000ed00

0800caa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fe fef6 	bl	800b8a8 <USBD_LL_Resume>
}
 800cabc:	bf00      	nop
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cacc:	4a28      	ldr	r2, [pc, #160]	@ (800cb70 <USBD_LL_Init+0xac>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a26      	ldr	r2, [pc, #152]	@ (800cb70 <USBD_LL_Init+0xac>)
 800cad8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cadc:	4b24      	ldr	r3, [pc, #144]	@ (800cb70 <USBD_LL_Init+0xac>)
 800cade:	4a25      	ldr	r2, [pc, #148]	@ (800cb74 <USBD_LL_Init+0xb0>)
 800cae0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cae2:	4b23      	ldr	r3, [pc, #140]	@ (800cb70 <USBD_LL_Init+0xac>)
 800cae4:	2208      	movs	r2, #8
 800cae6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cae8:	4b21      	ldr	r3, [pc, #132]	@ (800cb70 <USBD_LL_Init+0xac>)
 800caea:	2202      	movs	r2, #2
 800caec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800caee:	4b20      	ldr	r3, [pc, #128]	@ (800cb70 <USBD_LL_Init+0xac>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800caf4:	4b1e      	ldr	r3, [pc, #120]	@ (800cb70 <USBD_LL_Init+0xac>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cafa:	4b1d      	ldr	r3, [pc, #116]	@ (800cb70 <USBD_LL_Init+0xac>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cb00:	481b      	ldr	r0, [pc, #108]	@ (800cb70 <USBD_LL_Init+0xac>)
 800cb02:	f7f8 fb01 	bl	8005108 <HAL_PCD_Init>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d001      	beq.n	800cb10 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cb0c:	f7f5 fdd8 	bl	80026c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb16:	2318      	movs	r3, #24
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	f7fa f812 	bl	8006b44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb26:	2358      	movs	r3, #88	@ 0x58
 800cb28:	2200      	movs	r2, #0
 800cb2a:	2180      	movs	r1, #128	@ 0x80
 800cb2c:	f7fa f80a 	bl	8006b44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb36:	23c0      	movs	r3, #192	@ 0xc0
 800cb38:	2200      	movs	r2, #0
 800cb3a:	2181      	movs	r1, #129	@ 0x81
 800cb3c:	f7fa f802 	bl	8006b44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb46:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	f7f9 fff9 	bl	8006b44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	2182      	movs	r1, #130	@ 0x82
 800cb60:	f7f9 fff0 	bl	8006b44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	200011f4 	.word	0x200011f4
 800cb74:	40005c00 	.word	0x40005c00

0800cb78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f8 fbb0 	bl	80052f4 <HAL_PCD_Start>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 f94e 	bl	800ce3c <USBD_Get_USB_Status>
 800cba0:	4603      	mov	r3, r0
 800cba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	4608      	mov	r0, r1
 800cbb8:	4611      	mov	r1, r2
 800cbba:	461a      	mov	r2, r3
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	70fb      	strb	r3, [r7, #3]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	70bb      	strb	r3, [r7, #2]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbd6:	78bb      	ldrb	r3, [r7, #2]
 800cbd8:	883a      	ldrh	r2, [r7, #0]
 800cbda:	78f9      	ldrb	r1, [r7, #3]
 800cbdc:	f7f8 fd04 	bl	80055e8 <HAL_PCD_EP_Open>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 f928 	bl	800ce3c <USBD_Get_USB_Status>
 800cbec:	4603      	mov	r3, r0
 800cbee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	460b      	mov	r3, r1
 800cc04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc14:	78fa      	ldrb	r2, [r7, #3]
 800cc16:	4611      	mov	r1, r2
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7f8 fd42 	bl	80056a2 <HAL_PCD_EP_Close>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 f909 	bl	800ce3c <USBD_Get_USB_Status>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc44:	2300      	movs	r3, #0
 800cc46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc52:	78fa      	ldrb	r2, [r7, #3]
 800cc54:	4611      	mov	r1, r2
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7f8 fdea 	bl	8005830 <HAL_PCD_EP_SetStall>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 f8ea 	bl	800ce3c <USBD_Get_USB_Status>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc90:	78fa      	ldrb	r2, [r7, #3]
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7f8 fe2b 	bl	80058f0 <HAL_PCD_EP_ClrStall>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 f8cb 	bl	800ce3c <USBD_Get_USB_Status>
 800cca6:	4603      	mov	r3, r0
 800cca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ccc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	da0b      	bge.n	800cce8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccd0:	78fb      	ldrb	r3, [r7, #3]
 800ccd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	4613      	mov	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	440b      	add	r3, r1
 800cce2:	3312      	adds	r3, #18
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	e00b      	b.n	800cd00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cce8:	78fb      	ldrb	r3, [r7, #3]
 800ccea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccee:	68f9      	ldr	r1, [r7, #12]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4413      	add	r3, r2
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	440b      	add	r3, r1
 800ccfa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ccfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bc80      	pop	{r7}
 800cd08:	4770      	bx	lr

0800cd0a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	460b      	mov	r3, r1
 800cd14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd24:	78fa      	ldrb	r2, [r7, #3]
 800cd26:	4611      	mov	r1, r2
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7f8 fc39 	bl	80055a0 <HAL_PCD_SetAddress>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f000 f881 	bl	800ce3c <USBD_Get_USB_Status>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	607a      	str	r2, [r7, #4]
 800cd52:	461a      	mov	r2, r3
 800cd54:	460b      	mov	r3, r1
 800cd56:	72fb      	strb	r3, [r7, #11]
 800cd58:	4613      	mov	r3, r2
 800cd5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cd6a:	893b      	ldrh	r3, [r7, #8]
 800cd6c:	7af9      	ldrb	r1, [r7, #11]
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	f7f8 fd27 	bl	80057c2 <HAL_PCD_EP_Transmit>
 800cd74:	4603      	mov	r3, r0
 800cd76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 f85e 	bl	800ce3c <USBD_Get_USB_Status>
 800cd80:	4603      	mov	r3, r0
 800cd82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd84:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3718      	adds	r7, #24
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b086      	sub	sp, #24
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	60f8      	str	r0, [r7, #12]
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	72fb      	strb	r3, [r7, #11]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cdb0:	893b      	ldrh	r3, [r7, #8]
 800cdb2:	7af9      	ldrb	r1, [r7, #11]
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	f7f8 fcbc 	bl	8005732 <HAL_PCD_EP_Receive>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 f83b 	bl	800ce3c <USBD_Get_USB_Status>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdca:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3718      	adds	r7, #24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cde6:	78fa      	ldrb	r2, [r7, #3]
 800cde8:	4611      	mov	r1, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7f8 fcd2 	bl	8005794 <HAL_PCD_EP_GetRxCount>
 800cdf0:	4603      	mov	r3, r0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
	...

0800cdfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce04:	4b02      	ldr	r3, [pc, #8]	@ (800ce10 <USBD_static_malloc+0x14>)
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bc80      	pop	{r7}
 800ce0e:	4770      	bx	lr
 800ce10:	200014cc 	.word	0x200014cc

0800ce14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]

}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bc80      	pop	{r7}
 800ce24:	4770      	bx	lr

0800ce26 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce26:	b480      	push	{r7}
 800ce28:	b083      	sub	sp, #12
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	460b      	mov	r3, r1
 800ce30:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ce32:	bf00      	nop
 800ce34:	370c      	adds	r7, #12
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bc80      	pop	{r7}
 800ce3a:	4770      	bx	lr

0800ce3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	4603      	mov	r3, r0
 800ce44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce4a:	79fb      	ldrb	r3, [r7, #7]
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d817      	bhi.n	800ce80 <USBD_Get_USB_Status+0x44>
 800ce50:	a201      	add	r2, pc, #4	@ (adr r2, 800ce58 <USBD_Get_USB_Status+0x1c>)
 800ce52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce56:	bf00      	nop
 800ce58:	0800ce69 	.word	0x0800ce69
 800ce5c:	0800ce6f 	.word	0x0800ce6f
 800ce60:	0800ce75 	.word	0x0800ce75
 800ce64:	0800ce7b 	.word	0x0800ce7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce6c:	e00b      	b.n	800ce86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce6e:	2302      	movs	r3, #2
 800ce70:	73fb      	strb	r3, [r7, #15]
    break;
 800ce72:	e008      	b.n	800ce86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce74:	2301      	movs	r3, #1
 800ce76:	73fb      	strb	r3, [r7, #15]
    break;
 800ce78:	e005      	b.n	800ce86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce7e:	e002      	b.n	800ce86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce80:	2302      	movs	r3, #2
 800ce82:	73fb      	strb	r3, [r7, #15]
    break;
 800ce84:	bf00      	nop
  }
  return usb_status;
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bc80      	pop	{r7}
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop

0800ce94 <memset>:
 800ce94:	4603      	mov	r3, r0
 800ce96:	4402      	add	r2, r0
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d100      	bne.n	800ce9e <memset+0xa>
 800ce9c:	4770      	bx	lr
 800ce9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cea2:	e7f9      	b.n	800ce98 <memset+0x4>

0800cea4 <__libc_init_array>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	2600      	movs	r6, #0
 800cea8:	4d0c      	ldr	r5, [pc, #48]	@ (800cedc <__libc_init_array+0x38>)
 800ceaa:	4c0d      	ldr	r4, [pc, #52]	@ (800cee0 <__libc_init_array+0x3c>)
 800ceac:	1b64      	subs	r4, r4, r5
 800ceae:	10a4      	asrs	r4, r4, #2
 800ceb0:	42a6      	cmp	r6, r4
 800ceb2:	d109      	bne.n	800cec8 <__libc_init_array+0x24>
 800ceb4:	f000 f81a 	bl	800ceec <_init>
 800ceb8:	2600      	movs	r6, #0
 800ceba:	4d0a      	ldr	r5, [pc, #40]	@ (800cee4 <__libc_init_array+0x40>)
 800cebc:	4c0a      	ldr	r4, [pc, #40]	@ (800cee8 <__libc_init_array+0x44>)
 800cebe:	1b64      	subs	r4, r4, r5
 800cec0:	10a4      	asrs	r4, r4, #2
 800cec2:	42a6      	cmp	r6, r4
 800cec4:	d105      	bne.n	800ced2 <__libc_init_array+0x2e>
 800cec6:	bd70      	pop	{r4, r5, r6, pc}
 800cec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cecc:	4798      	blx	r3
 800cece:	3601      	adds	r6, #1
 800ced0:	e7ee      	b.n	800ceb0 <__libc_init_array+0xc>
 800ced2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ced6:	4798      	blx	r3
 800ced8:	3601      	adds	r6, #1
 800ceda:	e7f2      	b.n	800cec2 <__libc_init_array+0x1e>
 800cedc:	0800e068 	.word	0x0800e068
 800cee0:	0800e068 	.word	0x0800e068
 800cee4:	0800e068 	.word	0x0800e068
 800cee8:	0800e06c 	.word	0x0800e06c

0800ceec <_init>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	bf00      	nop
 800cef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef2:	bc08      	pop	{r3}
 800cef4:	469e      	mov	lr, r3
 800cef6:	4770      	bx	lr

0800cef8 <_fini>:
 800cef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefa:	bf00      	nop
 800cefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefe:	bc08      	pop	{r3}
 800cf00:	469e      	mov	lr, r3
 800cf02:	4770      	bx	lr
